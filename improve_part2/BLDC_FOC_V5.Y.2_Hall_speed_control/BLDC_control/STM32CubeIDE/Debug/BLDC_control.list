
BLDC_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075b4  080075b4  0002053c  2**0
                  CONTENTS
  4 .ARM          00000008  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075bc  080075bc  0002053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075bc  080075bc  000175bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000053c  20000000  080075c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001574  20000540  08007b00  00020540  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ab4  08007b00  00021ab4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002f42c  00000000  00000000  00020566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002ce93  00000000  00000000  0004f992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a04  00000000  00000000  0007c825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00083230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ec5bb  00000000  00000000  000847d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003db8  00000000  00000000  00170d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0001c8ff  00000000  00000000  00174b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029f3b  00000000  00000000  00191447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bb382  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b18  00000000  00000000  001bb3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000540 	.word	0x20000540
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007114 	.word	0x08007114

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000544 	.word	0x20000544
 80001c4:	08007114 	.word	0x08007114

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14d      	bne.n	80002a4 <__udivmoddi4+0xac>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d968      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b152      	cbz	r2, 800022a <__udivmoddi4+0x32>
 8000214:	fa01 f302 	lsl.w	r3, r1, r2
 8000218:	f1c2 0120 	rsb	r1, r2, #32
 800021c:	fa20 f101 	lsr.w	r1, r0, r1
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	ea41 0803 	orr.w	r8, r1, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800022e:	0c21      	lsrs	r1, r4, #16
 8000230:	fbb8 fef5 	udiv	lr, r8, r5
 8000234:	fa1f f78c 	uxth.w	r7, ip
 8000238:	fb05 831e 	mls	r3, r5, lr, r8
 800023c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000240:	fb0e f107 	mul.w	r1, lr, r7
 8000244:	4299      	cmp	r1, r3
 8000246:	d90b      	bls.n	8000260 <__udivmoddi4+0x68>
 8000248:	eb1c 0303 	adds.w	r3, ip, r3
 800024c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000250:	f080 811e 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000254:	4299      	cmp	r1, r3
 8000256:	f240 811b 	bls.w	8000490 <__udivmoddi4+0x298>
 800025a:	f1ae 0e02 	sub.w	lr, lr, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f5 	udiv	r0, r3, r5
 8000268:	fb05 3310 	mls	r3, r5, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x96>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8108 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8105 	bls.w	8000494 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000294:	2100      	movs	r1, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa8>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d908      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a8:	2e00      	cmp	r6, #0
 80002aa:	f000 80ee 	beq.w	800048a <__udivmoddi4+0x292>
 80002ae:	2100      	movs	r1, #0
 80002b0:	e9c6 0500 	strd	r0, r5, [r6]
 80002b4:	4608      	mov	r0, r1
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb65 0303 	sbc.w	r3, r5, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e2      	beq.n	80002a0 <__udivmoddi4+0xa8>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7df      	b.n	80002a0 <__udivmoddi4+0xa8>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8091 	bne.w	8000410 <__udivmoddi4+0x218>
 80002ee:	eba1 050c 	sub.w	r5, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000300:	fb07 5013 	mls	r0, r7, r3, r5
 8000304:	0c25      	lsrs	r5, r4, #16
 8000306:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	42a8      	cmp	r0, r5
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0505 	adds.w	r5, ip, r5
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	42a8      	cmp	r0, r5
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a2d      	subs	r5, r5, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb5 f0f7 	udiv	r0, r5, r7
 800032c:	fb07 5510 	mls	r5, r7, r0, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 35ff 	add.w	r5, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4628      	mov	r0, r5
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x9e>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa05 f301 	lsl.w	r3, r5, r1
 800036e:	431c      	orrs	r4, r3
 8000370:	40fd      	lsrs	r5, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f301 	lsl.w	r3, r0, r1
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 5518 	mls	r5, r9, r8, r5
 8000388:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	42a8      	cmp	r0, r5
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0505 	adds.w	r5, ip, r5
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	42a8      	cmp	r0, r5
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4465      	add	r5, ip
 80003b0:	1a2d      	subs	r5, r5, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003b8:	fb09 5510 	mls	r5, r9, r0, r5
 80003bc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45ae      	cmp	lr, r5
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0505 	adds.w	r5, ip, r5
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	45ae      	cmp	lr, r5
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4465      	add	r5, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba5 050e 	sub.w	r5, r5, lr
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15e      	cbz	r6, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb65 050e 	sbc.w	r5, r5, lr
 80003fa:	fa05 f707 	lsl.w	r7, r5, r7
 80003fe:	fa22 f301 	lsr.w	r3, r2, r1
 8000402:	40cd      	lsrs	r5, r1
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c6 7500 	strd	r7, r5, [r6]
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa25 f303 	lsr.w	r3, r5, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000430:	fb07 3011 	mls	r0, r7, r1, r3
 8000434:	0c2b      	lsrs	r3, r5, #16
 8000436:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800043a:	fb01 f00e 	mul.w	r0, r1, lr
 800043e:	4298      	cmp	r0, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f101 38ff 	add.w	r8, r1, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	4298      	cmp	r0, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3902      	subs	r1, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a1b      	subs	r3, r3, r0
 800045a:	b2ad      	uxth	r5, r5
 800045c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000460:	fb07 3310 	mls	r3, r7, r0, r3
 8000464:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000468:	fb00 f30e 	mul.w	r3, r0, lr
 800046c:	42ab      	cmp	r3, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 38ff 	add.w	r8, r0, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	42ab      	cmp	r3, r5
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	1aed      	subs	r5, r5, r3
 8000484:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e707      	b.n	80002a0 <__udivmoddi4+0xa8>
 8000490:	4686      	mov	lr, r0
 8000492:	e6e5      	b.n	8000260 <__udivmoddi4+0x68>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fa      	b.n	800028e <__udivmoddi4+0x96>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4641      	mov	r1, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4465      	add	r5, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4608      	mov	r0, r1
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000504 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004d2:	e003      	b.n	80004dc <LoopCopyDataInit>

080004d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004da:	3104      	adds	r1, #4

080004dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004e4:	d3f6      	bcc.n	80004d4 <CopyDataInit>
  ldr  r2, =_sbss
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004e8:	e002      	b.n	80004f0 <LoopFillZerobss>

080004ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004ec:	f842 3b04 	str.w	r3, [r2], #4

080004f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004f4:	d3f9      	bcc.n	80004ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004f6:	f003 f911 	bl	800371c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fa:	f006 fdd1 	bl	80070a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fe:	f000 fbbf 	bl	8000c80 <main>
  bx  lr    
 8000502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000504:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000508:	080075c4 	.word	0x080075c4
  ldr  r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000510:	2000053c 	.word	0x2000053c
  ldr  r2, =_sbss
 8000514:	20000540 	.word	0x20000540
  ldr  r3, = _ebss
 8000518:	20001ab4 	.word	0x20001ab4

0800051c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800051c:	e7fe      	b.n	800051c <BusFault_Handler>
	...

08000520 <ASPEP_start>:

    return crc == 0;
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	4604      	mov	r4, r0
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000524:	6940      	ldr	r0, [r0, #20]
 8000526:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000528:	4798      	blx	r3
  pHandle->ASPEP_State = ASPEP_IDLE;
 800052a:	2300      	movs	r3, #0
  pHandle->ASPEP_TL_State = WAITING_PACKET;
  pHandle -> syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

  /* Configure UART to receive first packet*/
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 800052c:	6d65      	ldr	r5, [r4, #84]	; 0x54
  pHandle->ASPEP_State = ASPEP_IDLE;
 800052e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pHandle -> syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000532:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000536:	6960      	ldr	r0, [r4, #20]
 8000538:	f104 011c 	add.w	r1, r4, #28
 800053c:	462b      	mov	r3, r5
 800053e:	2204      	movs	r2, #4
}
 8000540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000544:	4718      	bx	r3
 8000546:	bf00      	nop

08000548 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon (ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000548:	b410      	push	{r4}
  uint32_t * packet = (uint32_t*) pHandle->ctrlBuffer.buffer;
  *packet =( BEACON |
           (capabilities->version <<4) |
           (capabilities->DATA_CRC << 7) |
 800054a:	780a      	ldrb	r2, [r1, #0]
           (capabilities->version <<4) |
 800054c:	790c      	ldrb	r4, [r1, #4]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 800054e:	788b      	ldrb	r3, [r1, #2]
           (capabilities->DATA_CRC << 7) |
 8000550:	01d2      	lsls	r2, r2, #7
           (capabilities->version <<4) |
 8000552:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
           (((uint32_t)capabilities->RX_maxSize) << 8) |
 8000556:	784c      	ldrb	r4, [r1, #1]
           (((uint32_t)capabilities->TXA_maxSize) << 21));
 8000558:	78c9      	ldrb	r1, [r1, #3]
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 800055a:	039b      	lsls	r3, r3, #14
 800055c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
           (capabilities->version <<4) |
 8000560:	f042 0205 	orr.w	r2, r2, #5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000564:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8000568:	4313      	orrs	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 800056a:	4c16      	ldr	r4, [pc, #88]	; (80005c4 <ASPEP_sendBeacon+0x7c>)
 800056c:	f002 02f5 	and.w	r2, r2, #245	; 0xf5
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000570:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8000574:	5ca2      	ldrb	r2, [r4, r2]
 8000576:	404a      	eors	r2, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000578:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800057c:	5ca2      	ldrb	r2, [r4, r2]
 800057e:	4051      	eors	r1, r2
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000580:	f3c3 6c03 	ubfx	ip, r3, #24, #4
 8000584:	5c62      	ldrb	r2, [r4, r1]
 8000586:	4910      	ldr	r1, [pc, #64]	; (80005c8 <ASPEP_sendBeacon+0x80>)
 8000588:	ea82 020c 	eor.w	r2, r2, ip
    *headerPtr |= (uint32_t)crc << 28;
 800058c:	5c8a      	ldrb	r2, [r1, r2]
 800058e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000592:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
uint8_t ASPEP_TXframeProcess (ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
  uint8_t result = ASPEP_OK;
  ASPEP_ComputeHeaderCRC  ((uint32_t*)txBuffer); /* Insert CRC header in the packet to send */
  __disable_irq(); /*TODO: Disable High frequency task is enough */
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000596:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000598:	b143      	cbz	r3, 80005ac <ASPEP_sendBeacon+0x64>
  __ASM volatile ("cpsie i" : : : "memory");
 800059a:	b662      	cpsie	i
        pHandle -> syncBuffer.length = bufferLength;
      }
    }
    else  if ( dataType == ASPEP_CTRL )
    {
     if ( pHandle -> ctrlBuffer.state != free ) {
 800059c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005a0:	b913      	cbnz	r3, 80005a8 <ASPEP_sendBeacon+0x60>
        result = ASPEP_BUFFER_ERROR;
      }
      else {
        pHandle -> ctrlBuffer.state = pending;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005a8:	bc10      	pop	{r4}
 80005aa:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005ac:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80005b6:	6481      	str	r1, [r0, #72]	; 0x48
 80005b8:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80005ba:	2204      	movs	r2, #4
 80005bc:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 80005be:	bc10      	pop	{r4}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80005c0:	6940      	ldr	r0, [r0, #20]
 80005c2:	4718      	bx	r3
 80005c4:	0800713c 	.word	0x0800713c
 80005c8:	0800712c 	.word	0x0800712c

080005cc <ASPEP_sendPing>:
{
 80005cc:	b510      	push	{r4, lr}
  uint8_t ipID = pHandle->liid &0xF;
 80005ce:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
  uint8_t Nbit = pHandle->syncPacketCount & 0x1; /* Keep only LSB */
 80005d2:	f890 e060 	ldrb.w	lr, [r0, #96]	; 0x60
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 80005d6:	ea4f 1c41 	mov.w	ip, r1, lsl #5
 80005da:	f003 040f 	and.w	r4, r3, #15
 80005de:	ea4c 1301 	orr.w	r3, ip, r1, lsl #4
 80005e2:	f00e 0e01 	and.w	lr, lr, #1
 80005e6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80005ea:	ea43 138e 	orr.w	r3, r3, lr, lsl #6
 80005ee:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
 80005f2:	f043 0306 	orr.w	r3, r3, #6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 80005f6:	4916      	ldr	r1, [pc, #88]	; (8000650 <ASPEP_sendPing+0x84>)
 80005f8:	f003 04f6 	and.w	r4, r3, #246	; 0xf6
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 80005fc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000600:	5d0b      	ldrb	r3, [r1, r4]
 8000602:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000606:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000608:	5ccb      	ldrb	r3, [r1, r3]
 800060a:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 800060e:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	4910      	ldr	r1, [pc, #64]	; (8000654 <ASPEP_sendPing+0x88>)
 8000614:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    *headerPtr |= (uint32_t)crc << 28;
 8000618:	5ccb      	ldrb	r3, [r1, r3]
 800061a:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
 800061e:	6202      	str	r2, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000622:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000624:	b13b      	cbz	r3, 8000636 <ASPEP_sendPing+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000626:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000628:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800062c:	b913      	cbnz	r3, 8000634 <ASPEP_sendPing+0x68>
        pHandle -> ctrlBuffer.state = pending;
 800062e:	2302      	movs	r3, #2
 8000630:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000634:	bd10      	pop	{r4, pc}
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000636:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 800063a:	2303      	movs	r3, #3
 800063c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000640:	6481      	str	r1, [r0, #72]	; 0x48
 8000642:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000644:	2204      	movs	r2, #4
 8000646:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000648:	6940      	ldr	r0, [r0, #20]
}
 800064a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 800064e:	4718      	bx	r3
 8000650:	0800713c 	.word	0x0800713c
 8000654:	0800712c 	.word	0x0800712c

08000658 <ASPEP_getBuffer>:
  if (syncAsync == MCTL_SYNC)
 8000658:	2a0a      	cmp	r2, #10
{
 800065a:	b410      	push	{r4}
 800065c:	4603      	mov	r3, r0
  if (syncAsync == MCTL_SYNC)
 800065e:	d00a      	beq.n	8000676 <ASPEP_getBuffer+0x1e>
    if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock ))
 8000660:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8000664:	2a01      	cmp	r2, #1
 8000666:	d91e      	bls.n	80006a6 <ASPEP_getBuffer+0x4e>
 8000668:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800066c:	2a01      	cmp	r2, #1
 800066e:	d90f      	bls.n	8000690 <ASPEP_getBuffer+0x38>
      result = false;
 8000670:	2000      	movs	r0, #0
}
 8000672:	bc10      	pop	{r4}
 8000674:	4770      	bx	lr
    if (pHandle->syncBuffer.state <= writeLock ) /* Possible values are free or writeLock*/
 8000676:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 800067a:	2a01      	cmp	r2, #1
 800067c:	d8f8      	bhi.n	8000670 <ASPEP_getBuffer+0x18>
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 800067e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      pHandle->syncBuffer.state = writeLock;
 8000680:	2401      	movs	r4, #1
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000682:	3204      	adds	r2, #4
 8000684:	600a      	str	r2, [r1, #0]
      pHandle->syncBuffer.state = writeLock;
 8000686:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 800068a:	4620      	mov	r0, r4
}
 800068c:	bc10      	pop	{r4}
 800068e:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000690:	6b82      	ldr	r2, [r0, #56]	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 8000692:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000694:	f103 0438 	add.w	r4, r3, #56	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 8000698:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800069c:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 800069e:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006a0:	bc10      	pop	{r4}
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006a2:	600a      	str	r2, [r1, #0]
}
 80006a4:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006a6:	6b02      	ldr	r2, [r0, #48]	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 80006a8:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006aa:	f103 0430 	add.w	r4, r3, #48	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 80006ae:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006b2:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006b4:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006b6:	bc10      	pop	{r4}
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006b8:	600a      	str	r2, [r1, #0]
}
 80006ba:	4770      	bx	lr

080006bc <ASPEP_sendPacket>:
{
 80006bc:	4684      	mov	ip, r0
  if (pHandle-> ASPEP_State == ASPEP_CONNECTED)
 80006be:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 80006c2:	2802      	cmp	r0, #2
 80006c4:	d001      	beq.n	80006ca <ASPEP_sendPacket+0xe>
    result = ASPEP_NOT_CONNECTED;
 80006c6:	2002      	movs	r0, #2
}
 80006c8:	4770      	bx	lr
{
 80006ca:	b570      	push	{r4, r5, r6, lr}
    tmpHeader =  (txDataLength << 4) | syncAsync;
 80006cc:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
    *header = tmpHeader;
 80006d0:	f841 0c04 	str.w	r0, [r1, #-4]
    if (pHandle->Capabilities.DATA_CRC == 1)
 80006d4:	f89c 0067 	ldrb.w	r0, [ip, #103]	; 0x67
 80006d8:	2801      	cmp	r0, #1
    packet = packet - ASPEP_HEADER_SIZE; /* Header ues 4*8 bits on top of txBuffer*/
 80006da:	f1a1 0e04 	sub.w	lr, r1, #4
    if (pHandle->Capabilities.DATA_CRC == 1)
 80006de:	d104      	bne.n	80006ea <ASPEP_sendPacket+0x2e>
      *(packet+ASPEP_HEADER_SIZE+txDataLength) = (uint8_t) 0xCA; /* Dummy CRC */
 80006e0:	f64f 60ca 	movw	r0, #65226	; 0xfeca
 80006e4:	5288      	strh	r0, [r1, r2]
      txDataLength+=ASPEP_DATACRC_SIZE;
 80006e6:	3202      	adds	r2, #2
 80006e8:	b292      	uxth	r2, r2
    if (syncAsync == MCTL_SYNC )
 80006ea:	2b0a      	cmp	r3, #10
 80006ec:	d105      	bne.n	80006fa <ASPEP_sendPacket+0x3e>
      if ( pSupHandle->MCP_PacketAvailable)
 80006ee:	f89c 0010 	ldrb.w	r0, [ip, #16]
 80006f2:	b358      	cbz	r0, 800074c <ASPEP_sendPacket+0x90>
        pSupHandle-> MCP_PacketAvailable = false; /* CMD from master is processed*/
 80006f4:	2000      	movs	r0, #0
 80006f6:	f88c 0010 	strb.w	r0, [ip, #16]
    uint32_t header = *headerPtr;
 80006fa:	f851 0c04 	ldr.w	r0, [r1, #-4]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 80006fe:	4d34      	ldr	r5, [pc, #208]	; (80007d0 <ASPEP_sendPacket+0x114>)
 8000700:	b2c4      	uxtb	r4, r0
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 8000702:	3204      	adds	r2, #4
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000704:	5d2e      	ldrb	r6, [r5, r4]
 8000706:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800070a:	4074      	eors	r4, r6
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 800070c:	b292      	uxth	r2, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 800070e:	5d2e      	ldrb	r6, [r5, r4]
 8000710:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000714:	4074      	eors	r4, r6
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000716:	5d2c      	ldrb	r4, [r5, r4]
 8000718:	f3c0 6503 	ubfx	r5, r0, #24, #4
 800071c:	406c      	eors	r4, r5
 800071e:	4d2d      	ldr	r5, [pc, #180]	; (80007d4 <ASPEP_sendPacket+0x118>)
    *headerPtr |= (uint32_t)crc << 28;
 8000720:	5d2c      	ldrb	r4, [r5, r4]
 8000722:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000726:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800072a:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 800072c:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 8000730:	b1e1      	cbz	r1, 800076c <ASPEP_sendPacket+0xb0>
  __ASM volatile ("cpsie i" : : : "memory");
 8000732:	b662      	cpsie	i
    if ( dataType == MCTL_ASYNC )
 8000734:	2b09      	cmp	r3, #9
 8000736:	d00b      	beq.n	8000750 <ASPEP_sendPacket+0x94>
    else if (dataType == MCTL_SYNC )
 8000738:	2b0a      	cmp	r3, #10
 800073a:	d030      	beq.n	800079e <ASPEP_sendPacket+0xe2>
    else  if ( dataType == ASPEP_CTRL )
 800073c:	bbab      	cbnz	r3, 80007aa <ASPEP_sendPacket+0xee>
     if ( pHandle -> ctrlBuffer.state != free ) {
 800073e:	f89c 0024 	ldrb.w	r0, [ip, #36]	; 0x24
 8000742:	bb80      	cbnz	r0, 80007a6 <ASPEP_sendPacket+0xea>
        pHandle -> ctrlBuffer.state = pending;
 8000744:	2302      	movs	r3, #2
 8000746:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
}
 800074a:	bd70      	pop	{r4, r5, r6, pc}
        result = MCTL_SYNC_NOT_EXPECTED;
 800074c:	2001      	movs	r0, #1
}
 800074e:	bd70      	pop	{r4, r5, r6, pc}
      if ( txBuffer != (uint8_t *) pHandle->lastRequestedAsyncBuff->buffer)
 8000750:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
      if (pHandle->asyncNextBuffer == NULL)
 8000754:	f8dc 1044 	ldr.w	r1, [ip, #68]	; 0x44
      if ( txBuffer != (uint8_t *) pHandle->lastRequestedAsyncBuff->buffer)
 8000758:	6818      	ldr	r0, [r3, #0]
        result = ASPEP_BUFFER_ERROR;
 800075a:	4586      	cmp	lr, r0
 800075c:	bf14      	ite	ne
 800075e:	2003      	movne	r0, #3
 8000760:	2000      	moveq	r0, #0
      if (pHandle->asyncNextBuffer == NULL)
 8000762:	b391      	cbz	r1, 80007ca <ASPEP_sendPacket+0x10e>
      pHandle->lastRequestedAsyncBuff->state = pending;
 8000764:	2102      	movs	r1, #2
 8000766:	7199      	strb	r1, [r3, #6]
      pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000768:	809a      	strh	r2, [r3, #4]
}
 800076a:	bd70      	pop	{r4, r5, r6, pc}
    if (dataType == MCTL_ASYNC )
 800076c:	2b09      	cmp	r3, #9
 800076e:	d025      	beq.n	80007bc <ASPEP_sendPacket+0x100>
    else if (dataType == MCTL_SYNC )
 8000770:	2b0a      	cmp	r3, #10
      pHandle->syncBuffer.state = readLock;
 8000772:	f04f 0103 	mov.w	r1, #3
      pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000776:	bf0b      	itete	eq
 8000778:	f10c 0328 	addeq.w	r3, ip, #40	; 0x28
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 800077c:	f10c 0320 	addne.w	r3, ip, #32
      pHandle->syncBuffer.state = readLock;
 8000780:	f88c 102e 	strbeq.w	r1, [ip, #46]	; 0x2e
      pHandle->ctrlBuffer.state = readLock;
 8000784:	f88c 1024 	strbne.w	r1, [ip, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000788:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 800078c:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 800078e:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
 8000792:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000796:	4671      	mov	r1, lr
 8000798:	4798      	blx	r3
 800079a:	2000      	movs	r0, #0
}
 800079c:	bd70      	pop	{r4, r5, r6, pc}
      if ( pHandle -> syncBuffer.state != writeLock ) {
 800079e:	f89c 302e 	ldrb.w	r3, [ip, #46]	; 0x2e
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d003      	beq.n	80007ae <ASPEP_sendPacket+0xf2>
        result = ASPEP_BUFFER_ERROR;
 80007a6:	2003      	movs	r0, #3
}
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t result = ASPEP_OK;
 80007aa:	2000      	movs	r0, #0
}
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
        pHandle -> syncBuffer.state = pending;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f88c 302e 	strb.w	r3, [ip, #46]	; 0x2e
        pHandle -> syncBuffer.length = bufferLength;
 80007b4:	f8ac 202c 	strh.w	r2, [ip, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 80007b8:	2000      	movs	r0, #0
}
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->lastRequestedAsyncBuff->state = readLock;
 80007bc:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80007c0:	2103      	movs	r1, #3
 80007c2:	7199      	strb	r1, [r3, #6]
      pHandle->lockBuffer = (void *) pHandle->lastRequestedAsyncBuff;
 80007c4:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80007c8:	e7e0      	b.n	800078c <ASPEP_sendPacket+0xd0>
        pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80007ca:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 80007ce:	e7c9      	b.n	8000764 <ASPEP_sendPacket+0xa8>
 80007d0:	0800713c 	.word	0x0800713c
 80007d4:	0800712c 	.word	0x0800712c

080007d8 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT (ASPEP_Handle_t *pHandle )
{
 80007d8:	b510      	push	{r4, lr}
  /* First free previous readLock buffer */
  if (pHandle->ctrlBuffer.state == readLock)
 80007da:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80007de:	2b03      	cmp	r3, #3
{
 80007e0:	4604      	mov	r4, r0
  if (pHandle->ctrlBuffer.state == readLock)
 80007e2:	d013      	beq.n	800080c <ASPEP_HWDataTransmittedIT+0x34>
    pHandle -> ctrlBuffer.state = free;
  }
  else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
  {
    MCTL_Buff_t * tempBuff = (MCTL_Buff_t *) pHandle -> lockBuffer;
    tempBuff->state = free;
 80007e4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80007e6:	2100      	movs	r1, #0
 80007e8:	7191      	strb	r1, [r2, #6]
  }
  if ( pHandle -> syncBuffer.state == pending )
 80007ea:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80007ee:	2a02      	cmp	r2, #2
 80007f0:	d013      	beq.n	800081a <ASPEP_HWDataTransmittedIT+0x42>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
    pHandle ->syncBuffer.state = readLock;
  }
  /* Second prepare transfer of pending buffer */
  else if ( pHandle -> ctrlBuffer.state == pending )
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d11d      	bne.n	8000832 <ASPEP_HWDataTransmittedIT+0x5a>
  {
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80007f6:	f100 0120 	add.w	r1, r0, #32
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80007fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80007fc:	6481      	str	r1, [r0, #72]	; 0x48
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80007fe:	2204      	movs	r2, #4
 8000800:	6940      	ldr	r0, [r0, #20]
 8000802:	4798      	blx	r3
    pHandle -> ctrlBuffer.state = readLock;
 8000804:	2303      	movs	r3, #3
 8000806:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    {
      pHandle->lockBuffer = NULL;
    }
    __enable_irq();
  }
}
 800080a:	bd10      	pop	{r4, pc}
  if ( pHandle -> syncBuffer.state == pending )
 800080c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    pHandle -> ctrlBuffer.state = free;
 8000810:	2200      	movs	r2, #0
  if ( pHandle -> syncBuffer.state == pending )
 8000812:	2b02      	cmp	r3, #2
    pHandle -> ctrlBuffer.state = free;
 8000814:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if ( pHandle -> syncBuffer.state == pending )
 8000818:	d10b      	bne.n	8000832 <ASPEP_HWDataTransmittedIT+0x5a>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 800081a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800081e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000820:	64a0      	str	r0, [r4, #72]	; 0x48
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000822:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000824:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000826:	6960      	ldr	r0, [r4, #20]
 8000828:	4798      	blx	r3
    pHandle ->syncBuffer.state = readLock;
 800082a:	2303      	movs	r3, #3
 800082c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000830:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000832:	b672      	cpsid	i
    if ( pHandle->asyncNextBuffer != NULL )
 8000834:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000836:	b1cb      	cbz	r3, 800086c <ASPEP_HWDataTransmittedIT+0x94>
      pHandle->asyncNextBuffer->state = readLock;
 8000838:	2203      	movs	r2, #3
      pHandle->lockBuffer = (void *) pHandle->asyncNextBuffer;
 800083a:	64a3      	str	r3, [r4, #72]	; 0x48
      pHandle->asyncNextBuffer->state = readLock;
 800083c:	719a      	strb	r2, [r3, #6]
      pHandle->fASPEP_send (pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	889a      	ldrh	r2, [r3, #4]
 8000842:	6960      	ldr	r0, [r4, #20]
 8000844:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000846:	4798      	blx	r3
      if ( (pHandle->asyncBufferA.state == pending ) || (pHandle->asyncBufferB.state == pending))
 8000848:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800084c:	2b02      	cmp	r3, #2
 800084e:	d007      	beq.n	8000860 <ASPEP_HWDataTransmittedIT+0x88>
 8000850:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000854:	2b02      	cmp	r3, #2
 8000856:	d003      	beq.n	8000860 <ASPEP_HWDataTransmittedIT+0x88>
        pHandle->asyncNextBuffer = NULL;
 8000858:	2300      	movs	r3, #0
 800085a:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 800085c:	b662      	cpsie	i
}
 800085e:	bd10      	pop	{r4, pc}
        uint32_t temp = (uint32_t) &pHandle->asyncBufferA + (uint32_t) &pHandle->asyncBufferB - (uint32_t)  pHandle->asyncNextBuffer;
 8000860:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000862:	0063      	lsls	r3, r4, #1
 8000864:	3368      	adds	r3, #104	; 0x68
 8000866:	1a9b      	subs	r3, r3, r2
        pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp;
 8000868:	6463      	str	r3, [r4, #68]	; 0x44
      {
 800086a:	e7f7      	b.n	800085c <ASPEP_HWDataTransmittedIT+0x84>
      pHandle->lockBuffer = NULL;
 800086c:	64a3      	str	r3, [r4, #72]	; 0x48
 800086e:	e7f5      	b.n	800085c <ASPEP_HWDataTransmittedIT+0x84>

08000870 <ASPEP_RXframeProcess>:

uint8_t* ASPEP_RXframeProcess (MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  bool validCRCData = true;
  uint16_t packetNumber;
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);

  *packetLength = 0;
  if (pHandle->NewPacketAvailable)
 8000874:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);
 8000878:	69c2      	ldr	r2, [r0, #28]
  *packetLength = 0;
 800087a:	2500      	movs	r5, #0
{
 800087c:	4604      	mov	r4, r0
  *packetLength = 0;
 800087e:	800d      	strh	r5, [r1, #0]
  if (pHandle->NewPacketAvailable)
 8000880:	b193      	cbz	r3, 80008a8 <ASPEP_RXframeProcess+0x38>
  {
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
    switch (pHandle->ASPEP_State)
 8000882:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
 8000886:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
    switch (pHandle->ASPEP_State)
 800088a:	2e01      	cmp	r6, #1
 800088c:	d037      	beq.n	80008fe <ASPEP_RXframeProcess+0x8e>
 800088e:	2e02      	cmp	r6, #2
 8000890:	d04e      	beq.n	8000930 <ASPEP_RXframeProcess+0xc0>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d042      	beq.n	800091c <ASPEP_RXframeProcess+0xac>
      }

      break;
    }
    /* The valid received packet is now safely consumes, we are ready to receive a new packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000896:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000898:	6960      	ldr	r0, [r4, #20]
 800089a:	2204      	movs	r2, #4
 800089c:	f104 011c 	add.w	r1, r4, #28
 80008a0:	4798      	blx	r3
  else
  {
    /* Nothing to do, no response is due to the master */
  }
  return result;
}
 80008a2:	4628      	mov	r0, r5
 80008a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  else if (pHandle->badPacketFlag > ASPEP_OK )
 80008a8:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0f8      	beq.n	80008a2 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 80008b0:	042b      	lsls	r3, r5, #16
 80008b2:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80008b6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80008ba:	4997      	ldr	r1, [pc, #604]	; (8000b18 <ASPEP_RXframeProcess+0x2a8>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80008bc:	4897      	ldr	r0, [pc, #604]	; (8000b1c <ASPEP_RXframeProcess+0x2ac>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80008be:	f083 0309 	eor.w	r3, r3, #9
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 80008c2:	5cca      	ldrb	r2, [r1, r3]
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 80008c4:	f045 030f 	orr.w	r3, r5, #15
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 80008c8:	ea82 4515 	eor.w	r5, r2, r5, lsr #16
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80008cc:	5d4a      	ldrb	r2, [r1, r5]
    *headerPtr |= (uint32_t)crc << 28;
 80008ce:	5c82      	ldrb	r2, [r0, r2]
 80008d0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80008d4:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 80008d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d03d      	beq.n	800095a <ASPEP_RXframeProcess+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
 80008de:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 80008e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008e4:	b913      	cbnz	r3, 80008ec <ASPEP_RXframeProcess+0x7c>
        pHandle -> ctrlBuffer.state = pending;
 80008e6:	2302      	movs	r3, #2
 80008e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    pHandle->badPacketFlag = ASPEP_OK;
 80008ec:	2500      	movs	r5, #0
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 80008ee:	6960      	ldr	r0, [r4, #20]
 80008f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    pHandle->badPacketFlag = ASPEP_OK;
 80008f2:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 80008f6:	4798      	blx	r3
}
 80008f8:	4628      	mov	r0, r5
 80008fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pHandle->rxPacketType == beacon )
 80008fe:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000902:	2b05      	cmp	r3, #5
 8000904:	d035      	beq.n	8000972 <ASPEP_RXframeProcess+0x102>
      else if (pHandle->rxPacketType == ping)
 8000906:	2b06      	cmp	r3, #6
 8000908:	d1c5      	bne.n	8000896 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 800090a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800090e:	4631      	mov	r1, r6
 8000910:	f7ff fe5c 	bl	80005cc <ASPEP_sendPing>
        pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000914:	2302      	movs	r3, #2
 8000916:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800091a:	e7bc      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 800091c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000920:	2b05      	cmp	r3, #5
 8000922:	f000 8088 	beq.w	8000a36 <ASPEP_RXframeProcess+0x1c6>
      else if (pHandle->rxPacketType == ping)
 8000926:	2b06      	cmp	r3, #6
 8000928:	f000 80ca 	beq.w	8000ac0 <ASPEP_RXframeProcess+0x250>
  uint8_t* result = NULL;
 800092c:	4635      	mov	r5, r6
 800092e:	e7b2      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 8000930:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000934:	2b05      	cmp	r3, #5
 8000936:	d051      	beq.n	80009dc <ASPEP_RXframeProcess+0x16c>
      else if (pHandle->rxPacketType == ping )
 8000938:	2b06      	cmp	r3, #6
 800093a:	f000 80c8 	beq.w	8000ace <ASPEP_RXframeProcess+0x25e>
      else if (pHandle->rxPacketType == data )
 800093e:	2b09      	cmp	r3, #9
 8000940:	d1a9      	bne.n	8000896 <ASPEP_RXframeProcess+0x26>
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000942:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
          *packetLength = pHandle->rxLength;
 8000946:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
          result = pHandle->rxBuffer;
 800094a:	69a5      	ldr	r5, [r4, #24]
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 800094c:	3301      	adds	r3, #1
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800094e:	2001      	movs	r0, #1
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000950:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000954:	7420      	strb	r0, [r4, #16]
          *packetLength = pHandle->rxLength;
 8000956:	800a      	strh	r2, [r1, #0]
          result = pHandle->rxBuffer;
 8000958:	e79d      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800095a:	f104 0120 	add.w	r1, r4, #32
      pHandle->ctrlBuffer.state = readLock;
 800095e:	2303      	movs	r3, #3
 8000960:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000964:	64a1      	str	r1, [r4, #72]	; 0x48
 8000966:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000968:	2204      	movs	r2, #4
 800096a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800096c:	6960      	ldr	r0, [r4, #20]
 800096e:	4798      	blx	r3
return result;
 8000970:	e7bc      	b.n	80008ec <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000972:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000974:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000976:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800097a:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800097e:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000982:	f894 706a 	ldrb.w	r7, [r4, #106]	; 0x6a
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000986:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 800098a:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800098c:	4281      	cmp	r1, r0
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 800098e:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000992:	bf28      	it	cs
 8000994:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000996:	42ab      	cmp	r3, r5
 8000998:	4698      	mov	r8, r3
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 800099a:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800099e:	bf28      	it	cs
 80009a0:	46a8      	movcs	r8, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009a2:	45b4      	cmp	ip, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009a4:	f884 8067 	strb.w	r8, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009a8:	46e0      	mov	r8, ip
 80009aa:	bf28      	it	cs
 80009ac:	46b0      	movcs	r8, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009ae:	45be      	cmp	lr, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009b0:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009b4:	46f0      	mov	r8, lr
 80009b6:	bf28      	it	cs
 80009b8:	46b8      	movcs	r8, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80009ba:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009bc:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009c0:	f884 806a 	strb.w	r8, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80009c4:	f240 8088 	bls.w	8000ad8 <ASPEP_RXframeProcess+0x268>
          pHandle->ASPEP_State = ASPEP_IDLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        ASPEP_sendBeacon (pHandle, &pHandle->Capabilities);
 80009ce:	f104 0167 	add.w	r1, r4, #103	; 0x67
 80009d2:	4620      	mov	r0, r4
 80009d4:	f7ff fdb8 	bl	8000548 <ASPEP_sendBeacon>
  uint8_t* result = NULL;
 80009d8:	2500      	movs	r5, #0
 80009da:	e75c      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80009dc:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80009de:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009e0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e4:	f894 6067 	ldrb.w	r6, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009e8:	f894 c069 	ldrb.w	ip, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009ec:	f894 706a 	ldrb.w	r7, [r4, #106]	; 0x6a
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80009f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80009f4:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009f6:	4281      	cmp	r1, r0
 80009f8:	bf28      	it	cs
 80009fa:	4601      	movcs	r1, r0
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 80009fc:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a00:	42b3      	cmp	r3, r6
 8000a02:	4699      	mov	r9, r3
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8000a04:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a08:	bf28      	it	cs
 8000a0a:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a0c:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a0e:	f884 9067 	strb.w	r9, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a12:	46f1      	mov	r9, lr
 8000a14:	bf28      	it	cs
 8000a16:	46e1      	movcs	r9, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a18:	45b8      	cmp	r8, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a1a:	f884 9069 	strb.w	r9, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a1e:	46c1      	mov	r9, r8
 8000a20:	bf28      	it	cs
 8000a22:	46b9      	movcs	r9, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a24:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a26:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a2a:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a2e:	d964      	bls.n	8000afa <ASPEP_RXframeProcess+0x28a>
 8000a30:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a34:	e7cb      	b.n	80009ce <ASPEP_RXframeProcess+0x15e>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a36:	7f65      	ldrb	r5, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a38:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a3a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a3e:	f894 c067 	ldrb.w	ip, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a42:	f894 e069 	ldrb.w	lr, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a46:	f894 806a 	ldrb.w	r8, [r4, #106]	; 0x6a
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a4a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a4e:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a50:	42ab      	cmp	r3, r5
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8000a52:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a56:	bf28      	it	cs
 8000a58:	462b      	movcs	r3, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a5a:	4560      	cmp	r0, ip
 8000a5c:	4601      	mov	r1, r0
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8000a5e:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a62:	bf28      	it	cs
 8000a64:	4661      	movcs	r1, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a66:	4577      	cmp	r7, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a68:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a6c:	4639      	mov	r1, r7
 8000a6e:	bf28      	it	cs
 8000a70:	4671      	movcs	r1, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a72:	45c1      	cmp	r9, r8
 8000a74:	464e      	mov	r6, r9
 8000a76:	bf28      	it	cs
 8000a78:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a7a:	4560      	cmp	r0, ip
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a7c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a80:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a84:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a88:	d8a1      	bhi.n	80009ce <ASPEP_RXframeProcess+0x15e>
 8000a8a:	429d      	cmp	r5, r3
 8000a8c:	d89f      	bhi.n	80009ce <ASPEP_RXframeProcess+0x15e>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000a8e:	4577      	cmp	r7, lr
 8000a90:	d89d      	bhi.n	80009ce <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000a92:	45c1      	cmp	r9, r8
 8000a94:	d89b      	bhi.n	80009ce <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000a96:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
 8000a9a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000a9e:	4290      	cmp	r0, r2
 8000aa0:	d195      	bne.n	80009ce <ASPEP_RXframeProcess+0x15e>
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000aa2:	1c4a      	adds	r2, r1, #1
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000aa4:	3301      	adds	r3, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000aa6:	b2d2      	uxtb	r2, r2
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000aa8:	b2db      	uxtb	r3, r3
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000aaa:	0152      	lsls	r2, r2, #5
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8000aac:	01b6      	lsls	r6, r6, #6
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000aae:	015b      	lsls	r3, r3, #5
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000ab0:	2101      	movs	r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000ab2:	81a2      	strh	r2, [r4, #12]
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8000ab4:	81e6      	strh	r6, [r4, #14]
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000ab6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000aba:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000abe:	e786      	b.n	80009ce <ASPEP_RXframeProcess+0x15e>
        ASPEP_sendPing (pHandle,ASPEP_PING_RESET,packetNumber);
 8000ac0:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	f7ff fd81 	bl	80005cc <ASPEP_sendPing>
  uint8_t* result = NULL;
 8000aca:	4635      	mov	r5, r6
 8000acc:	e6e3      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8000ace:	7f42      	ldrb	r2, [r0, #29]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	f7ff fd7b 	bl	80005cc <ASPEP_sendPing>
 8000ad6:	e6de      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	f63f af75 	bhi.w	80009c8 <ASPEP_RXframeProcess+0x158>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000ade:	45b4      	cmp	ip, r6
 8000ae0:	f63f af72 	bhi.w	80009c8 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000ae4:	45be      	cmp	lr, r7
 8000ae6:	f63f af6f 	bhi.w	80009c8 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000aea:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8000aee:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000af2:	4293      	cmp	r3, r2
 8000af4:	f47f af68 	bne.w	80009c8 <ASPEP_RXframeProcess+0x158>
 8000af8:	e769      	b.n	80009ce <ASPEP_RXframeProcess+0x15e>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d898      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x1c0>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000afe:	45e6      	cmp	lr, ip
 8000b00:	d896      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000b02:	45b8      	cmp	r8, r7
 8000b04:	d894      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000b06:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
 8000b0a:	f3c2 1202 	ubfx	r2, r2, #4, #3
          pHandle->ASPEP_State = ASPEP_IDLE;
 8000b0e:	1aab      	subs	r3, r5, r2
 8000b10:	425d      	negs	r5, r3
 8000b12:	415d      	adcs	r5, r3
 8000b14:	e78c      	b.n	8000a30 <ASPEP_RXframeProcess+0x1c0>
 8000b16:	bf00      	nop
 8000b18:	0800713c 	.word	0x0800713c
 8000b1c:	0800712c 	.word	0x0800712c

08000b20 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT (ASPEP_Handle_t *pHandle)
{
 8000b20:	b510      	push	{r4, lr}
/* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.*/
/* This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_RXframeProcess*/
/* If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.*/
  switch (pHandle->ASPEP_TL_State) {
 8000b22:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b26:	4604      	mov	r4, r0
  switch (pHandle->ASPEP_TL_State) {
 8000b28:	b13b      	cbz	r3, 8000b3a <ASPEP_HWDataReceivedIT+0x1a>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d104      	bne.n	8000b38 <ASPEP_HWDataReceivedIT+0x18>
    {
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
    }
    break;
  case WAITING_PAYLOAD:
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    // Payload received,
    pHandle->NewPacketAvailable = true;
 8000b34:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    /*The receiver is not reconfigure right now on purpose to avoid race condition when the packet will be processed in ASPEP_RXframeProcess */
    break;
  }
}
 8000b38:	bd10      	pop	{r4, pc}
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8000b3a:	69c2      	ldr	r2, [r0, #28]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000b3c:	491f      	ldr	r1, [pc, #124]	; (8000bbc <ASPEP_HWDataReceivedIT+0x9c>)
 8000b3e:	b2d3      	uxtb	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000b40:	5ccb      	ldrb	r3, [r1, r3]
 8000b42:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000b46:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000b48:	5ccb      	ldrb	r3, [r1, r3]
 8000b4a:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000b4e:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 24) & 0xff) ];
 8000b50:	5ccb      	ldrb	r3, [r1, r3]
 8000b52:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8000b56:	5ccb      	ldrb	r3, [r1, r3]
 8000b58:	b963      	cbnz	r3, 8000b74 <ASPEP_HWDataReceivedIT+0x54>
       pHandle->rxPacketType = (ASPEP_packetType_def) (pHandle->rxHeader[0] & ID_MASK);
 8000b5a:	7f03      	ldrb	r3, [r0, #28]
 8000b5c:	f003 030f 	and.w	r3, r3, #15
 8000b60:	2b06      	cmp	r3, #6
 8000b62:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
       switch (pHandle->rxPacketType) {
 8000b66:	d809      	bhi.n	8000b7c <ASPEP_HWDataReceivedIT+0x5c>
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d81e      	bhi.n	8000baa <ASPEP_HWDataReceivedIT+0x8a>
         pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000b72:	bd10      	pop	{r4, pc}
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000b74:	2304      	movs	r3, #4
 8000b76:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000b7a:	bd10      	pop	{r4, pc}
 8000b7c:	2b09      	cmp	r3, #9
 8000b7e:	d1f5      	bne.n	8000b6c <ASPEP_HWDataReceivedIT+0x4c>
         pHandle->rxLength = (*((uint32_t *)pHandle->rxHeader) & 0x0001FFF0) >> 4;
 8000b80:	f3c2 120c 	ubfx	r2, r2, #4, #13
 8000b84:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
         if (pHandle->rxLength == 0) /* data packet with length 0 is a valid packet*/
 8000b88:	b17a      	cbz	r2, 8000baa <ASPEP_HWDataReceivedIT+0x8a>
         else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000b8a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d30f      	bcc.n	8000bb2 <ASPEP_HWDataReceivedIT+0x92>
           pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer , pHandle->rxLength+ASPEP_DATACRC_SIZE*pHandle->Capabilities.DATA_CRC); /* need to read + 2 bytes CRC*/
 8000b92:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
 8000b96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b98:	69a1      	ldr	r1, [r4, #24]
 8000b9a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8000b9e:	6960      	ldr	r0, [r4, #20]
 8000ba0:	4798      	blx	r3
           pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000ba8:	bd10      	pop	{r4, pc}
         pHandle->NewPacketAvailable = true;
 8000baa:	2301      	movs	r3, #1
 8000bac:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000bb0:	bd10      	pop	{r4, pc}
           pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bb8:	bd10      	pop	{r4, pc}
 8000bba:	bf00      	nop
 8000bbc:	0800713c 	.word	0x0800713c

08000bc0 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset (ASPEP_Handle_t *pHandle)
{ /* We must reset the RX state machine to be sure to not be in Waiting packet state */
 8000bc0:	4601      	mov	r1, r0
  /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
  /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
  pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000bc8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000bca:	6940      	ldr	r0, [r0, #20]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	311c      	adds	r1, #28
 8000bd0:	4718      	bx	r3
 8000bd2:	bf00      	nop

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	2300      	movs	r3, #0
{
 8000bd8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000bde:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000be6:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4923      	ldr	r1, [pc, #140]	; (8000c78 <SystemClock_Config+0xa4>)
 8000bec:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bee:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf0:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000bf8:	6408      	str	r0, [r1, #64]	; 0x40
 8000bfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bfc:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000c00:	9100      	str	r1, [sp, #0]
 8000c02:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	6813      	ldr	r3, [r2, #0]
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c14:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c16:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c1c:	2319      	movs	r3, #25
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1e:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c20:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c24:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c28:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c2c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c30:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c32:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c36:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3a:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c3c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f003 fa45 	bl	80040cc <HAL_RCC_OscConfig>
 8000c42:	b108      	cbz	r0, 8000c48 <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c52:	240f      	movs	r4, #15
 8000c54:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c5a:	a802      	add	r0, sp, #8
 8000c5c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c62:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c64:	f003 fc48 	bl	80044f8 <HAL_RCC_ClockConfig>
 8000c68:	b108      	cbz	r0, 8000c6e <SystemClock_Config+0x9a>
 8000c6a:	b672      	cpsid	i
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <SystemClock_Config+0x98>
  HAL_RCC_EnableCSS();
 8000c6e:	f003 fc09 	bl	8004484 <HAL_RCC_EnableCSS>
}
 8000c72:	b015      	add	sp, #84	; 0x54
 8000c74:	bd30      	pop	{r4, r5, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40007000 	.word	0x40007000

08000c80 <main>:
{
 8000c80:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	2500      	movs	r5, #0
{
 8000c86:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8000c88:	f002 fd74 	bl	8003774 <HAL_Init>
  SystemClock_Config();
 8000c8c:	f7ff ffa2 	bl	8000bd4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c94:	4ca0      	ldr	r4, [pc, #640]	; (8000f18 <main+0x298>)
 8000c96:	9501      	str	r5, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	9518      	str	r5, [sp, #96]	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	489f      	ldr	r0, [pc, #636]	; (8000f1c <main+0x29c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9e:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8000f20 <main+0x2a0>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8000ca8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	9502      	str	r5, [sp, #8]
 8000cb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6323      	str	r3, [r4, #48]	; 0x30
 8000cbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	9302      	str	r3, [sp, #8]
 8000cc4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc6:	9503      	str	r5, [sp, #12]
 8000cc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cce:	6323      	str	r3, [r4, #48]	; 0x30
 8000cd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	9303      	str	r3, [sp, #12]
 8000cd8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	9504      	str	r5, [sp, #16]
 8000cdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ce4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cee:	9505      	str	r5, [sp, #20]
 8000cf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8000cf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d00:	4b88      	ldr	r3, [pc, #544]	; (8000f24 <main+0x2a4>)
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d02:	9905      	ldr	r1, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d04:	2204      	movs	r2, #4
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d06:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d08:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f003 f8a6 	bl	8003e5c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d10:	9500      	str	r5, [sp, #0]
 8000d12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d18:	6323      	str	r3, [r4, #48]	; 0x30
 8000d1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000d1c:	4c82      	ldr	r4, [pc, #520]	; (8000f28 <main+0x2a8>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d22:	9300      	str	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d24:	4629      	mov	r1, r5
 8000d26:	2220      	movs	r2, #32
 8000d28:	a816      	add	r0, sp, #88	; 0x58
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d2a:	9b00      	ldr	r3, [sp, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d2c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d30:	f006 f9e8 	bl	8007104 <memset>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d34:	f04f 0900 	mov.w	r9, #0
  hadc1.Instance = ADC1;
 8000d38:	4b7c      	ldr	r3, [pc, #496]	; (8000f2c <main+0x2ac>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	950e      	str	r5, [sp, #56]	; 0x38
  hadc1.Init.ScanConvMode = ENABLE;
 8000d3c:	f04f 0a01 	mov.w	sl, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	e9c4 6501 	strd	r6, r5, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d44:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
  hadc1.Instance = ADC1;
 8000d48:	6023      	str	r3, [r4, #0]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4a:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4c:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d50:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d54:	9511      	str	r5, [sp, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 2;
 8000d56:	2302      	movs	r3, #2
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d58:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5c:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d60:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 8000d62:	f8c4 a010 	str.w	sl, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d66:	f8c4 a014 	str.w	sl, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d6a:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d6c:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6e:	f002 fd2d 	bl	80037cc <HAL_ADC_Init>
 8000d72:	b108      	cbz	r0, 8000d78 <main+0xf8>
 8000d74:	b672      	cpsid	i
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <main+0xf6>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000d78:	2703      	movs	r7, #3
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d7a:	e9cd a017 	strd	sl, r0, [sp, #92]	; 0x5c
  sConfigInjected.InjectedOffset = 0;
 8000d7e:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d86:	a916      	add	r1, sp, #88	; 0x58
 8000d88:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000d8a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8000d8e:	f8ad a06c 	strh.w	sl, [sp, #108]	; 0x6c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000d92:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d94:	971a      	str	r7, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d96:	f002 fe75 	bl	8003a84 <HAL_ADCEx_InjectedConfigChannel>
 8000d9a:	b108      	cbz	r0, 8000da0 <main+0x120>
 8000d9c:	b672      	cpsid	i
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <main+0x11e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000da0:	2204      	movs	r2, #4
 8000da2:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000da4:	a916      	add	r1, sp, #88	; 0x58
 8000da6:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000da8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dac:	f002 fe6a 	bl	8003a84 <HAL_ADCEx_InjectedConfigChannel>
 8000db0:	b108      	cbz	r0, 8000db6 <main+0x136>
 8000db2:	b672      	cpsid	i
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <main+0x134>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000db6:	2206      	movs	r2, #6
 8000db8:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dba:	a916      	add	r1, sp, #88	; 0x58
 8000dbc:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000dbe:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dc2:	f002 fe5f 	bl	8003a84 <HAL_ADCEx_InjectedConfigChannel>
 8000dc6:	b108      	cbz	r0, 8000dcc <main+0x14c>
 8000dc8:	b672      	cpsid	i
  while (1)
 8000dca:	e7fe      	b.n	8000dca <main+0x14a>
  sConfig.Channel = ADC_CHANNEL_8;
 8000dcc:	2208      	movs	r2, #8
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd4:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_8;
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dda:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_8;
 8000ddc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	f002 fda2 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000de4:	b108      	cbz	r0, 8000dea <main+0x16a>
 8000de6:	b672      	cpsid	i
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <main+0x168>
  sConfig.Offset = 0;
 8000dea:	9011      	str	r0, [sp, #68]	; 0x44
  sConfig.Channel = ADC_CHANNEL_9;
 8000dec:	2209      	movs	r2, #9
 8000dee:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df0:	4620      	mov	r0, r4
 8000df2:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 8000df4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	f002 fd96 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000dfc:	4683      	mov	fp, r0
 8000dfe:	b108      	cbz	r0, 8000e04 <main+0x184>
 8000e00:	b672      	cpsid	i
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <main+0x182>
  hadc2.Instance = ADC2;
 8000e04:	4c4a      	ldr	r4, [pc, #296]	; (8000f30 <main+0x2b0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e06:	4601      	mov	r1, r0
 8000e08:	2220      	movs	r2, #32
 8000e0a:	a816      	add	r0, sp, #88	; 0x58
 8000e0c:	f006 f97a 	bl	8007104 <memset>
  hadc2.Instance = ADC2;
 8000e10:	4b48      	ldr	r3, [pc, #288]	; (8000f34 <main+0x2b4>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e12:	6066      	str	r6, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e14:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e18:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	e9cd bb0e 	strd	fp, fp, [sp, #56]	; 0x38
 8000e1e:	e9cd bb10 	strd	fp, fp, [sp, #64]	; 0x40
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e22:	60e5      	str	r5, [r4, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e24:	f8c4 b008 	str.w	fp, [r4, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000e28:	f8c4 a010 	str.w	sl, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e2c:	f884 b018 	strb.w	fp, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e30:	f884 b020 	strb.w	fp, [r4, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e34:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
  hadc2.Init.NbrOfConversion = 1;
 8000e38:	f8c4 a01c 	str.w	sl, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3c:	f8c4 a014 	str.w	sl, [r4, #20]
  hadc2.Instance = ADC2;
 8000e40:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e42:	f002 fcc3 	bl	80037cc <HAL_ADC_Init>
 8000e46:	b108      	cbz	r0, 8000e4c <main+0x1cc>
 8000e48:	b672      	cpsid	i
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <main+0x1ca>
  sConfigInjected.InjectedOffset = 0;
 8000e4c:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e56:	a916      	add	r1, sp, #88	; 0x58
 8000e58:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000e5a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e5e:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e60:	971a      	str	r7, [sp, #104]	; 0x68
  sConfigInjected.InjectedRank = 1;
 8000e62:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8000e66:	f8ad a06c 	strh.w	sl, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e6a:	f002 fe0b 	bl	8003a84 <HAL_ADCEx_InjectedConfigChannel>
 8000e6e:	b108      	cbz	r0, 8000e74 <main+0x1f4>
 8000e70:	b672      	cpsid	i
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <main+0x1f2>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000e74:	2204      	movs	r2, #4
 8000e76:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e78:	a916      	add	r1, sp, #88	; 0x58
 8000e7a:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000e7c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e80:	f002 fe00 	bl	8003a84 <HAL_ADCEx_InjectedConfigChannel>
 8000e84:	b108      	cbz	r0, 8000e8a <main+0x20a>
 8000e86:	b672      	cpsid	i
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <main+0x208>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e8a:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	2403      	movs	r4, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e90:	a916      	add	r1, sp, #88	; 0x58
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000e92:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e96:	f002 fdf5 	bl	8003a84 <HAL_ADCEx_InjectedConfigChannel>
 8000e9a:	b108      	cbz	r0, 8000ea0 <main+0x220>
 8000e9c:	b672      	cpsid	i
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <main+0x21e>
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ea8:	4821      	ldr	r0, [pc, #132]	; (8000f30 <main+0x2b0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eaa:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000eac:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eae:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000eb0:	f002 fd3a 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	b108      	cbz	r0, 8000ebc <main+0x23c>
 8000eb8:	b672      	cpsid	i
  while (1)
 8000eba:	e7fe      	b.n	8000eba <main+0x23a>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ebc:	2620      	movs	r6, #32
  htim1.Instance = TIM1;
 8000ebe:	4d1e      	ldr	r5, [pc, #120]	; (8000f38 <main+0x2b8>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ec0:	9008      	str	r0, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec2:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8000ec6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8000eca:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ece:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8000ed2:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed6:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed8:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eda:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000edc:	4601      	mov	r1, r0
 8000ede:	4632      	mov	r2, r6
 8000ee0:	a816      	add	r0, sp, #88	; 0x58
 8000ee2:	f006 f90f 	bl	8007104 <memset>
  htim1.Instance = TIM1;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <main+0x2bc>)
 8000ee8:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000eea:	f241 4082 	movw	r0, #5250	; 0x1482
 8000eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef2:	e9c5 0303 	strd	r0, r3, [r5, #12]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000ef6:	2301      	movs	r3, #1
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ef8:	4628      	mov	r0, r5
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000efa:	e9c5 4601 	strd	r4, r6, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000f00:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f02:	f003 fbbd 	bl	8004680 <HAL_TIM_Base_Init>
 8000f06:	b108      	cbz	r0, 8000f0c <main+0x28c>
 8000f08:	b672      	cpsid	i
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <main+0x28a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f003 fc35 	bl	800477c <HAL_TIM_PWM_Init>
 8000f12:	b1a8      	cbz	r0, 8000f40 <main+0x2c0>
 8000f14:	b672      	cpsid	i
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <main+0x296>
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	0f000001 	.word	0x0f000001
 8000f24:	10210000 	.word	0x10210000
 8000f28:	20000560 	.word	0x20000560
 8000f2c:	40012000 	.word	0x40012000
 8000f30:	200005a8 	.word	0x200005a8
 8000f34:	40012100 	.word	0x40012100
 8000f38:	200006b0 	.word	0x200006b0
 8000f3c:	40010000 	.word	0x40010000
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f40:	2206      	movs	r2, #6
 8000f42:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f44:	a908      	add	r1, sp, #32
 8000f46:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f48:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f4c:	f003 fe3e 	bl	8004bcc <HAL_TIM_SlaveConfigSynchro>
 8000f50:	b108      	cbz	r0, 8000f56 <main+0x2d6>
 8000f52:	b672      	cpsid	i
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <main+0x2d4>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f56:	a906      	add	r1, sp, #24
 8000f58:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2600      	movs	r6, #0
 8000f5c:	2700      	movs	r7, #0
 8000f5e:	e9cd 6706 	strd	r6, r7, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f62:	f003 ffe5 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8000f66:	4602      	mov	r2, r0
 8000f68:	b108      	cbz	r0, 8000f6e <main+0x2ee>
 8000f6a:	b672      	cpsid	i
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0x2ec>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f6e:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f70:	f04f 0860 	mov.w	r8, #96	; 0x60
 8000f74:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f78:	a90e      	add	r1, sp, #56	; 0x38
 8000f7a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7c:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8000f80:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8000f84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f88:	f003 fc74 	bl	8004874 <HAL_TIM_PWM_ConfigChannel>
 8000f8c:	b108      	cbz	r0, 8000f92 <main+0x312>
 8000f8e:	b672      	cpsid	i
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <main+0x310>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f92:	2204      	movs	r2, #4
 8000f94:	a90e      	add	r1, sp, #56	; 0x38
 8000f96:	4628      	mov	r0, r5
 8000f98:	f003 fc6c 	bl	8004874 <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	b108      	cbz	r0, 8000fa2 <main+0x322>
 8000f9e:	b672      	cpsid	i
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <main+0x320>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	a90e      	add	r1, sp, #56	; 0x38
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f003 fc64 	bl	8004874 <HAL_TIM_PWM_ConfigChannel>
 8000fac:	b108      	cbz	r0, 8000fb2 <main+0x332>
 8000fae:	b672      	cpsid	i
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <main+0x330>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	a90e      	add	r1, sp, #56	; 0x38
 8000fb6:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000fb8:	f04f 0870 	mov.w	r8, #112	; 0x70
 8000fbc:	f241 4981 	movw	r9, #5249	; 0x1481
 8000fc0:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fc4:	f003 fc56 	bl	8004874 <HAL_TIM_PWM_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b108      	cbz	r0, 8000fd0 <main+0x350>
 8000fcc:	b672      	cpsid	i
  while (1)
 8000fce:	e7fe      	b.n	8000fce <main+0x34e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fd4:	931d      	str	r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fda:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fde:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe4:	2308      	movs	r3, #8
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe6:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fe8:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8000fec:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff0:	f003 ffde 	bl	8004fb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ff4:	b108      	cbz	r0, 8000ffa <main+0x37a>
 8000ff6:	b672      	cpsid	i
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <main+0x378>
  htim3.Instance = TIM3;
 8000ffa:	4c48      	ldr	r4, [pc, #288]	; (800111c <main+0x49c>)
  HAL_TIM_MspPostInit(&htim1);
 8000ffc:	4848      	ldr	r0, [pc, #288]	; (8001120 <main+0x4a0>)
 8000ffe:	f002 f94d 	bl	800329c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	2300      	movs	r3, #0
 8001004:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8001008:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800100c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8001010:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	e9cd 3308 	strd	r3, r3, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	61a3      	str	r3, [r4, #24]
  htim3.Instance = TIM3;
 8001020:	4b40      	ldr	r3, [pc, #256]	; (8001124 <main+0x4a4>)
 8001022:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001024:	4620      	mov	r0, r4
  htim3.Init.Period = M1_HALL_TIM_PERIOD;
 8001026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102a:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800102c:	f003 fb28 	bl	8004680 <HAL_TIM_Base_Init>
 8001030:	b108      	cbz	r0, 8001036 <main+0x3b6>
 8001032:	b672      	cpsid	i
  while (1)
 8001034:	e7fe      	b.n	8001034 <main+0x3b4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800103a:	a916      	add	r1, sp, #88	; 0x58
 800103c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001040:	f003 fd20 	bl	8004a84 <HAL_TIM_ConfigClockSource>
 8001044:	b108      	cbz	r0, 800104a <main+0x3ca>
 8001046:	b672      	cpsid	i
  while (1)
 8001048:	e7fe      	b.n	8001048 <main+0x3c8>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800104a:	2200      	movs	r2, #0
 800104c:	2300      	movs	r3, #0
 800104e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001052:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001054:	220b      	movs	r2, #11
 8001056:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001058:	4620      	mov	r0, r4
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800105a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800105e:	f003 ff0d 	bl	8004e7c <HAL_TIMEx_HallSensor_Init>
 8001062:	b108      	cbz	r0, 8001068 <main+0x3e8>
 8001064:	b672      	cpsid	i
  while (1)
 8001066:	e7fe      	b.n	8001066 <main+0x3e6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001068:	2300      	movs	r3, #0
 800106a:	2250      	movs	r2, #80	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106c:	a908      	add	r1, sp, #32
 800106e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001070:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001074:	f003 ff5c 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	b108      	cbz	r0, 8001080 <main+0x400>
 800107c:	b672      	cpsid	i
  while (1)
 800107e:	e7fe      	b.n	800107e <main+0x3fe>
  huart1.Instance = USART1;
 8001080:	4829      	ldr	r0, [pc, #164]	; (8001128 <main+0x4a8>)
 8001082:	4c2a      	ldr	r4, [pc, #168]	; (800112c <main+0x4ac>)
  huart1.Init.BaudRate = 115200;
 8001084:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001088:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 800108a:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800108e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001092:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001096:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800109a:	f003 ffb3 	bl	8005004 <HAL_UART_Init>
 800109e:	4604      	mov	r4, r0
 80010a0:	b108      	cbz	r0, 80010a6 <main+0x426>
 80010a2:	b672      	cpsid	i
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <main+0x424>
  MX_MotorControl_Init();
 80010a6:	f000 fe01 	bl	8001cac <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 80010aa:	4622      	mov	r2, r4
 80010ac:	2102      	movs	r1, #2
 80010ae:	2012      	movs	r0, #18
 80010b0:	f002 fdd2 	bl	8003c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010b4:	2012      	movs	r0, #18
 80010b6:	f002 fe0d 	bl	8003cd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010ba:	4622      	mov	r2, r4
 80010bc:	4621      	mov	r1, r4
 80010be:	2019      	movs	r0, #25
 80010c0:	f002 fdca 	bl	8003c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010c4:	2019      	movs	r0, #25
 80010c6:	f002 fe05 	bl	8003cd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 80010ca:	2104      	movs	r1, #4
 80010cc:	2201      	movs	r2, #1
 80010ce:	2018      	movs	r0, #24
 80010d0:	f002 fdc2 	bl	8003c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80010d4:	2018      	movs	r0, #24
 80010d6:	f002 fdfd 	bl	8003cd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80010da:	4622      	mov	r2, r4
 80010dc:	2103      	movs	r1, #3
 80010de:	201d      	movs	r0, #29
 80010e0:	f002 fdba 	bl	8003c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010e4:	201d      	movs	r0, #29
 80010e6:	f002 fdf5 	bl	8003cd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 80010ea:	2103      	movs	r1, #3
 80010ec:	2201      	movs	r2, #1
 80010ee:	2025      	movs	r0, #37	; 0x25
 80010f0:	f002 fdb2 	bl	8003c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010f4:	2025      	movs	r0, #37	; 0x25
 80010f6:	f002 fded 	bl	8003cd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 80010fa:	4622      	mov	r2, r4
 80010fc:	2103      	movs	r1, #3
 80010fe:	2008      	movs	r0, #8
 8001100:	f002 fdaa 	bl	8003c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001104:	2008      	movs	r0, #8
 8001106:	f002 fde5 	bl	8003cd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800110a:	203a      	movs	r0, #58	; 0x3a
 800110c:	4622      	mov	r2, r4
 800110e:	4621      	mov	r1, r4
 8001110:	f002 fda2 	bl	8003c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001114:	203a      	movs	r0, #58	; 0x3a
 8001116:	f002 fddd 	bl	8003cd4 <HAL_NVIC_EnableIRQ>
  while (1)
 800111a:	e7fe      	b.n	800111a <main+0x49a>
 800111c:	200006f0 	.word	0x200006f0
 8001120:	200006b0 	.word	0x200006b0
 8001124:	40000400 	.word	0x40000400
 8001128:	20000730 	.word	0x20000730
 800112c:	40011000 	.word	0x40011000

08001130 <Error_Handler>:
 8001130:	b672      	cpsid	i
  while (1)
 8001132:	e7fe      	b.n	8001132 <Error_Handler+0x2>

08001134 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001134:	4b01      	ldr	r3, [pc, #4]	; (800113c <MC_StartMotor1+0x8>)
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f000 b83a 	b.w	80011b0 <MCI_StartMotor>
 800113c:	20001a70 	.word	0x20001a70

08001140 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001140:	4b01      	ldr	r3, [pc, #4]	; (8001148 <MC_StopMotor1+0x8>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f000 b83e 	b.w	80011c4 <MCI_StopMotor>
 8001148:	20001a70 	.word	0x20001a70

0800114c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 800114c:	4b01      	ldr	r3, [pc, #4]	; (8001154 <MC_GetSTMStateMotor1+0x8>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	f000 b880 	b.w	8001254 <MCI_GetSTMState>
 8001154:	20001a70 	.word	0x20001a70

08001158 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001158:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 800115c:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8001160:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001162:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8001166:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 800116a:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800116e:	f880 c018 	strb.w	ip, [r0, #24]
}
 8001172:	4770      	bx	lr

08001174 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001174:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001178:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800117c:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001180:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8001182:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001184:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8001186:	4770      	bx	lr

08001188 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001188:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800118c:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800118e:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8001192:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8001194:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001196:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 800119c:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800119e:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011a0:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80011a2:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 80011a4:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011a8:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80011aa:	b002      	add	sp, #8
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80011b0:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80011b2:	2103      	movs	r1, #3
{
 80011b4:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80011b6:	6800      	ldr	r0, [r0, #0]
 80011b8:	f005 feea 	bl	8006f90 <STM_NextState>

  if ( RetVal == true )
 80011bc:	b108      	cbz	r0, 80011c2 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011be:	2301      	movs	r3, #1
 80011c0:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80011c2:	bd10      	pop	{r4, pc}

080011c4 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80011c4:	6800      	ldr	r0, [r0, #0]
 80011c6:	2107      	movs	r1, #7
 80011c8:	f005 bee2 	b.w	8006f90 <STM_NextState>

080011cc <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80011cc:	6800      	ldr	r0, [r0, #0]
 80011ce:	f005 bf55 	b.w	800707c <STM_FaultAcknowledged>
 80011d2:	bf00      	nop

080011d4 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80011d4:	6800      	ldr	r0, [r0, #0]
 80011d6:	2101      	movs	r1, #1
 80011d8:	f005 beda 	b.w	8006f90 <STM_NextState>

080011dc <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80011dc:	b178      	cbz	r0, 80011fe <MCI_ExecBufferedCommands+0x22>
{
 80011de:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80011e0:	7e03      	ldrb	r3, [r0, #24]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	4604      	mov	r4, r0
 80011e6:	d000      	beq.n	80011ea <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80011e8:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80011ea:	7b01      	ldrb	r1, [r0, #12]
 80011ec:	2902      	cmp	r1, #2
 80011ee:	d020      	beq.n	8001232 <MCI_ExecBufferedCommands+0x56>
 80011f0:	2903      	cmp	r1, #3
 80011f2:	d005      	beq.n	8001200 <MCI_ExecBufferedCommands+0x24>
 80011f4:	2901      	cmp	r1, #1
 80011f6:	d00c      	beq.n	8001212 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80011f8:	2303      	movs	r3, #3
 80011fa:	7623      	strb	r3, [r4, #24]
}
 80011fc:	bd10      	pop	{r4, pc}
 80011fe:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001200:	6882      	ldr	r2, [r0, #8]
 8001202:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001206:	f8d0 3012 	ldr.w	r3, [r0, #18]
 800120a:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800120c:	2302      	movs	r3, #2
 800120e:	7623      	strb	r3, [r4, #24]
}
 8001210:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001212:	6883      	ldr	r3, [r0, #8]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 800121a:	6840      	ldr	r0, [r0, #4]
 800121c:	f005 fdf4 	bl	8006e08 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001220:	8ae2      	ldrh	r2, [r4, #22]
 8001222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001226:	6860      	ldr	r0, [r4, #4]
 8001228:	f005 fdf2 	bl	8006e10 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800122c:	2800      	cmp	r0, #0
 800122e:	d0e3      	beq.n	80011f8 <MCI_ExecBufferedCommands+0x1c>
 8001230:	e7ec      	b.n	800120c <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001232:	6883      	ldr	r3, [r0, #8]
 8001234:	2100      	movs	r1, #0
 8001236:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800123a:	6840      	ldr	r0, [r0, #4]
 800123c:	f005 fde4 	bl	8006e08 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001240:	8ae2      	ldrh	r2, [r4, #22]
 8001242:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001246:	6860      	ldr	r0, [r4, #4]
 8001248:	f005 fde2 	bl	8006e10 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800124c:	2800      	cmp	r0, #0
 800124e:	d0d3      	beq.n	80011f8 <MCI_ExecBufferedCommands+0x1c>
 8001250:	e7dc      	b.n	800120c <MCI_ExecBufferedCommands+0x30>
 8001252:	bf00      	nop

08001254 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8001254:	6800      	ldr	r0, [r0, #0]
 8001256:	f005 bf0f 	b.w	8007078 <STM_GetState>
 800125a:	bf00      	nop

0800125c <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 800125c:	7e40      	ldrb	r0, [r0, #25]
 800125e:	4770      	bx	lr

08001260 <MCI_GetLastRampFinalSpeed>:
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
 {
   return  pHandle->hFinalSpeed;
 }
 8001260:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop

08001268 <MCI_GetLastRampFinalTorque>:
  * @retval int16_t last ramp final torque sent by the user expressed in digit
  */
__weak int16_t MCI_GetLastRampFinalTorque( MCI_Handle_t * pHandle )
{
    return pHandle->hFinalTorque;
}
 8001268:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <MCI_GetLastRampFinalDuration>:
  * @retval uint16_t last ramp final torque sent by the user expressed in digit
  */
__weak uint16_t MCI_GetLastRampFinalDuration( MCI_Handle_t * pHandle )
{
    return pHandle->hDurationms;
}
 8001270:	8ac0      	ldrh	r0, [r0, #22]
 8001272:	4770      	bx	lr

08001274 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8001274:	6840      	ldr	r0, [r0, #4]
 8001276:	f005 be13 	b.w	8006ea0 <STC_StopRamp>
 800127a:	bf00      	nop

0800127c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 800127c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800127e:	6840      	ldr	r0, [r0, #4]
 8001280:	f005 fda8 	bl	8006dd4 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8001284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8001288:	f005 bd46 	b.w	8006d18 <SPD_GetAvrgMecSpeedUnit>

0800128c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 800128c:	6840      	ldr	r0, [r0, #4]
 800128e:	f005 bdab 	b.w	8006de8 <STC_GetMecSpeedRefUnit>
 8001292:	bf00      	nop

08001294 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8001294:	6882      	ldr	r2, [r0, #8]
 8001296:	6810      	ldr	r0, [r2, #0]
 8001298:	2300      	movs	r3, #0
 800129a:	b282      	uxth	r2, r0
 800129c:	f362 030f 	bfi	r3, r2, #0, #16
 80012a0:	0c00      	lsrs	r0, r0, #16
 80012a2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012a6:	b082      	sub	sp, #8
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	b002      	add	sp, #8
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop

080012b0 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 80012b0:	6882      	ldr	r2, [r0, #8]
 80012b2:	6850      	ldr	r0, [r2, #4]
 80012b4:	2300      	movs	r3, #0
 80012b6:	b282      	uxth	r2, r0
 80012b8:	f362 030f 	bfi	r3, r2, #0, #16
 80012bc:	0c00      	lsrs	r0, r0, #16
 80012be:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012c2:	b082      	sub	sp, #8
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	b002      	add	sp, #8
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80012cc:	6882      	ldr	r2, [r0, #8]
 80012ce:	68d0      	ldr	r0, [r2, #12]
 80012d0:	2300      	movs	r3, #0
 80012d2:	b282      	uxth	r2, r0
 80012d4:	f362 030f 	bfi	r3, r2, #0, #16
 80012d8:	0c00      	lsrs	r0, r0, #16
 80012da:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012de:	b082      	sub	sp, #8
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	b002      	add	sp, #8
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 80012e8:	6882      	ldr	r2, [r0, #8]
 80012ea:	6910      	ldr	r0, [r2, #16]
 80012ec:	2300      	movs	r3, #0
 80012ee:	b282      	uxth	r2, r0
 80012f0:	f362 030f 	bfi	r3, r2, #0, #16
 80012f4:	0c00      	lsrs	r0, r0, #16
 80012f6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012fa:	b082      	sub	sp, #8
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	b002      	add	sp, #8
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8001304:	6882      	ldr	r2, [r0, #8]
 8001306:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800130a:	2300      	movs	r3, #0
 800130c:	b282      	uxth	r2, r0
 800130e:	f362 030f 	bfi	r3, r2, #0, #16
 8001312:	0c00      	lsrs	r0, r0, #16
 8001314:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001318:	b082      	sub	sp, #8
}
 800131a:	4618      	mov	r0, r3
 800131c:	b002      	add	sp, #8
 800131e:	4770      	bx	lr

08001320 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001320:	6882      	ldr	r2, [r0, #8]
 8001322:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001326:	2300      	movs	r3, #0
 8001328:	b282      	uxth	r2, r0
 800132a:	f362 030f 	bfi	r3, r2, #0, #16
 800132e:	0c00      	lsrs	r0, r0, #16
 8001330:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001334:	b082      	sub	sp, #8
}
 8001336:	4618      	mov	r0, r3
 8001338:	b002      	add	sp, #8
 800133a:	4770      	bx	lr

0800133c <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 800133c:	6883      	ldr	r3, [r0, #8]
}
 800133e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001342:	4770      	bx	lr

08001344 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001344:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001346:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 800134a:	f005 fde3 	bl	8006f14 <STC_GetDefaultIqdref>
 800134e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001352:	8220      	strh	r0, [r4, #16]
 8001354:	8263      	strh	r3, [r4, #18]
}
 8001356:	bd10      	pop	{r4, pc}

08001358 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001358:	f644 11e6 	movw	r1, #18918	; 0x49e6
 800135c:	b203      	sxth	r3, r0
{
 800135e:	f3c0 420f 	ubfx	r2, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8001362:	fb13 f001 	smulbb	r0, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001366:	fb12 f201 	smulbb	r2, r2, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 800136a:	4240      	negs	r0, r0
 800136c:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001370:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001374:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8001376:	da05      	bge.n	8001384 <MCM_Clarke+0x2c>
 8001378:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 800137a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 800137e:	da0c      	bge.n	800139a <MCM_Clarke+0x42>
 8001380:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <MCM_Clarke+0x50>)
 8001382:	e001      	b.n	8001388 <MCM_Clarke+0x30>
 8001384:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8001388:	b29b      	uxth	r3, r3
 800138a:	2000      	movs	r0, #0
 800138c:	f363 000f 	bfi	r0, r3, #0, #16
 8001390:	b293      	uxth	r3, r2
 8001392:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001396:	b004      	add	sp, #16
 8001398:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MCM_Clarke+0x50>)
 800139c:	b20a      	sxth	r2, r1
 800139e:	4282      	cmp	r2, r0
 80013a0:	bfb8      	it	lt
 80013a2:	4602      	movlt	r2, r0
 80013a4:	e7f0      	b.n	8001388 <MCM_Clarke+0x30>
 80013a6:	bf00      	nop
 80013a8:	ffff8001 	.word	0xffff8001

080013ac <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 80013ac:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 80013b0:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80013b4:	f400 7140 	and.w	r1, r0, #768	; 0x300
 80013b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 80013bc:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80013be:	d028      	beq.n	8001412 <MCM_Trig_Functions+0x66>
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	461a      	mov	r2, r3
 80013c6:	d816      	bhi.n	80013f6 <MCM_Trig_Functions+0x4a>
 80013c8:	b361      	cbz	r1, 8001424 <MCM_Trig_Functions+0x78>
 80013ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80013ce:	d109      	bne.n	80013e4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013d0:	b2c0      	uxtb	r0, r0
 80013d2:	43c2      	mvns	r2, r0
 80013d4:	491a      	ldr	r1, [pc, #104]	; (8001440 <MCM_Trig_Functions+0x94>)
 80013d6:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80013d8:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013dc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013e0:	4252      	negs	r2, r2
 80013e2:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	2000      	movs	r0, #0
 80013e8:	f363 000f 	bfi	r0, r3, #0, #16
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f362 401f 	bfi	r0, r2, #16, #16
}
 80013f2:	b002      	add	sp, #8
 80013f4:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80013f6:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80013fa:	d1f3      	bne.n	80013e4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013fc:	4910      	ldr	r1, [pc, #64]	; (8001440 <MCM_Trig_Functions+0x94>)
 80013fe:	b2c0      	uxtb	r0, r0
 8001400:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001402:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001406:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001408:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800140a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800140e:	b21b      	sxth	r3, r3
      break;
 8001410:	e7e8      	b.n	80013e4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001412:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001414:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001416:	490a      	ldr	r1, [pc, #40]	; (8001440 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001418:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800141a:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800141e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8001422:	e7df      	b.n	80013e4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001424:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001426:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001428:	4905      	ldr	r1, [pc, #20]	; (8001440 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800142a:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800142c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001430:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001434:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001436:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001438:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800143a:	b21b      	sxth	r3, r3
      break;
 800143c:	e7d2      	b.n	80013e4 <MCM_Trig_Functions+0x38>
 800143e:	bf00      	nop
 8001440:	080072dc 	.word	0x080072dc

08001444 <MCM_Park>:
{
 8001444:	b530      	push	{r4, r5, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	4603      	mov	r3, r0
 800144a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800144c:	4608      	mov	r0, r1
 800144e:	141c      	asrs	r4, r3, #16
{
 8001450:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001452:	f7ff ffab 	bl	80013ac <MCM_Trig_Functions>
 8001456:	b22d      	sxth	r5, r5
 8001458:	fa0f fc80 	sxth.w	ip, r0
 800145c:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 800145e:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001462:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 8001466:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800146a:	da05      	bge.n	8001478 <MCM_Park+0x34>
 800146c:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 800146e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001472:	da22      	bge.n	80014ba <MCM_Park+0x76>
 8001474:	4914      	ldr	r1, [pc, #80]	; (80014c8 <MCM_Park+0x84>)
 8001476:	e001      	b.n	800147c <MCM_Park+0x38>
 8001478:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 800147c:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001480:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 8001484:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001488:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 800148c:	da04      	bge.n	8001498 <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 800148e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001492:	da0c      	bge.n	80014ae <MCM_Park+0x6a>
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MCM_Park+0x84>)
 8001496:	e001      	b.n	800149c <MCM_Park+0x58>
 8001498:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800149c:	b28a      	uxth	r2, r1
 800149e:	2000      	movs	r0, #0
 80014a0:	f362 000f 	bfi	r0, r2, #0, #16
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80014aa:	b005      	add	sp, #20
 80014ac:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MCM_Park+0x84>)
 80014b0:	b213      	sxth	r3, r2
 80014b2:	4283      	cmp	r3, r0
 80014b4:	bfb8      	it	lt
 80014b6:	4603      	movlt	r3, r0
 80014b8:	e7f0      	b.n	800149c <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 80014ba:	4903      	ldr	r1, [pc, #12]	; (80014c8 <MCM_Park+0x84>)
 80014bc:	b212      	sxth	r2, r2
 80014be:	4291      	cmp	r1, r2
 80014c0:	bfb8      	it	lt
 80014c2:	4611      	movlt	r1, r2
 80014c4:	e7da      	b.n	800147c <MCM_Park+0x38>
 80014c6:	bf00      	nop
 80014c8:	ffff8001 	.word	0xffff8001

080014cc <MCM_Rev_Park>:
{
 80014cc:	b530      	push	{r4, r5, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	4604      	mov	r4, r0
 80014d2:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80014d4:	4608      	mov	r0, r1
{
 80014d6:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80014d8:	f7ff ff68 	bl	80013ac <MCM_Trig_Functions>
 80014dc:	1424      	asrs	r4, r4, #16
 80014de:	1402      	asrs	r2, r0, #16
 80014e0:	b22d      	sxth	r5, r5
 80014e2:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 80014e4:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 80014e8:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 80014ec:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 80014f0:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 80014f4:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80014f8:	2000      	movs	r0, #0
 80014fa:	f363 000f 	bfi	r0, r3, #0, #16
 80014fe:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001502:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001506:	b005      	add	sp, #20
 8001508:	bd30      	pop	{r4, r5, pc}
 800150a:	bf00      	nop

0800150c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	dd32      	ble.n	8001576 <MCM_Sqrt+0x6a>
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 8001510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001514:	bfd4      	ite	le
 8001516:	2080      	movle	r0, #128	; 0x80
 8001518:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800151c:	fb93 f2f0 	sdiv	r2, r3, r0
 8001520:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8001522:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001526:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800152a:	d025      	beq.n	8001578 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800152c:	fb93 f2f1 	sdiv	r2, r3, r1
 8001530:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8001532:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001536:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800153a:	d01d      	beq.n	8001578 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800153c:	fb93 f2f0 	sdiv	r2, r3, r0
 8001540:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8001542:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001546:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800154a:	d015      	beq.n	8001578 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800154c:	fb93 f2f1 	sdiv	r2, r3, r1
 8001550:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8001552:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001556:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800155a:	d00d      	beq.n	8001578 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800155c:	fb93 f2f0 	sdiv	r2, r3, r0
 8001560:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8001562:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001566:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800156a:	d005      	beq.n	8001578 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800156c:	fb93 f0f1 	sdiv	r0, r3, r1
 8001570:	4408      	add	r0, r1
 8001572:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 8001574:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 8001576:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 800157c:	2226      	movs	r2, #38	; 0x26
{
 800157e:	b538      	push	{r3, r4, r5, lr}
 8001580:	fb00 f202 	mul.w	r2, r0, r2
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001586:	2400      	movs	r4, #0
 8001588:	509c      	str	r4, [r3, r2]
{
 800158a:	4605      	mov	r5, r0
 800158c:	f102 0108 	add.w	r1, r2, #8
 8001590:	1898      	adds	r0, r3, r2
 8001592:	3210      	adds	r2, #16
 8001594:	4419      	add	r1, r3
 8001596:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001598:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 800159a:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800159c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 80015a0:	604c      	str	r4, [r1, #4]
 80015a2:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 80015a4:	f8c3 4006 	str.w	r4, [r3, #6]
 80015a8:	f8c3 400a 	str.w	r4, [r3, #10]
 80015ac:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80015b0:	4621      	mov	r1, r4
 80015b2:	f004 fceb 	bl	8005f8c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <FOC_Clear+0x68>)
 80015b8:	4621      	mov	r1, r4
 80015ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80015be:	f004 fce5 	bl	8005f8c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <FOC_Clear+0x6c>)
 80015c4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80015c8:	f005 fc06 	bl	8006dd8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <FOC_Clear+0x70>)
 80015ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80015d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80015d6:	f000 bcc3 	b.w	8001f60 <PWMC_SwitchOffPWM>
 80015da:	bf00      	nop
 80015dc:	200007a8 	.word	0x200007a8
 80015e0:	20000448 	.word	0x20000448
 80015e4:	20000444 	.word	0x20000444
 80015e8:	2000044c 	.word	0x2000044c
 80015ec:	200007e0 	.word	0x200007e0

080015f0 <MCboot>:
{
 80015f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 80015f4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80016c4 <MCboot+0xd4>
  bMCBootCompleted = 0;
 80015f8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80016c8 <MCboot+0xd8>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80015fc:	4d33      	ldr	r5, [pc, #204]	; (80016cc <MCboot+0xdc>)
  HALL_Init (&HALL_M1);
 80015fe:	4f34      	ldr	r7, [pc, #208]	; (80016d0 <MCboot+0xe0>)
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001600:	4c34      	ldr	r4, [pc, #208]	; (80016d4 <MCboot+0xe4>)
{
 8001602:	b083      	sub	sp, #12
 8001604:	4606      	mov	r6, r0
  STM_Init(&STM[M1]);
 8001606:	4658      	mov	r0, fp
 8001608:	f005 fc9a 	bl	8006f40 <STM_Init>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800160c:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <MCboot+0xe8>)
  pCLM[M1] = &CircleLimitationM1;
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <MCboot+0xec>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001610:	4833      	ldr	r0, [pc, #204]	; (80016e0 <MCboot+0xf0>)
 8001612:	6010      	str	r0, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001614:	4a33      	ldr	r2, [pc, #204]	; (80016e4 <MCboot+0xf4>)
 8001616:	601a      	str	r2, [r3, #0]
  bMCBootCompleted = 0;
 8001618:	f04f 0800 	mov.w	r8, #0
 800161c:	f889 8000 	strb.w	r8, [r9]
  R3_2_Init(&PWM_Handle_M1);
 8001620:	f005 f82e 	bl	8006680 <R3_2_Init>
  ASPEP_start (&aspepOverUartA);
 8001624:	4830      	ldr	r0, [pc, #192]	; (80016e8 <MCboot+0xf8>)
 8001626:	f7fe ff7b 	bl	8000520 <ASPEP_start>
  startTimers();
 800162a:	f004 fd65 	bl	80060f8 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800162e:	4628      	mov	r0, r5
 8001630:	f004 fc98 	bl	8005f64 <PID_HandleInit>
  HALL_Init (&HALL_M1);
 8001634:	4638      	mov	r0, r7
 8001636:	f003 fdd3 	bl	80051e0 <HALL_Init>
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 800163a:	463a      	mov	r2, r7
 800163c:	4629      	mov	r1, r5
 800163e:	6820      	ldr	r0, [r4, #0]
  RVBS_Init(&BusVoltageSensor_M1);
 8001640:	4d2a      	ldr	r5, [pc, #168]	; (80016ec <MCboot+0xfc>)
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001642:	4f2b      	ldr	r7, [pc, #172]	; (80016f0 <MCboot+0x100>)
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001644:	f005 fbb0 	bl	8006da8 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8001648:	482a      	ldr	r0, [pc, #168]	; (80016f4 <MCboot+0x104>)
 800164a:	f004 fc8b 	bl	8005f64 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 800164e:	482a      	ldr	r0, [pc, #168]	; (80016f8 <MCboot+0x108>)
 8001650:	f004 fc88 	bl	8005f64 <PID_HandleInit>
  RVBS_Init(&BusVoltageSensor_M1);
 8001654:	4628      	mov	r0, r5
 8001656:	f005 fb05 	bl	8006c64 <RVBS_Init>
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MCboot+0x10c>)
  NTC_Init(&TempSensor_M1);
 800165c:	4828      	ldr	r0, [pc, #160]	; (8001700 <MCboot+0x110>)
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001664:	4d27      	ldr	r5, [pc, #156]	; (8001704 <MCboot+0x114>)
 8001666:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
  NTC_Init(&TempSensor_M1);
 800166a:	f004 fc37 	bl	8005edc <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <MCboot+0x118>)
 8001670:	4826      	ldr	r0, [pc, #152]	; (800170c <MCboot+0x11c>)
 8001672:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8001674:	f005 fb44 	bl	8006d00 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001678:	f04f 0a01 	mov.w	sl, #1
  FOC_Clear(M1);
 800167c:	4640      	mov	r0, r8
 800167e:	f7ff ff7d 	bl	800157c <FOC_Clear>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001682:	6820      	ldr	r0, [r4, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001684:	f885 a024 	strb.w	sl, [r5, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001688:	f005 fc44 	bl	8006f14 <STC_GetDefaultIqdref>
 800168c:	6128      	str	r0, [r5, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800168e:	6820      	ldr	r0, [r4, #0]
 8001690:	f005 fc40 	bl	8006f14 <STC_GetDefaultIqdref>
 8001694:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001698:	6822      	ldr	r2, [r4, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800169a:	82a8      	strh	r0, [r5, #20]
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800169c:	462b      	mov	r3, r5
 800169e:	4659      	mov	r1, fp
 80016a0:	4638      	mov	r0, r7
 80016a2:	f7ff fd59 	bl	8001158 <MCI_Init>
  MCI_ExecSpeedRamp(&Mci[M1],
 80016a6:	6820      	ldr	r0, [r4, #0]
 80016a8:	f005 fc30 	bl	8006f0c <STC_GetMecSpeedRefUnitDefault>
 80016ac:	4642      	mov	r2, r8
 80016ae:	4601      	mov	r1, r0
 80016b0:	4638      	mov	r0, r7
 80016b2:	f7ff fd5f 	bl	8001174 <MCI_ExecSpeedRamp>
  pMCIList[M1] = &Mci[M1];
 80016b6:	6037      	str	r7, [r6, #0]
  bMCBootCompleted = 1;
 80016b8:	f889 a000 	strb.w	sl, [r9]
}
 80016bc:	b003      	add	sp, #12
 80016be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016c2:	bf00      	nop
 80016c4:	200007a0 	.word	0x200007a0
 80016c8:	200007ce 	.word	0x200007ce
 80016cc:	200001fc 	.word	0x200001fc
 80016d0:	200000dc 	.word	0x200000dc
 80016d4:	2000044c 	.word	0x2000044c
 80016d8:	200007e0 	.word	0x200007e0
 80016dc:	200007d8 	.word	0x200007d8
 80016e0:	2000033c 	.word	0x2000033c
 80016e4:	20000028 	.word	0x20000028
 80016e8:	200004b4 	.word	0x200004b4
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000770 	.word	0x20000770
 80016f4:	200001d0 	.word	0x200001d0
 80016f8:	200001a4 	.word	0x200001a4
 80016fc:	20000440 	.word	0x20000440
 8001700:	20000418 	.word	0x20000418
 8001704:	200007a8 	.word	0x200007a8
 8001708:	200007dc 	.word	0x200007dc
 800170c:	200003cc 	.word	0x200003cc

08001710 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001714:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001716:	4c08      	ldr	r4, [pc, #32]	; (8001738 <FOC_CalcCurrRef+0x24>)
 8001718:	2326      	movs	r3, #38	; 0x26
 800171a:	fb03 4400 	mla	r4, r3, r0, r4
 800171e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001722:	b103      	cbz	r3, 8001726 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001724:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <FOC_CalcCurrRef+0x28>)
 8001728:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800172c:	f005 fbbc 	bl	8006ea8 <STC_CalcTorqueReference>
 8001730:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001732:	8220      	strh	r0, [r4, #16]
}
 8001734:	bd10      	pop	{r4, pc}
 8001736:	bf00      	nop
 8001738:	200007a8 	.word	0x200007a8
 800173c:	2000044c 	.word	0x2000044c

08001740 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001740:	4b01      	ldr	r3, [pc, #4]	; (8001748 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001742:	8018      	strh	r0, [r3, #0]
}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200007d0 	.word	0x200007d0

0800174c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800174e:	8818      	ldrh	r0, [r3, #0]
 8001750:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001752:	fab0 f080 	clz	r0, r0
 8001756:	0940      	lsrs	r0, r0, #5
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200007d0 	.word	0x200007d0

08001760 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001760:	4b01      	ldr	r3, [pc, #4]	; (8001768 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001762:	8018      	strh	r0, [r3, #0]
}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	200007d4 	.word	0x200007d4

0800176c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800176e:	8818      	ldrh	r0, [r3, #0]
 8001770:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001772:	fab0 f080 	clz	r0, r0
 8001776:	0940      	lsrs	r0, r0, #5
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200007d4 	.word	0x200007d4

08001780 <TSK_MediumFrequencyTaskM1>:
{
 8001780:	b530      	push	{r4, r5, lr}
 8001782:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001784:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001786:	f10d 0106 	add.w	r1, sp, #6
 800178a:	484c      	ldr	r0, [pc, #304]	; (80018bc <TSK_MediumFrequencyTaskM1+0x13c>)
  int16_t wAux = 0;
 800178c:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001790:	f003 fe7c 	bl	800548c <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001794:	4d4a      	ldr	r5, [pc, #296]	; (80018c0 <TSK_MediumFrequencyTaskM1+0x140>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001796:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001798:	6828      	ldr	r0, [r5, #0]
 800179a:	f004 fc77 	bl	800608c <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 800179e:	4849      	ldr	r0, [pc, #292]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 80017a0:	f005 fc6a 	bl	8007078 <STM_GetState>
  switch ( StateM1 )
 80017a4:	1ec3      	subs	r3, r0, #3
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d80d      	bhi.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
 80017aa:	e8df f003 	tbb	[pc, r3]
 80017ae:	2b1f      	.short	0x2b1f
 80017b0:	63504230 	.word	0x63504230
 80017b4:	0c0c0c08 	.word	0x0c0c0c08
 80017b8:	6c0c0c0c 	.word	0x6c0c0c0c
 80017bc:	0e7a      	.short	0x0e7a
    STM_NextState( &STM[M1], IDLE );
 80017be:	4841      	ldr	r0, [pc, #260]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 80017c0:	2100      	movs	r1, #0
 80017c2:	f005 fbe5 	bl	8006f90 <STM_NextState>
}
 80017c6:	b003      	add	sp, #12
 80017c8:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 80017ca:	483c      	ldr	r0, [pc, #240]	; (80018bc <TSK_MediumFrequencyTaskM1+0x13c>)
 80017cc:	f003 fd96 	bl	80052fc <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80017d0:	483c      	ldr	r0, [pc, #240]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 80017d2:	2104      	movs	r1, #4
 80017d4:	f005 fbdc 	bl	8006f90 <STM_NextState>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d0f4      	beq.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff fecd 	bl	800157c <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <TSK_MediumFrequencyTaskM1+0x148>)
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	f004 fe0d 	bl	8006404 <R3_2_SwitchOnPWM>
 80017ea:	e7ec      	b.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <TSK_MediumFrequencyTaskM1+0x148>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	f004 fdde 	bl	80063b0 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80017f4:	2014      	movs	r0, #20
 80017f6:	f7ff ffa3 	bl	8001740 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80017fa:	2110      	movs	r1, #16
 80017fc:	4831      	ldr	r0, [pc, #196]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 80017fe:	f005 fbc7 	bl	8006f90 <STM_NextState>
    break;
 8001802:	e7e0      	b.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001804:	2105      	movs	r1, #5
 8001806:	482f      	ldr	r0, [pc, #188]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 8001808:	f005 fbc2 	bl	8006f90 <STM_NextState>
    break;
 800180c:	e7db      	b.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff ff7e 	bl	8001710 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff ff7d 	bl	8001714 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800181a:	2106      	movs	r1, #6
 800181c:	4829      	ldr	r0, [pc, #164]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 800181e:	f005 fbb7 	bl	8006f90 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <TSK_MediumFrequencyTaskM1+0x14c>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	f005 fb83 	bl	8006f30 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800182a:	4829      	ldr	r0, [pc, #164]	; (80018d0 <TSK_MediumFrequencyTaskM1+0x150>)
 800182c:	f7ff fcd6 	bl	80011dc <MCI_ExecBufferedCommands>
    break;
 8001830:	e7c9      	b.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( &Mci[M1] );
 8001832:	4827      	ldr	r0, [pc, #156]	; (80018d0 <TSK_MediumFrequencyTaskM1+0x150>)
 8001834:	f7ff fcd2 	bl	80011dc <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff ff6b 	bl	8001714 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 800183e:	2c00      	cmp	r4, #0
 8001840:	d1c1      	bne.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001842:	4622      	mov	r2, r4
 8001844:	2120      	movs	r1, #32
 8001846:	481f      	ldr	r0, [pc, #124]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 8001848:	f005 fb80 	bl	8006f4c <STM_FaultProcessing>
 800184c:	e7bb      	b.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <TSK_MediumFrequencyTaskM1+0x148>)
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	f004 fe21 	bl	8006498 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fe90 	bl	800157c <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800185c:	6828      	ldr	r0, [r5, #0]
 800185e:	f004 fafb 	bl	8005e58 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001862:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001866:	f7ff ff7b 	bl	8001760 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800186a:	2108      	movs	r1, #8
 800186c:	4815      	ldr	r0, [pc, #84]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 800186e:	f005 fb8f 	bl	8006f90 <STM_NextState>
    break;
 8001872:	e7a8      	b.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001874:	f7ff ff7a 	bl	800176c <TSK_StopPermanencyTimeHasElapsedM1>
 8001878:	2800      	cmp	r0, #0
 800187a:	d0a4      	beq.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 800187c:	2109      	movs	r1, #9
 800187e:	4811      	ldr	r0, [pc, #68]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 8001880:	f005 fb86 	bl	8006f90 <STM_NextState>
 8001884:	e79f      	b.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001886:	f7ff ff61 	bl	800174c <TSK_ChargeBootCapDelayHasElapsedM1>
 800188a:	2800      	cmp	r0, #0
 800188c:	d09b      	beq.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <TSK_MediumFrequencyTaskM1+0x148>)
 8001890:	2100      	movs	r1, #0
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	f000 fb66 	bl	8001f64 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001898:	2111      	movs	r1, #17
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 800189c:	f005 fb78 	bl	8006f90 <STM_NextState>
 80018a0:	e791      	b.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <TSK_MediumFrequencyTaskM1+0x148>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	f000 fb5c 	bl	8001f64 <PWMC_CurrentReadingCalibr>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d08a      	beq.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 80018b0:	2112      	movs	r1, #18
 80018b2:	4804      	ldr	r0, [pc, #16]	; (80018c4 <TSK_MediumFrequencyTaskM1+0x144>)
 80018b4:	f005 fb6c 	bl	8006f90 <STM_NextState>
 80018b8:	e785      	b.n	80017c6 <TSK_MediumFrequencyTaskM1+0x46>
 80018ba:	bf00      	nop
 80018bc:	200000dc 	.word	0x200000dc
 80018c0:	20000440 	.word	0x20000440
 80018c4:	200007a0 	.word	0x200007a0
 80018c8:	200007e0 	.word	0x200007e0
 80018cc:	2000044c 	.word	0x2000044c
 80018d0:	20000770 	.word	0x20000770

080018d4 <MC_Scheduler>:
  if (bMCBootCompleted == 1)
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <MC_Scheduler+0x7c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d000      	beq.n	80018de <MC_Scheduler+0xa>
 80018dc:	4770      	bx	lr
{
 80018de:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 80018e0:	4c1c      	ldr	r4, [pc, #112]	; (8001954 <MC_Scheduler+0x80>)
 80018e2:	8823      	ldrh	r3, [r4, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b1a3      	cbz	r3, 8001912 <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 80018e8:	8823      	ldrh	r3, [r4, #0]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80018f0:	4a19      	ldr	r2, [pc, #100]	; (8001958 <MC_Scheduler+0x84>)
 80018f2:	8813      	ldrh	r3, [r2, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b11b      	cbz	r3, 8001900 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80018f8:	8813      	ldrh	r3, [r2, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <MC_Scheduler+0x88>)
 8001902:	8813      	ldrh	r3, [r2, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	b11b      	cbz	r3, 8001910 <MC_Scheduler+0x3c>
      hStopPermanencyCounterM1--;
 8001908:	8813      	ldrh	r3, [r2, #0]
 800190a:	3b01      	subs	r3, #1
 800190c:	b29b      	uxth	r3, r3
 800190e:	8013      	strh	r3, [r2, #0]
}
 8001910:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 8001912:	4d13      	ldr	r5, [pc, #76]	; (8001960 <MC_Scheduler+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8001914:	f7ff ff34 	bl	8001780 <TSK_MediumFrequencyTaskM1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 8001918:	4629      	mov	r1, r5
 800191a:	f851 0b0c 	ldr.w	r0, [r1], #12
 800191e:	6883      	ldr	r3, [r0, #8]
 8001920:	4798      	blx	r3
 8001922:	6068      	str	r0, [r5, #4]
      if (MCP_Over_UartA.rxBuffer)
 8001924:	b130      	cbz	r0, 8001934 <MC_Scheduler+0x60>
        if (MCP_Over_UartA.pTransportLayer->fGetBuffer (MCP_Over_UartA.pTransportLayer, (void **) &MCP_Over_UartA.txBuffer, MCTL_SYNC))
 8001926:	4629      	mov	r1, r5
 8001928:	220a      	movs	r2, #10
 800192a:	f851 0b08 	ldr.w	r0, [r1], #8
 800192e:	6803      	ldr	r3, [r0, #0]
 8001930:	4798      	blx	r3
 8001932:	b910      	cbnz	r0, 800193a <MC_Scheduler+0x66>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001934:	2301      	movs	r3, #1
 8001936:	8023      	strh	r3, [r4, #0]
 8001938:	e7da      	b.n	80018f0 <MC_Scheduler+0x1c>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 800193a:	4628      	mov	r0, r5
 800193c:	f004 f850 	bl	80059e0 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket (MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer, MCP_Over_UartA.txLength, MCTL_SYNC);
 8001940:	6828      	ldr	r0, [r5, #0]
 8001942:	89ea      	ldrh	r2, [r5, #14]
 8001944:	6846      	ldr	r6, [r0, #4]
 8001946:	68a9      	ldr	r1, [r5, #8]
 8001948:	230a      	movs	r3, #10
 800194a:	47b0      	blx	r6
 800194c:	e7f2      	b.n	8001934 <MC_Scheduler+0x60>
 800194e:	bf00      	nop
 8001950:	200007ce 	.word	0x200007ce
 8001954:	200007d2 	.word	0x200007d2
 8001958:	200007d0 	.word	0x200007d0
 800195c:	200007d4 	.word	0x200007d4
 8001960:	20000490 	.word	0x20000490

08001964 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001968:	4836      	ldr	r0, [pc, #216]	; (8001a44 <TSK_HighFrequencyTask+0xe0>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800196a:	4f37      	ldr	r7, [pc, #220]	; (8001a48 <TSK_HighFrequencyTask+0xe4>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800196c:	4c37      	ldr	r4, [pc, #220]	; (8001a4c <TSK_HighFrequencyTask+0xe8>)
{
 800196e:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 8001970:	f003 fd6e 	bl	8005450 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001974:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <TSK_HighFrequencyTask+0xec>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	f005 fa2c 	bl	8006dd4 <STC_GetSpeedSensor>
 800197c:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800197e:	f005 f9c7 	bl	8006d10 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001982:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001984:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f000 f9a4 	bl	8001cd4 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 800198c:	9803      	ldr	r0, [sp, #12]
 800198e:	f7ff fce3 	bl	8001358 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001992:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001994:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001996:	f7ff fd55 	bl	8001444 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <TSK_HighFrequencyTask+0xf0>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800199c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80019a0:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80019a2:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80019a4:	1a09      	subs	r1, r1, r0
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	f004 fb28 	bl	8005ffc <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80019ac:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80019b0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80019b4:	1ac9      	subs	r1, r1, r3
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <TSK_HighFrequencyTask+0xf4>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80019b8:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	f004 fb1e 	bl	8005ffc <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <TSK_HighFrequencyTask+0xf8>)
 80019c2:	f8ad 8008 	strh.w	r8, [sp, #8]
 80019c6:	f8ad 000a 	strh.w	r0, [sp, #10]
 80019ca:	9902      	ldr	r1, [sp, #8]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	f003 fbd7 	bl	8005180 <Circle_Limitation>
 80019d2:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80019d4:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80019d6:	fa0f f883 	sxth.w	r8, r3
 80019da:	141d      	asrs	r5, r3, #16
 80019dc:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80019de:	f005 f99f 	bl	8006d20 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80019e2:	4631      	mov	r1, r6
 80019e4:	9802      	ldr	r0, [sp, #8]
 80019e6:	f7ff fd71 	bl	80014cc <MCM_Rev_Park>
 80019ea:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80019ec:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80019ee:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80019f0:	f000 f972 	bl	8001cd8 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80019f4:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80019f6:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 80019f8:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80019fa:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 80019fc:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 80019fe:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001a00:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001a04:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 8001a06:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001a08:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001a0a:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001a0c:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001a10:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8001a12:	d011      	beq.n	8001a38 <TSK_HighFrequencyTask+0xd4>
  GLOBAL_TIMESTAMP++;
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <TSK_HighFrequencyTask+0xfc>)
  if (MCPA_UART_A.Mark != 0)
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <TSK_HighFrequencyTask+0x100>)
  GLOBAL_TIMESTAMP++;
 8001a18:	6813      	ldr	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8001a1a:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001a1e:	3301      	adds	r3, #1
 8001a20:	6013      	str	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8001a22:	b919      	cbnz	r1, 8001a2c <TSK_HighFrequencyTask+0xc8>
}
 8001a24:	2000      	movs	r0, #0
 8001a26:	b006      	add	sp, #24
 8001a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8001a2c:	f004 f8ac 	bl	8005b88 <MCPA_dataLog>
}
 8001a30:	2000      	movs	r0, #0
 8001a32:	b006      	add	sp, #24
 8001a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	480b      	ldr	r0, [pc, #44]	; (8001a68 <TSK_HighFrequencyTask+0x104>)
 8001a3c:	f005 fa86 	bl	8006f4c <STM_FaultProcessing>
 8001a40:	e7e8      	b.n	8001a14 <TSK_HighFrequencyTask+0xb0>
 8001a42:	bf00      	nop
 8001a44:	200000dc 	.word	0x200000dc
 8001a48:	200007e0 	.word	0x200007e0
 8001a4c:	200007a8 	.word	0x200007a8
 8001a50:	2000044c 	.word	0x2000044c
 8001a54:	20000448 	.word	0x20000448
 8001a58:	20000444 	.word	0x20000444
 8001a5c:	200007d8 	.word	0x200007d8
 8001a60:	20001ab0 	.word	0x20001ab0
 8001a64:	20000464 	.word	0x20000464
 8001a68:	200007a0 	.word	0x200007a0

08001a6c <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <TSK_SafetyTask_PWMOFF+0x9c>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001a70:	4e26      	ldr	r6, [pc, #152]	; (8001b0c <TSK_SafetyTask_PWMOFF+0xa0>)
{
 8001a72:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001a74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a78:	f004 fa42 	bl	8005f00 <NTC_CalcAvTemp>
 8001a7c:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001a7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001a82:	f000 fa99 	bl	8001fb8 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001a86:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001a8a:	4305      	orrs	r5, r0
 8001a8c:	b2ad      	uxth	r5, r5
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001a8e:	b364      	cbz	r4, 8001aea <TSK_SafetyTask_PWMOFF+0x7e>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001a90:	4f1f      	ldr	r7, [pc, #124]	; (8001b10 <TSK_SafetyTask_PWMOFF+0xa4>)
 8001a92:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001a96:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001a9a:	43ea      	mvns	r2, r5
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	4638      	mov	r0, r7
 8001aa2:	f005 fa53 	bl	8006f4c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001aa6:	4638      	mov	r0, r7
 8001aa8:	f005 fae6 	bl	8007078 <STM_GetState>
 8001aac:	280a      	cmp	r0, #10
 8001aae:	d00a      	beq.n	8001ac6 <TSK_SafetyTask_PWMOFF+0x5a>
 8001ab0:	280b      	cmp	r0, #11
 8001ab2:	d107      	bne.n	8001ac4 <TSK_SafetyTask_PWMOFF+0x58>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ab4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ab8:	f000 fa52 	bl	8001f60 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001abc:	4815      	ldr	r0, [pc, #84]	; (8001b14 <TSK_SafetyTask_PWMOFF+0xa8>)
 8001abe:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001ac2:	b9cb      	cbnz	r3, 8001af8 <TSK_SafetyTask_PWMOFF+0x8c>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ac6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001aca:	f000 fa49 	bl	8001f60 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <TSK_SafetyTask_PWMOFF+0xa8>)
 8001ad0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001ad4:	b9a3      	cbnz	r3, 8001b00 <TSK_SafetyTask_PWMOFF+0x94>
    FOC_Clear(bMotor);
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff fd50 	bl	800157c <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <TSK_SafetyTask_PWMOFF+0xac>)
 8001ade:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001ae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001ae6:	f004 b9b7 	b.w	8005e58 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8001aea:	480c      	ldr	r0, [pc, #48]	; (8001b1c <TSK_SafetyTask_PWMOFF+0xb0>)
 8001aec:	f005 f8d2 	bl	8006c94 <RVBS_CalcAvVbus>
 8001af0:	f000 000e 	and.w	r0, r0, #14
 8001af4:	4305      	orrs	r5, r0
 8001af6:	e7cb      	b.n	8001a90 <TSK_SafetyTask_PWMOFF+0x24>
}
 8001af8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      MCPA_flushDataLog (&MCPA_UART_A);
 8001afc:	f004 b908 	b.w	8005d10 <MCPA_flushDataLog>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001b00:	f004 f906 	bl	8005d10 <MCPA_flushDataLog>
 8001b04:	e7e7      	b.n	8001ad6 <TSK_SafetyTask_PWMOFF+0x6a>
 8001b06:	bf00      	nop
 8001b08:	20000450 	.word	0x20000450
 8001b0c:	200007e0 	.word	0x200007e0
 8001b10:	200007a0 	.word	0x200007a0
 8001b14:	20000464 	.word	0x20000464
 8001b18:	20000440 	.word	0x20000440
 8001b1c:	20000000 	.word	0x20000000

08001b20 <TSK_SafetyTask>:
{
 8001b20:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <TSK_SafetyTask+0x1c>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d000      	beq.n	8001b2c <TSK_SafetyTask+0xc>
}
 8001b2a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ff9d 	bl	8001a6c <TSK_SafetyTask_PWMOFF>
}
 8001b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001b36:	f001 bab7 	b.w	80030a8 <RCM_ExecUserConv>
 8001b3a:	bf00      	nop
 8001b3c:	200007ce 	.word	0x200007ce

08001b40 <MC_RunMotorControlTasks>:
{
 8001b40:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <MC_RunMotorControlTasks+0x14>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b903      	cbnz	r3, 8001b4a <MC_RunMotorControlTasks+0xa>
}
 8001b48:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001b4a:	f7ff fec3 	bl	80018d4 <MC_Scheduler>
    TSK_SafetyTask();
 8001b4e:	f7ff ffe7 	bl	8001b20 <TSK_SafetyTask>
}
 8001b52:	bd08      	pop	{r3, pc}
 8001b54:	200007ce 	.word	0x200007ce

08001b58 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001b58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <TSK_HardwareFaultTask+0x18>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	f004 fc9b 	bl	8006498 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001b66:	4803      	ldr	r0, [pc, #12]	; (8001b74 <TSK_HardwareFaultTask+0x1c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2180      	movs	r1, #128	; 0x80
 8001b6c:	f005 b9ee 	b.w	8006f4c <STM_FaultProcessing>
 8001b70:	200007e0 	.word	0x200007e0
 8001b74:	200007a0 	.word	0x200007a0

08001b78 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001b78:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8001b7a:	f7ff fae7 	bl	800114c <MC_GetSTMStateMotor1>
 8001b7e:	b918      	cbnz	r0, 8001b88 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8001b84:	f7ff bad6 	b.w	8001134 <MC_StartMotor1>
}
 8001b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8001b8c:	f7ff bad8 	b.w	8001140 <MC_StopMotor1>

08001b90 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001b90:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b92:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <mc_lock_pins+0x100>)
 8001b94:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <mc_lock_pins+0x104>)
 8001b96:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b98:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001b9c:	b08f      	sub	sp, #60	; 0x3c
 8001b9e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ba0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ba2:	69d9      	ldr	r1, [r3, #28]
 8001ba4:	910d      	str	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ba6:	2040      	movs	r0, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ba8:	493b      	ldr	r1, [pc, #236]	; (8001c98 <mc_lock_pins+0x108>)
  (void) temp;
 8001baa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bac:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bae:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bb0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bb2:	69dd      	ldr	r5, [r3, #28]
 8001bb4:	950c      	str	r5, [sp, #48]	; 0x30
  (void) temp;
 8001bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bb8:	4d38      	ldr	r5, [pc, #224]	; (8001c9c <mc_lock_pins+0x10c>)
 8001bba:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bbc:	2680      	movs	r6, #128	; 0x80
 8001bbe:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bc0:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <mc_lock_pins+0x110>)
  (void) temp;
 8001bc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bca:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bcc:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bce:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	920a      	str	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bd4:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bd8:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 8001bdc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bde:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001be0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001be2:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001be4:	69da      	ldr	r2, [r3, #28]
 8001be6:	9209      	str	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001be8:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
  (void) temp;
 8001bf0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bf2:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bf4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bf6:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bf8:	69dc      	ldr	r4, [r3, #28]
 8001bfa:	9408      	str	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bfc:	441a      	add	r2, r3
  (void) temp;
 8001bfe:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c00:	f44f 34a0 	mov.w	r4, #81920	; 0x14000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c04:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c08:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c0a:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c0c:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c0e:	69d4      	ldr	r4, [r2, #28]
 8001c10:	9407      	str	r4, [sp, #28]
  (void) temp;
 8001c12:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c14:	f44f 34c0 	mov.w	r4, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c18:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c1c:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c1e:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c20:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c22:	69d4      	ldr	r4, [r2, #28]
 8001c24:	9406      	str	r4, [sp, #24]
  (void) temp;
 8001c26:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c28:	f44f 3490 	mov.w	r4, #73728	; 0x12000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c2c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c30:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c32:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c34:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c36:	69d4      	ldr	r4, [r2, #28]
 8001c38:	9405      	str	r4, [sp, #20]
  (void) temp;
 8001c3a:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c3c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c3e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c40:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c42:	69d9      	ldr	r1, [r3, #28]
 8001c44:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c46:	2008      	movs	r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c48:	4916      	ldr	r1, [pc, #88]	; (8001ca4 <mc_lock_pins+0x114>)
  (void) temp;
 8001c4a:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c4c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c4e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c50:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c52:	69d8      	ldr	r0, [r3, #28]
 8001c54:	9003      	str	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c56:	3108      	adds	r1, #8
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c58:	2010      	movs	r0, #16
  (void) temp;
 8001c5a:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c5c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c5e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c60:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c66:	2101      	movs	r1, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c68:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  (void) temp;
 8001c6c:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c6e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c70:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c72:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c74:	69d3      	ldr	r3, [r2, #28]
 8001c76:	9301      	str	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c78:	2102      	movs	r1, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <mc_lock_pins+0x118>)
  (void) temp;
 8001c7c:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c7e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c80:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c82:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c84:	69d3      	ldr	r3, [r2, #28]
 8001c86:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001c88:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 8001c8a:	b00f      	add	sp, #60	; 0x3c
 8001c8c:	bc70      	pop	{r4, r5, r6}
 8001c8e:	4770      	bx	lr
 8001c90:	40020800 	.word	0x40020800
 8001c94:	00010100 	.word	0x00010100
 8001c98:	00010040 	.word	0x00010040
 8001c9c:	00010080 	.word	0x00010080
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	00010008 	.word	0x00010008
 8001ca8:	00010002 	.word	0x00010002

08001cac <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001cac:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001cae:	f002 fcc1 	bl	8004634 <HAL_RCC_GetHCLKFreq>
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_MotorControl_Init+0x20>)
 8001cb4:	fba3 3000 	umull	r3, r0, r3, r0
 8001cb8:	09c0      	lsrs	r0, r0, #7
 8001cba:	f002 f819 	bl	8003cf0 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001cbe:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <MX_MotorControl_Init+0x24>)
 8001cc0:	f7ff fc96 	bl	80015f0 <MCboot>
  mc_lock_pins();

}
 8001cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8001cc8:	f7ff bf62 	b.w	8001b90 <mc_lock_pins>
 8001ccc:	10624dd3 	.word	0x10624dd3
 8001cd0:	20001a70 	.word	0x20001a70

08001cd4 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8001cd4:	6843      	ldr	r3, [r0, #4]
 8001cd6:	4718      	bx	r3

08001cd8 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8001cd8:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001cda:	f8b0 405c 	ldrh.w	r4, [r0, #92]	; 0x5c
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8001cde:	8f03      	ldrh	r3, [r0, #56]	; 0x38
{
 8001ce0:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001ce2:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8001ce6:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001ce8:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8001cec:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001cee:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8001cf2:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8001cf6:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8001cfa:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8001cfe:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8001d02:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8001d06:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001d0a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8001d0e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8001d12:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8001d16:	f2c0 8082 	blt.w	8001e1e <PWMC_SetPhaseVoltage+0x146>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8001d1a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8001d1e:	db53      	blt.n	8001dc8 <PWMC_SetPhaseVoltage+0xf0>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001d20:	ebbe 0e02 	subs.w	lr, lr, r2
 8001d24:	bf44      	itt	mi
 8001d26:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001d2a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8001d2e:	2900      	cmp	r1, #0
 8001d30:	bfbc      	itt	lt
 8001d32:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8001d36:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bfb8      	it	lt
 8001d3e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001d42:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001d46:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001d4a:	bfb8      	it	lt
 8001d4c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8001d50:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8001d54:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001d58:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8001d5c:	f880 c068 	strb.w	ip, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhB;
 8001d60:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8001d64:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      pHandle->highDuty = wTimePhC;
 8001d68:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));

  if ( pHandle->DTTest == 1u )
 8001d6c:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8001d70:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8001d74:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8001d78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d7c:	b292      	uxth	r2, r2
 8001d7e:	b289      	uxth	r1, r1
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8001d84:	8742      	strh	r2, [r0, #58]	; 0x3a
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8001d86:	8781      	strh	r1, [r0, #60]	; 0x3c
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8001d88:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if ( pHandle->DTTest == 1u )
 8001d8a:	d118      	bne.n	8001dbe <PWMC_SetPhaseVoltage+0xe6>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8001d8c:	f9b0 404c 	ldrsh.w	r4, [r0, #76]	; 0x4c
 8001d90:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8001d92:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
 8001d96:	bfcc      	ite	gt
 8001d98:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8001d9a:	1b12      	suble	r2, r2, r4
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	8742      	strh	r2, [r0, #58]	; 0x3a
    }

    if ( pHandle->Ib > 0 )
 8001da0:	f9b0 204e 	ldrsh.w	r2, [r0, #78]	; 0x4e
 8001da4:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8001da6:	f9b0 2050 	ldrsh.w	r2, [r0, #80]	; 0x50
      pHandle->CntPhB += pHandle->DTCompCnt;
 8001daa:	bfcc      	ite	gt
 8001dac:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8001dae:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8001db0:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8001db2:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8001db4:	bfcc      	ite	gt
 8001db6:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8001db8:	1b1b      	suble	r3, r3, r4
 8001dba:	8781      	strh	r1, [r0, #60]	; 0x3c
 8001dbc:	87c3      	strh	r3, [r0, #62]	; 0x3e
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8001dbe:	6983      	ldr	r3, [r0, #24]
}
 8001dc0:	b002      	add	sp, #8
 8001dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8001dc6:	4718      	bx	r3
      if ( wX <= 0 )
 8001dc8:	f1bc 0f00 	cmp.w	ip, #0
 8001dcc:	dd4f      	ble.n	8001e6e <PWMC_SetPhaseVoltage+0x196>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001dce:	ebbc 0e02 	subs.w	lr, ip, r2
 8001dd2:	bf44      	itt	mi
 8001dd4:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001dd8:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8001ddc:	2900      	cmp	r1, #0
 8001dde:	bfb8      	it	lt
 8001de0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8001de4:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8001de8:	bfb8      	it	lt
 8001dea:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8001dee:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001df2:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8001df4:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001df8:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001dfc:	bfb8      	it	lt
 8001dfe:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8001e02:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001e06:	bfb8      	it	lt
 8001e08:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8001e0c:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8001e10:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8001e14:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhC;
 8001e18:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8001e1c:	e7a6      	b.n	8001d6c <PWMC_SetPhaseVoltage+0x94>
    if ( wZ < 0 )
 8001e1e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8001e22:	db75      	blt.n	8001f10 <PWMC_SetPhaseVoltage+0x238>
      if ( wX <= 0 )
 8001e24:	f1bc 0f00 	cmp.w	ip, #0
 8001e28:	dd4a      	ble.n	8001ec0 <PWMC_SetPhaseVoltage+0x1e8>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001e2a:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001e2e:	bf48      	it	mi
 8001e30:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8001e34:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001e38:	bf48      	it	mi
 8001e3a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bfb8      	it	lt
 8001e42:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8001e46:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001e4a:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001e4e:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8001e52:	bfb8      	it	lt
 8001e54:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8001e58:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8001e5c:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8001e60:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8001e64:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8001e68:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8001e6c:	e77e      	b.n	8001d6c <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001e6e:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001e72:	bf44      	itt	mi
 8001e74:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001e78:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bfb8      	it	lt
 8001e80:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8001e84:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8001e88:	bfb8      	it	lt
 8001e8a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8001e8e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhB = wTimePhC + wX / 131072;
 8001e92:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001e96:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001e9a:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8001e9e:	bfb8      	it	lt
 8001ea0:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8001ea4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8001ea8:	bfb8      	it	lt
 8001eaa:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8001eae:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8001eb2:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8001eb6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhB;
 8001eba:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
 8001ebe:	e755      	b.n	8001d6c <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001ec0:	ebbc 0e02 	subs.w	lr, ip, r2
 8001ec4:	bf44      	itt	mi
 8001ec6:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001eca:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8001ece:	2900      	cmp	r1, #0
 8001ed0:	bfb8      	it	lt
 8001ed2:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8001ed6:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8001eda:	bfb8      	it	lt
 8001edc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8001ee0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001ee4:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8001ee6:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001eea:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001eee:	bfb8      	it	lt
 8001ef0:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8001ef4:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001ef8:	bfb8      	it	lt
 8001efa:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8001efe:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8001f02:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8001f06:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8001f0a:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8001f0e:	e72d      	b.n	8001d6c <PWMC_SetPhaseVoltage+0x94>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001f10:	ebbe 0e02 	subs.w	lr, lr, r2
 8001f14:	bf44      	itt	mi
 8001f16:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001f1a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8001f1e:	2900      	cmp	r1, #0
 8001f20:	bfbc      	itt	lt
 8001f22:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8001f26:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bfb8      	it	lt
 8001f2e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001f32:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001f36:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001f3a:	bfb8      	it	lt
 8001f3c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8001f40:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8001f44:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001f48:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8001f4c:	f880 c068 	strb.w	ip, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhC;
 8001f50:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8001f54:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      pHandle->highDuty = wTimePhB;
 8001f58:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
 8001f5c:	e706      	b.n	8001d6c <PWMC_SetPhaseVoltage+0x94>
 8001f5e:	bf00      	nop

08001f60 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8001f60:	6883      	ldr	r3, [r0, #8]
 8001f62:	4718      	bx	r3

08001f64 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8001f64:	b520      	push	{r5, lr}
 8001f66:	4605      	mov	r5, r0
 8001f68:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8001f6a:	b199      	cbz	r1, 8001f94 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8001f6c:	2901      	cmp	r1, #1
 8001f6e:	d002      	beq.n	8001f76 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8001f70:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8001f72:	b002      	add	sp, #8
 8001f74:	bd20      	pop	{r5, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8001f76:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8001f7a:	b1cb      	cbz	r3, 8001fb0 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	9101      	str	r1, [sp, #4]
 8001f82:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8001f8a:	6903      	ldr	r3, [r0, #16]
 8001f8c:	4798      	blx	r3
        retVal = true;
 8001f8e:	9901      	ldr	r1, [sp, #4]
 8001f90:	4608      	mov	r0, r1
 8001f92:	e7ee      	b.n	8001f72 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8001f94:	f7ff ffe4 	bl	8001f60 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8001f98:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 8001f9c:	f8a5 304a 	strh.w	r3, [r5, #74]	; 0x4a
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e5      	bne.n	8001f70 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	692b      	ldr	r3, [r5, #16]
 8001fa8:	4798      	blx	r3
      retVal = true;
 8001faa:	2001      	movs	r0, #1
}
 8001fac:	b002      	add	sp, #8
 8001fae:	bd20      	pop	{r5, pc}
      retVal = true;
 8001fb0:	4608      	mov	r0, r1
}
 8001fb2:	b002      	add	sp, #8
 8001fb4:	bd20      	pop	{r5, pc}
 8001fb6:	bf00      	nop

08001fb8 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8001fb8:	69c3      	ldr	r3, [r0, #28]
 8001fba:	4718      	bx	r3

08001fbc <RI_SetRegCommandParser>:
static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize);

__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc0:	4681      	mov	r9, r0
  uint16_t * dataElementID;
  uint8_t * rxData = pHandle->rxBuffer;
  uint8_t * txData = pHandle->txBuffer;
  int16_t rxLength = pHandle->rxLength;
 8001fc2:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  uint16_t size;
  uint8_t retVal=MCP_CMD_OK;
  uint8_t accessResult;
  uint8_t number_of_item =0;
  pHandle->txLength = 0;
 8001fc6:	2300      	movs	r3, #0
  while (rxLength > 0)
 8001fc8:	4298      	cmp	r0, r3
  uint8_t * txData = pHandle->txBuffer;
 8001fca:	e9d9 5701 	ldrd	r5, r7, [r9, #4]
{
 8001fce:	b087      	sub	sp, #28
  pHandle->txLength = 0;
 8001fd0:	f8a9 300e 	strh.w	r3, [r9, #14]
  while (rxLength > 0)
 8001fd4:	dd7b      	ble.n	80020ce <RI_SetRegCommandParser+0x112>
 8001fd6:	187a      	adds	r2, r7, r1
  uint8_t retVal=MCP_CMD_OK;
 8001fd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001fdc:	4ba5      	ldr	r3, [pc, #660]	; (8002274 <RI_SetRegCommandParser+0x2b8>)
 8001fde:	f1c7 0b01 	rsb	fp, r7, #1
  {
     number_of_item ++;
     dataElementID = (uint16_t *) rxData;
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
     rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001fe2:	462e      	mov	r6, r5
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001fe4:	fa1f f880 	uxth.w	r8, r0
     accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8001fe8:	f836 eb02 	ldrh.w	lr, [r6], #2
  uint8_t typeID;
  uint8_t motorID;
  uint8_t retVal = MCP_CMD_OK;
  uint16_t regID = dataID & REG_MASK;
  typeID = dataID & TYPE_MASK;
  motorID = (dataID & MOTOR_MASK)-1;
 8001fec:	f00e 0c07 	and.w	ip, lr, #7
 8001ff0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001ff4:	fa5f f28c 	uxtb.w	r2, ip

  MCI_Handle_t * pMCI = &Mci[motorID];
 8001ff8:	fa5f f48c 	uxtb.w	r4, ip

  switch (typeID)
 8001ffc:	f00e 0138 	and.w	r1, lr, #56	; 0x38
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002000:	f1a8 0002 	sub.w	r0, r8, #2
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002004:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  motorID = (dataID & MOTOR_MASK)-1;
 8002008:	9201      	str	r2, [sp, #4]
  switch (typeID)
 800200a:	3908      	subs	r1, #8
  uint16_t regID = dataID & REG_MASK;
 800200c:	f02e 0207 	bic.w	r2, lr, #7
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002010:	fa1f fa80 	uxth.w	sl, r0
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002018:	b200      	sxth	r0, r0
  uint16_t regID = dataID & REG_MASK;
 800201a:	b292      	uxth	r2, r2
  switch (typeID)
 800201c:	2920      	cmp	r1, #32
 800201e:	d812      	bhi.n	8002046 <RI_SetRegCommandParser+0x8a>
 8002020:	e8df f001 	tbb	[pc, r1]
 8002024:	111111ba 	.word	0x111111ba
 8002028:	11111111 	.word	0x11111111
 800202c:	1111118d 	.word	0x1111118d
 8002030:	11111111 	.word	0x11111111
 8002034:	111111c6 	.word	0x111111c6
 8002038:	11111111 	.word	0x11111111
 800203c:	1111116f 	.word	0x1111116f
 8002040:	11111111 	.word	0x11111111
 8002044:	2a          	.byte	0x2a
 8002045:	00          	.byte	0x00
 8002046:	2207      	movs	r2, #7
     if (number_of_item == 1 && rxLength == 0)
 8002048:	eb07 010b 	add.w	r1, r7, fp
 800204c:	b2c9      	uxtb	r1, r1
 800204e:	2901      	cmp	r1, #1
 8002050:	d038      	beq.n	80020c4 <RI_SetRegCommandParser+0x108>
       if (txSyncFreeSpace !=0 )
 8002052:	9902      	ldr	r1, [sp, #8]
 8002054:	428f      	cmp	r7, r1
 8002056:	f000 80bc 	beq.w	80021d2 <RI_SetRegCommandParser+0x216>
         *txData = accessResult;
 800205a:	f807 2b01 	strb.w	r2, [r7], #1
         pHandle->txLength++;
 800205e:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8002062:	3101      	adds	r1, #1
 8002064:	f8a9 100e 	strh.w	r1, [r9, #14]
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002068:	2a00      	cmp	r2, #0
 800206a:	f040 80b7 	bne.w	80021dc <RI_SetRegCommandParser+0x220>
  while (rxLength > 0)
 800206e:	2800      	cmp	r0, #0
 8002070:	f340 82ab 	ble.w	80025ca <RI_SetRegCommandParser+0x60e>
 8002074:	4635      	mov	r5, r6
 8002076:	e7b4      	b.n	8001fe2 <RI_SetRegCommandParser+0x26>
    }
    break;
  case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *) data;
      *size = rawSize+2; /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
 8002078:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 800207c:	f108 0802 	add.w	r8, r8, #2
 8002080:	fa1f f888 	uxth.w	r8, r8
      uint8_t * rawData = data+2; /* rawData points to the first data (after size extraction) */
      if (*size > dataAvailable )
 8002084:	4580      	cmp	r8, r0
 8002086:	f300 81bc 	bgt.w	8002402 <RI_SetRegCommandParser+0x446>
        *size =0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 800208a:	f5b2 7ff4 	cmp.w	r2, #488	; 0x1e8
 800208e:	f000 8205 	beq.w	800249c <RI_SetRegCommandParser+0x4e0>
 8002092:	d923      	bls.n	80020dc <RI_SetRegCommandParser+0x120>
 8002094:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 8002098:	f000 81f4 	beq.w	8002484 <RI_SetRegCommandParser+0x4c8>
 800209c:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 80020a0:	f040 8196 	bne.w	80023d0 <RI_SetRegCommandParser+0x414>
          }
          break;

        case MC_REG_ASYNC_UARTA:
          {
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 80020a4:	1d29      	adds	r1, r5, #4
 80020a6:	4874      	ldr	r0, [pc, #464]	; (8002278 <RI_SetRegCommandParser+0x2bc>)
 80020a8:	f003 fe60 	bl	8005d6c <MCPA_cfgLog>
     if (number_of_item == 1 && rxLength == 0)
 80020ac:	eb07 010b 	add.w	r1, r7, fp
 80020b0:	b2c9      	uxtb	r1, r1
     rxData = rxData+size;
 80020b2:	4446      	add	r6, r8
     if (number_of_item == 1 && rxLength == 0)
 80020b4:	2901      	cmp	r1, #1
     rxLength = (int16_t) (rxLength - size);
 80020b6:	ebaa 0808 	sub.w	r8, sl, r8
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 80020ba:	4602      	mov	r2, r0
          }
          break;
 80020bc:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <RI_SetRegCommandParser+0x2b8>)
     rxLength = (int16_t) (rxLength - size);
 80020be:	fa0f f088 	sxth.w	r0, r8
     if (number_of_item == 1 && rxLength == 0)
 80020c2:	d1c6      	bne.n	8002052 <RI_SetRegCommandParser+0x96>
 80020c4:	2800      	cmp	r0, #0
 80020c6:	d1c4      	bne.n	8002052 <RI_SetRegCommandParser+0x96>
  if (retVal == MCP_CMD_OK)
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	f040 8083 	bne.w	80021d4 <RI_SetRegCommandParser+0x218>
    pHandle->txLength = 0;
 80020ce:	2200      	movs	r2, #0
}
 80020d0:	4610      	mov	r0, r2
    pHandle->txLength = 0;
 80020d2:	f8a9 200e 	strh.w	r2, [r9, #14]
}
 80020d6:	b007      	add	sp, #28
 80020d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020dc:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 80020e0:	f000 81be 	beq.w	8002460 <RI_SetRegCommandParser+0x4a4>
 80020e4:	f200 8174 	bhi.w	80023d0 <RI_SetRegCommandParser+0x414>
 80020e8:	2aa8      	cmp	r2, #168	; 0xa8
 80020ea:	d004      	beq.n	80020f6 <RI_SetRegCommandParser+0x13a>
 80020ec:	f240 816a 	bls.w	80023c4 <RI_SetRegCommandParser+0x408>
 80020f0:	2ae8      	cmp	r2, #232	; 0xe8
 80020f2:	f040 816d 	bne.w	80023d0 <RI_SetRegCommandParser+0x414>
     rxLength = (int16_t) (rxLength - size);
 80020f6:	ebaa 0008 	sub.w	r0, sl, r8
     rxData = rxData+size;
 80020fa:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 80020fc:	b200      	sxth	r0, r0
          retVal = MCP_ERROR_RO_REG;
 80020fe:	2204      	movs	r2, #4
 8002100:	e7a2      	b.n	8002048 <RI_SetRegCommandParser+0x8c>

uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  *size= 1 ; /* /0 is the min String size */
  while ((*srcString != 0) && (*size < maxSize) )
 8002102:	78aa      	ldrb	r2, [r5, #2]
 8002104:	2a00      	cmp	r2, #0
 8002106:	f000 81e5 	beq.w	80024d4 <RI_SetRegCommandParser+0x518>
 800210a:	2801      	cmp	r0, #1
 800210c:	f340 8173 	ble.w	80023f6 <RI_SetRegCommandParser+0x43a>
 8002110:	1cec      	adds	r4, r5, #3
 8002112:	43ed      	mvns	r5, r5
 8002114:	e002      	b.n	800211c <RI_SetRegCommandParser+0x160>
 8002116:	4290      	cmp	r0, r2
 8002118:	f340 8167 	ble.w	80023ea <RI_SetRegCommandParser+0x42e>
  {
    *destString = *srcString ;
    srcString = srcString+1;
 800211c:	192a      	adds	r2, r5, r4
 800211e:	46a4      	mov	ip, r4
  while ((*srcString != 0) && (*size < maxSize) )
 8002120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002124:	b292      	uxth	r2, r2
 8002126:	2900      	cmp	r1, #0
 8002128:	d1f5      	bne.n	8002116 <RI_SetRegCommandParser+0x15a>
     rxData = rxData+size;
 800212a:	4611      	mov	r1, r2
     rxLength = (int16_t) (rxLength - size);
 800212c:	ebaa 0202 	sub.w	r2, sl, r2
 8002130:	b210      	sxth	r0, r2
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *destString = 0;
 8002132:	2200      	movs	r2, #0
 8002134:	f88c 2000 	strb.w	r2, [ip]
     rxData = rxData+size;
 8002138:	440e      	add	r6, r1
      retVal = MCP_ERROR_RO_REG;
 800213a:	2204      	movs	r2, #4
 800213c:	e784      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
    uint16_t regdata16 = *(uint16_t *)data;
 800213e:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 8002142:	8869      	ldrh	r1, [r5, #2]
    switch (regID)
 8002144:	f000 8237 	beq.w	80025b6 <RI_SetRegCommandParser+0x5fa>
 8002148:	f200 80b4 	bhi.w	80022b4 <RI_SetRegCommandParser+0x2f8>
 800214c:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 8002150:	f000 8225 	beq.w	800259e <RI_SetRegCommandParser+0x5e2>
 8002154:	f240 8094 	bls.w	8002280 <RI_SetRegCommandParser+0x2c4>
 8002158:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 800215c:	f000 8223 	beq.w	80025a6 <RI_SetRegCommandParser+0x5ea>
 8002160:	d962      	bls.n	8002228 <RI_SetRegCommandParser+0x26c>
 8002162:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 8002166:	d059      	beq.n	800221c <RI_SetRegCommandParser+0x260>
 8002168:	d951      	bls.n	800220e <RI_SetRegCommandParser+0x252>
 800216a:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 800216e:	f040 80c3 	bne.w	80022f8 <RI_SetRegCommandParser+0x33c>
        currComp = MCI_GetIqdref(pMCI);
 8002172:	4620      	mov	r0, r4
 8002174:	9101      	str	r1, [sp, #4]
 8002176:	f7ff f8b7 	bl	80012e8 <MCI_GetIqdref>
        currComp.q = (int16_t)regdata16;
 800217a:	9901      	ldr	r1, [sp, #4]
        currComp = MCI_GetIqdref(pMCI);
 800217c:	9005      	str	r0, [sp, #20]
     rxData = rxData+size;
 800217e:	1d2e      	adds	r6, r5, #4
        currComp.q = (int16_t)regdata16;
 8002180:	f8ad 1014 	strh.w	r1, [sp, #20]
        MCI_SetCurrentReferences(pMCI,currComp);
 8002184:	4620      	mov	r0, r4
 8002186:	9905      	ldr	r1, [sp, #20]
 8002188:	f7ff f808 	bl	800119c <MCI_SetCurrentReferences>
     rxLength = (int16_t) (rxLength - size);
 800218c:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 8002190:	4b38      	ldr	r3, [pc, #224]	; (8002274 <RI_SetRegCommandParser+0x2b8>)
     rxLength = (int16_t) (rxLength - size);
 8002192:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002194:	2200      	movs	r2, #0
      break;
 8002196:	e757      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
    switch (regID)
 8002198:	2a48      	cmp	r2, #72	; 0x48
 800219a:	f000 812c 	beq.w	80023f6 <RI_SetRegCommandParser+0x43a>
 800219e:	2a88      	cmp	r2, #136	; 0x88
 80021a0:	f000 8144 	beq.w	800242c <RI_SetRegCommandParser+0x470>
     rxLength = (int16_t) (rxLength - size);
 80021a4:	f1a8 0003 	sub.w	r0, r8, #3
 80021a8:	b200      	sxth	r0, r0
     rxData = rxData+size;
 80021aa:	1cee      	adds	r6, r5, #3
      retVal = MCP_ERROR_UNKNOWN_REG;
 80021ac:	2205      	movs	r2, #5
 80021ae:	e74b      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
    switch (regID)
 80021b0:	2a98      	cmp	r2, #152	; 0x98
 80021b2:	f000 8128 	beq.w	8002406 <RI_SetRegCommandParser+0x44a>
 80021b6:	d924      	bls.n	8002202 <RI_SetRegCommandParser+0x246>
 80021b8:	f5b2 7fac 	cmp.w	r2, #344	; 0x158
 80021bc:	d01b      	beq.n	80021f6 <RI_SetRegCommandParser+0x23a>
 80021be:	d915      	bls.n	80021ec <RI_SetRegCommandParser+0x230>
 80021c0:	f5b2 7fcc 	cmp.w	r2, #408	; 0x198
 80021c4:	d017      	beq.n	80021f6 <RI_SetRegCommandParser+0x23a>
     rxLength = (int16_t) (rxLength - size);
 80021c6:	f1a8 0006 	sub.w	r0, r8, #6
 80021ca:	b200      	sxth	r0, r0
     rxData = rxData+size;
 80021cc:	1dae      	adds	r6, r5, #6
      retVal = MCP_ERROR_UNKNOWN_REG;
 80021ce:	2205      	movs	r2, #5
 80021d0:	e73a      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
         retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80021d2:	2208      	movs	r2, #8
}
 80021d4:	4610      	mov	r0, r2
 80021d6:	b007      	add	sp, #28
 80021d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80021dc:	2a07      	cmp	r2, #7
 80021de:	f040 80fd 	bne.w	80023dc <RI_SetRegCommandParser+0x420>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80021e2:	2201      	movs	r2, #1
}
 80021e4:	4610      	mov	r0, r2
 80021e6:	b007      	add	sp, #28
 80021e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ec:	2ad8      	cmp	r2, #216	; 0xd8
 80021ee:	d002      	beq.n	80021f6 <RI_SetRegCommandParser+0x23a>
 80021f0:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 80021f4:	d1e7      	bne.n	80021c6 <RI_SetRegCommandParser+0x20a>
     rxLength = (int16_t) (rxLength - size);
 80021f6:	f1a8 0006 	sub.w	r0, r8, #6
 80021fa:	b200      	sxth	r0, r0
     rxData = rxData+size;
 80021fc:	1dae      	adds	r6, r5, #6
      retVal = MCP_ERROR_RO_REG;
 80021fe:	2204      	movs	r2, #4
 8002200:	e722      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
 8002202:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 8002206:	f1be 0f18 	cmp.w	lr, #24
 800220a:	d1dc      	bne.n	80021c6 <RI_SetRegCommandParser+0x20a>
 800220c:	e7f3      	b.n	80021f6 <RI_SetRegCommandParser+0x23a>
 800220e:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
 8002212:	d003      	beq.n	800221c <RI_SetRegCommandParser+0x260>
 8002214:	d923      	bls.n	800225e <RI_SetRegCommandParser+0x2a2>
 8002216:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 800221a:	d11a      	bne.n	8002252 <RI_SetRegCommandParser+0x296>
     rxLength = (int16_t) (rxLength - size);
 800221c:	f1a8 0004 	sub.w	r0, r8, #4
 8002220:	b200      	sxth	r0, r0
     rxData = rxData+size;
 8002222:	1d2e      	adds	r6, r5, #4
      retVal = MCP_ERROR_RO_REG;
 8002224:	2204      	movs	r2, #4
     break;
 8002226:	e70f      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
 8002228:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 800222c:	f000 817b 	beq.w	8002526 <RI_SetRegCommandParser+0x56a>
 8002230:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 8002234:	d118      	bne.n	8002268 <RI_SetRegCommandParser+0x2ac>
      PID_SetKI(pPIDId[motorID], regdata16);
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <RI_SetRegCommandParser+0x2c0>)
 8002238:	9a01      	ldr	r2, [sp, #4]
 800223a:	b209      	sxth	r1, r1
 800223c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002240:	f003 fe9a 	bl	8005f78 <PID_SetKI>
     rxLength = (int16_t) (rxLength - size);
 8002244:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <RI_SetRegCommandParser+0x2b8>)
     rxLength = (int16_t) (rxLength - size);
 800224a:	b200      	sxth	r0, r0
     rxData = rxData+size;
 800224c:	1d2e      	adds	r6, r5, #4
  uint8_t retVal = MCP_CMD_OK;
 800224e:	2200      	movs	r2, #0
      break;
 8002250:	e6fa      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
 8002252:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 8002256:	f5be 6ff2 	cmp.w	lr, #1936	; 0x790
 800225a:	d0df      	beq.n	800221c <RI_SetRegCommandParser+0x260>
 800225c:	e004      	b.n	8002268 <RI_SetRegCommandParser+0x2ac>
 800225e:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 8002262:	f5be 6fb2 	cmp.w	lr, #1424	; 0x590
 8002266:	d0d9      	beq.n	800221c <RI_SetRegCommandParser+0x260>
     rxLength = (int16_t) (rxLength - size);
 8002268:	f1a8 0004 	sub.w	r0, r8, #4
 800226c:	b200      	sxth	r0, r0
     rxData = rxData+size;
 800226e:	1d2e      	adds	r6, r5, #4
      retVal = MCP_ERROR_UNKNOWN_REG;
 8002270:	2205      	movs	r2, #5
 8002272:	e6e9      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
 8002274:	20000770 	.word	0x20000770
 8002278:	20000464 	.word	0x20000464
 800227c:	20000444 	.word	0x20000444
 8002280:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 8002284:	f000 8141 	beq.w	800250a <RI_SetRegCommandParser+0x54e>
 8002288:	d940      	bls.n	800230c <RI_SetRegCommandParser+0x350>
 800228a:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800228e:	f000 817b 	beq.w	8002588 <RI_SetRegCommandParser+0x5cc>
 8002292:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 8002296:	d1e7      	bne.n	8002268 <RI_SetRegCommandParser+0x2ac>
      PID_SetKI(pPIDIq[motorID], regdata16);
 8002298:	4aae      	ldr	r2, [pc, #696]	; (8002554 <RI_SetRegCommandParser+0x598>)
 800229a:	b209      	sxth	r1, r1
     rxData = rxData+size;
 800229c:	1d2e      	adds	r6, r5, #4
      PID_SetKI(pPIDIq[motorID], regdata16);
 800229e:	9b01      	ldr	r3, [sp, #4]
 80022a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022a4:	f003 fe68 	bl	8005f78 <PID_SetKI>
     rxLength = (int16_t) (rxLength - size);
 80022a8:	f1a8 0004 	sub.w	r0, r8, #4
     break;
 80022ac:	4baa      	ldr	r3, [pc, #680]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 80022ae:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80022b0:	2200      	movs	r2, #0
     break;
 80022b2:	e6c9      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
 80022b4:	f241 5010 	movw	r0, #5392	; 0x1510
 80022b8:	4282      	cmp	r2, r0
 80022ba:	f000 810f 	beq.w	80024dc <RI_SetRegCommandParser+0x520>
 80022be:	d93e      	bls.n	800233e <RI_SetRegCommandParser+0x382>
 80022c0:	f241 50d0 	movw	r0, #5584	; 0x15d0
 80022c4:	4282      	cmp	r2, r0
 80022c6:	f000 8110 	beq.w	80024ea <RI_SetRegCommandParser+0x52e>
 80022ca:	d928      	bls.n	800231e <RI_SetRegCommandParser+0x362>
 80022cc:	f241 6010 	movw	r0, #5648	; 0x1610
 80022d0:	4282      	cmp	r2, r0
 80022d2:	f000 8149 	beq.w	8002568 <RI_SetRegCommandParser+0x5ac>
 80022d6:	f241 6050 	movw	r0, #5712	; 0x1650
 80022da:	4282      	cmp	r2, r0
 80022dc:	d1c4      	bne.n	8002268 <RI_SetRegCommandParser+0x2ac>
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 80022de:	4a9d      	ldr	r2, [pc, #628]	; (8002554 <RI_SetRegCommandParser+0x598>)
     rxData = rxData+size;
 80022e0:	1d2e      	adds	r6, r5, #4
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 80022e2:	9b01      	ldr	r3, [sp, #4]
 80022e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022e8:	f003 fe82 	bl	8005ff0 <PID_SetKDDivisorPOW2>
     rxLength = (int16_t) (rxLength - size);
 80022ec:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 80022f0:	4b99      	ldr	r3, [pc, #612]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 80022f2:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80022f4:	2200      	movs	r2, #0
      break;
 80022f6:	e6a7      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
 80022f8:	d8b6      	bhi.n	8002268 <RI_SetRegCommandParser+0x2ac>
 80022fa:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 80022fe:	d08d      	beq.n	800221c <RI_SetRegCommandParser+0x260>
 8002300:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 8002304:	f5be 6f09 	cmp.w	lr, #2192	; 0x890
 8002308:	d088      	beq.n	800221c <RI_SetRegCommandParser+0x260>
 800230a:	e7ad      	b.n	8002268 <RI_SetRegCommandParser+0x2ac>
 800230c:	2a90      	cmp	r2, #144	; 0x90
 800230e:	f000 8112 	beq.w	8002536 <RI_SetRegCommandParser+0x57a>
 8002312:	2ad0      	cmp	r2, #208	; 0xd0
 8002314:	d1a8      	bne.n	8002268 <RI_SetRegCommandParser+0x2ac>
      PID_SetKI(pPIDSpeed[motorID], regdata16);
 8002316:	4a91      	ldr	r2, [pc, #580]	; (800255c <RI_SetRegCommandParser+0x5a0>)
 8002318:	b209      	sxth	r1, r1
     rxData = rxData+size;
 800231a:	1d2e      	adds	r6, r5, #4
 800231c:	e7bf      	b.n	800229e <RI_SetRegCommandParser+0x2e2>
 800231e:	f241 5050 	movw	r0, #5456	; 0x1550
 8002322:	4282      	cmp	r2, r0
 8002324:	f000 8134 	beq.w	8002590 <RI_SetRegCommandParser+0x5d4>
 8002328:	f241 5090 	movw	r0, #5520	; 0x1590
 800232c:	4282      	cmp	r2, r0
 800232e:	d19b      	bne.n	8002268 <RI_SetRegCommandParser+0x2ac>
      PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002330:	4b8b      	ldr	r3, [pc, #556]	; (8002560 <RI_SetRegCommandParser+0x5a4>)
 8002332:	9a01      	ldr	r2, [sp, #4]
 8002334:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002338:	f003 fe5a 	bl	8005ff0 <PID_SetKDDivisorPOW2>
 800233c:	e782      	b.n	8002244 <RI_SetRegCommandParser+0x288>
 800233e:	f241 4050 	movw	r0, #5200	; 0x1450
 8002342:	4282      	cmp	r2, r0
 8002344:	f000 80de 	beq.w	8002504 <RI_SetRegCommandParser+0x548>
 8002348:	d90b      	bls.n	8002362 <RI_SetRegCommandParser+0x3a6>
 800234a:	f241 4090 	movw	r0, #5264	; 0x1490
 800234e:	4282      	cmp	r2, r0
 8002350:	f000 8117 	beq.w	8002582 <RI_SetRegCommandParser+0x5c6>
 8002354:	f241 40d0 	movw	r0, #5328	; 0x14d0
 8002358:	4282      	cmp	r2, r0
 800235a:	d185      	bne.n	8002268 <RI_SetRegCommandParser+0x2ac>
      PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800235c:	4a7f      	ldr	r2, [pc, #508]	; (800255c <RI_SetRegCommandParser+0x5a0>)
     rxData = rxData+size;
 800235e:	1d2e      	adds	r6, r5, #4
 8002360:	e7bf      	b.n	80022e2 <RI_SetRegCommandParser+0x326>
 8002362:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 8002366:	d003      	beq.n	8002370 <RI_SetRegCommandParser+0x3b4>
 8002368:	d908      	bls.n	800237c <RI_SetRegCommandParser+0x3c0>
 800236a:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 800236e:	d113      	bne.n	8002398 <RI_SetRegCommandParser+0x3dc>
     rxLength = (int16_t) (rxLength - size);
 8002370:	f1a8 0004 	sub.w	r0, r8, #4
 8002374:	b200      	sxth	r0, r0
     rxData = rxData+size;
 8002376:	1d2e      	adds	r6, r5, #4
  uint8_t retVal = MCP_CMD_OK;
 8002378:	2200      	movs	r2, #0
 800237a:	e665      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
 800237c:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 8002380:	f43f af4c 	beq.w	800221c <RI_SetRegCommandParser+0x260>
 8002384:	d913      	bls.n	80023ae <RI_SetRegCommandParser+0x3f2>
 8002386:	f5b2 6f2d 	cmp.w	r2, #2768	; 0xad0
 800238a:	f43f af47 	beq.w	800221c <RI_SetRegCommandParser+0x260>
 800238e:	f5b2 6f31 	cmp.w	r2, #2832	; 0xb10
 8002392:	f43f af43 	beq.w	800221c <RI_SetRegCommandParser+0x260>
 8002396:	e767      	b.n	8002268 <RI_SetRegCommandParser+0x2ac>
 8002398:	f4ff af66 	bcc.w	8002268 <RI_SetRegCommandParser+0x2ac>
 800239c:	f5b2 6f6d 	cmp.w	r2, #3792	; 0xed0
 80023a0:	f43f af3c 	beq.w	800221c <RI_SetRegCommandParser+0x260>
 80023a4:	f5b2 6f71 	cmp.w	r2, #3856	; 0xf10
 80023a8:	f43f af38 	beq.w	800221c <RI_SetRegCommandParser+0x260>
 80023ac:	e75c      	b.n	8002268 <RI_SetRegCommandParser+0x2ac>
 80023ae:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 80023b2:	f5be 6f21 	cmp.w	lr, #2576	; 0xa10
 80023b6:	f43f af31 	beq.w	800221c <RI_SetRegCommandParser+0x260>
 80023ba:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 80023be:	f43f af2d 	beq.w	800221c <RI_SetRegCommandParser+0x260>
 80023c2:	e751      	b.n	8002268 <RI_SetRegCommandParser+0x2ac>
 80023c4:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 80023c8:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 80023cc:	f43f ae93 	beq.w	80020f6 <RI_SetRegCommandParser+0x13a>
     rxLength = (int16_t) (rxLength - size);
 80023d0:	ebaa 0008 	sub.w	r0, sl, r8
     rxData = rxData+size;
 80023d4:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 80023d6:	b200      	sxth	r0, r0
          retVal = MCP_ERROR_UNKNOWN_REG;
 80023d8:	2205      	movs	r2, #5
 80023da:	e635      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80023dc:	2a0a      	cmp	r2, #10
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80023de:	f04f 0201 	mov.w	r2, #1
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80023e2:	f43f aef7 	beq.w	80021d4 <RI_SetRegCommandParser+0x218>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80023e6:	9203      	str	r2, [sp, #12]
 80023e8:	e641      	b.n	800206e <RI_SetRegCommandParser+0xb2>
     rxLength = (int16_t) (rxLength - size);
 80023ea:	ebaa 0002 	sub.w	r0, sl, r2
     rxData = rxData+size;
 80023ee:	4416      	add	r6, r2
     rxLength = (int16_t) (rxLength - size);
 80023f0:	b200      	sxth	r0, r0
      retVal = MCP_ERROR_RO_REG;
 80023f2:	2204      	movs	r2, #4
 80023f4:	e628      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
     rxLength = (int16_t) (rxLength - size);
 80023f6:	f1a8 0003 	sub.w	r0, r8, #3
 80023fa:	b200      	sxth	r0, r0
     rxData = rxData+size;
 80023fc:	1cee      	adds	r6, r5, #3
      retVal = MCP_ERROR_RO_REG;
 80023fe:	2204      	movs	r2, #4
 8002400:	e622      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002402:	220a      	movs	r2, #10
 8002404:	e620      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((regdata32*SPEED_UNIT)/_RPM),0);
 8002406:	f8d5 2002 	ldr.w	r2, [r5, #2]
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <RI_SetRegCommandParser+0x5a8>)
 800240c:	fb83 3102 	smull	r3, r1, r3, r2
 8002410:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8002414:	4620      	mov	r0, r4
 8002416:	2200      	movs	r2, #0
 8002418:	b209      	sxth	r1, r1
 800241a:	f7fe feab 	bl	8001174 <MCI_ExecSpeedRamp>
     rxLength = (int16_t) (rxLength - size);
 800241e:	f1a8 0006 	sub.w	r0, r8, #6
      break;
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 8002424:	1dae      	adds	r6, r5, #6
     rxLength = (int16_t) (rxLength - size);
 8002426:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002428:	2200      	movs	r2, #0
      break;
 800242a:	e60d      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
    uint8_t regdata8 = *data;
 800242c:	78aa      	ldrb	r2, [r5, #2]
        if ((STC_Modality_t)regdata8 == STC_TORQUE_MODE)
 800242e:	b13a      	cbz	r2, 8002440 <RI_SetRegCommandParser+0x484>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 8002430:	2a01      	cmp	r2, #1
 8002432:	d040      	beq.n	80024b6 <RI_SetRegCommandParser+0x4fa>
     rxLength = (int16_t) (rxLength - size);
 8002434:	f1a8 0003 	sub.w	r0, r8, #3
 8002438:	b200      	sxth	r0, r0
     rxData = rxData+size;
 800243a:	1cee      	adds	r6, r5, #3
  uint8_t retVal = MCP_CMD_OK;
 800243c:	2200      	movs	r2, #0
 800243e:	e603      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
          MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002440:	4620      	mov	r0, r4
 8002442:	9201      	str	r2, [sp, #4]
 8002444:	f7fe ff7a 	bl	800133c <MCI_GetTeref>
 8002448:	9a01      	ldr	r2, [sp, #4]
 800244a:	4601      	mov	r1, r0
 800244c:	4620      	mov	r0, r4
 800244e:	f7fe fe9b 	bl	8001188 <MCI_ExecTorqueRamp>
     rxLength = (int16_t) (rxLength - size);
 8002452:	f1a8 0003 	sub.w	r0, r8, #3
 8002456:	9a01      	ldr	r2, [sp, #4]
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 800245a:	1cee      	adds	r6, r5, #3
     rxLength = (int16_t) (rxLength - size);
 800245c:	b200      	sxth	r0, r0
 800245e:	e5f3      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
            MCI_ExecSpeedRamp(pMCI,(int16_t)((rpm*SPEED_UNIT)/_RPM),duration);
 8002460:	4b40      	ldr	r3, [pc, #256]	; (8002564 <RI_SetRegCommandParser+0x5a8>)
 8002462:	892a      	ldrh	r2, [r5, #8]
 8002464:	4620      	mov	r0, r4
 8002466:	686c      	ldr	r4, [r5, #4]
 8002468:	fb83 3104 	smull	r3, r1, r3, r4
 800246c:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002470:	b209      	sxth	r1, r1
 8002472:	f7fe fe7f 	bl	8001174 <MCI_ExecSpeedRamp>
     rxLength = (int16_t) (rxLength - size);
 8002476:	ebaa 0008 	sub.w	r0, sl, r8
          break;
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 800247c:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 800247e:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002480:	2200      	movs	r2, #0
          break;
 8002482:	e5e1      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
            currComp.q = *((uint16_t *) rawData);
 8002484:	6869      	ldr	r1, [r5, #4]
 8002486:	9105      	str	r1, [sp, #20]
            MCI_SetCurrentReferences(pMCI,currComp);
 8002488:	4620      	mov	r0, r4
 800248a:	f7fe fe87 	bl	800119c <MCI_SetCurrentReferences>
     rxLength = (int16_t) (rxLength - size);
 800248e:	ebaa 0008 	sub.w	r0, sl, r8
          break;
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 8002494:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 8002496:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002498:	2200      	movs	r2, #0
          break;
 800249a:	e5d5      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
            MCI_ExecTorqueRamp(pMCI,torque,duration);
 800249c:	892a      	ldrh	r2, [r5, #8]
 800249e:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7fe fe70 	bl	8001188 <MCI_ExecTorqueRamp>
     rxLength = (int16_t) (rxLength - size);
 80024a8:	ebaa 0008 	sub.w	r0, sl, r8
          break;
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 80024ae:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 80024b0:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80024b2:	2200      	movs	r2, #0
          break;
 80024b4:	e5c8      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
          MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7fe fee8 	bl	800128c <MCI_GetMecSpeedRefUnit>
 80024bc:	2200      	movs	r2, #0
 80024be:	4601      	mov	r1, r0
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7fe fe57 	bl	8001174 <MCI_ExecSpeedRamp>
     rxLength = (int16_t) (rxLength - size);
 80024c6:	f1a8 0003 	sub.w	r0, r8, #3
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 80024cc:	1cee      	adds	r6, r5, #3
     rxLength = (int16_t) (rxLength - size);
 80024ce:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80024d0:	2200      	movs	r2, #0
 80024d2:	e5b9      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
  while ((*srcString != 0) && (*size < maxSize) )
 80024d4:	2101      	movs	r1, #1
 80024d6:	46b4      	mov	ip, r6
  *size= 1 ; /* /0 is the min String size */
 80024d8:	460a      	mov	r2, r1
 80024da:	e627      	b.n	800212c <RI_SetRegCommandParser+0x170>
      PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 80024dc:	4b20      	ldr	r3, [pc, #128]	; (8002560 <RI_SetRegCommandParser+0x5a4>)
 80024de:	9a01      	ldr	r2, [sp, #4]
 80024e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80024e4:	f003 fd58 	bl	8005f98 <PID_SetKPDivisorPOW2>
      break;
 80024e8:	e6ac      	b.n	8002244 <RI_SetRegCommandParser+0x288>
      PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 80024ea:	4a1a      	ldr	r2, [pc, #104]	; (8002554 <RI_SetRegCommandParser+0x598>)
     rxData = rxData+size;
 80024ec:	1d2e      	adds	r6, r5, #4
      PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 80024ee:	9b01      	ldr	r3, [sp, #4]
 80024f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024f4:	f003 fd50 	bl	8005f98 <PID_SetKPDivisorPOW2>
     rxLength = (int16_t) (rxLength - size);
 80024f8:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 80024fe:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002500:	2200      	movs	r2, #0
      break;
 8002502:	e5a1      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
      PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <RI_SetRegCommandParser+0x5a0>)
     rxData = rxData+size;
 8002506:	1d2e      	adds	r6, r5, #4
 8002508:	e7f1      	b.n	80024ee <RI_SetRegCommandParser+0x532>
      PID_SetKD(pPIDSpeed[motorID], regdata16);
 800250a:	4a14      	ldr	r2, [pc, #80]	; (800255c <RI_SetRegCommandParser+0x5a0>)
 800250c:	b209      	sxth	r1, r1
     rxData = rxData+size;
 800250e:	1d2e      	adds	r6, r5, #4
      PID_SetKD(pPIDIq[motorID], regdata16);
 8002510:	9b01      	ldr	r3, [sp, #4]
 8002512:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002516:	f003 fd61 	bl	8005fdc <PID_SetKD>
     rxLength = (int16_t) (rxLength - size);
 800251a:	f1a8 0004 	sub.w	r0, r8, #4
     break;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 8002520:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002522:	2200      	movs	r2, #0
     break;
 8002524:	e590      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
      PID_SetKP(pPIDId[motorID], regdata16);
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <RI_SetRegCommandParser+0x5a4>)
 8002528:	9a01      	ldr	r2, [sp, #4]
 800252a:	b209      	sxth	r1, r1
 800252c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002530:	f003 fd20 	bl	8005f74 <PID_SetKP>
     break;
 8002534:	e686      	b.n	8002244 <RI_SetRegCommandParser+0x288>
      PID_SetKP(pPIDSpeed[motorID], regdata16);
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <RI_SetRegCommandParser+0x5a0>)
 8002538:	b209      	sxth	r1, r1
     rxData = rxData+size;
 800253a:	1d2e      	adds	r6, r5, #4
      PID_SetKP(pPIDIq[motorID], regdata16);
 800253c:	9b01      	ldr	r3, [sp, #4]
 800253e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002542:	f003 fd17 	bl	8005f74 <PID_SetKP>
     rxLength = (int16_t) (rxLength - size);
 8002546:	f1a8 0004 	sub.w	r0, r8, #4
     break;
 800254a:	4b03      	ldr	r3, [pc, #12]	; (8002558 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 800254c:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800254e:	2200      	movs	r2, #0
     break;
 8002550:	e57a      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
 8002552:	bf00      	nop
 8002554:	20000448 	.word	0x20000448
 8002558:	20000770 	.word	0x20000770
 800255c:	20000528 	.word	0x20000528
 8002560:	20000444 	.word	0x20000444
 8002564:	2aaaaaab 	.word	0x2aaaaaab
      PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002568:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <RI_SetRegCommandParser+0x614>)
     rxData = rxData+size;
 800256a:	1d2e      	adds	r6, r5, #4
      PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 800256c:	9b01      	ldr	r3, [sp, #4]
 800256e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002572:	f003 fd1f 	bl	8005fb4 <PID_SetKIDivisorPOW2>
     rxLength = (int16_t) (rxLength - size);
 8002576:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <RI_SetRegCommandParser+0x618>)
     rxLength = (int16_t) (rxLength - size);
 800257c:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800257e:	2200      	movs	r2, #0
      break;
 8002580:	e562      	b.n	8002048 <RI_SetRegCommandParser+0x8c>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002582:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <RI_SetRegCommandParser+0x61c>)
     rxData = rxData+size;
 8002584:	1d2e      	adds	r6, r5, #4
 8002586:	e7f1      	b.n	800256c <RI_SetRegCommandParser+0x5b0>
      PID_SetKP(pPIDIq[motorID], regdata16);
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <RI_SetRegCommandParser+0x614>)
 800258a:	b209      	sxth	r1, r1
     rxData = rxData+size;
 800258c:	1d2e      	adds	r6, r5, #4
 800258e:	e7d5      	b.n	800253c <RI_SetRegCommandParser+0x580>
      PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <RI_SetRegCommandParser+0x620>)
 8002592:	9a01      	ldr	r2, [sp, #4]
 8002594:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002598:	f003 fd0c 	bl	8005fb4 <PID_SetKIDivisorPOW2>
      break;
 800259c:	e652      	b.n	8002244 <RI_SetRegCommandParser+0x288>
      PID_SetKD(pPIDIq[motorID], regdata16);
 800259e:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <RI_SetRegCommandParser+0x614>)
 80025a0:	b209      	sxth	r1, r1
     rxData = rxData+size;
 80025a2:	1d2e      	adds	r6, r5, #4
 80025a4:	e7b4      	b.n	8002510 <RI_SetRegCommandParser+0x554>
      PID_SetKD(pPIDId[motorID], regdata16);
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <RI_SetRegCommandParser+0x620>)
 80025a8:	9a01      	ldr	r2, [sp, #4]
 80025aa:	b209      	sxth	r1, r1
 80025ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80025b0:	f003 fd14 	bl	8005fdc <PID_SetKD>
     break;
 80025b4:	e646      	b.n	8002244 <RI_SetRegCommandParser+0x288>
        currComp = MCI_GetIqdref(pMCI);
 80025b6:	4620      	mov	r0, r4
 80025b8:	9101      	str	r1, [sp, #4]
 80025ba:	f7fe fe95 	bl	80012e8 <MCI_GetIqdref>
        currComp.d = regdata16;
 80025be:	9901      	ldr	r1, [sp, #4]
        currComp = MCI_GetIqdref(pMCI);
 80025c0:	9005      	str	r0, [sp, #20]
     rxData = rxData+size;
 80025c2:	1d2e      	adds	r6, r5, #4
        currComp.d = regdata16;
 80025c4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80025c8:	e5dc      	b.n	8002184 <RI_SetRegCommandParser+0x1c8>
 80025ca:	9a03      	ldr	r2, [sp, #12]
 80025cc:	e57c      	b.n	80020c8 <RI_SetRegCommandParser+0x10c>
 80025ce:	bf00      	nop
 80025d0:	20000448 	.word	0x20000448
 80025d4:	20000770 	.word	0x20000770
 80025d8:	20000528 	.word	0x20000528
 80025dc:	20000444 	.word	0x20000444

080025e0 <RI_GetRegCommandParser>:
{
 80025e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t rxLength = pHandle->rxLength;
 80025e4:	f8b0 900c 	ldrh.w	r9, [r0, #12]
  uint8_t * rxData = pHandle->rxBuffer;
 80025e8:	f8d0 a004 	ldr.w	sl, [r0, #4]
  uint8_t * txData = pHandle->txBuffer;
 80025ec:	6886      	ldr	r6, [r0, #8]
  pHandle->txLength = 0;
 80025ee:	2300      	movs	r3, #0
{
 80025f0:	b08f      	sub	sp, #60	; 0x3c
  pHandle->txLength = 0;
 80025f2:	81c3      	strh	r3, [r0, #14]
  while (rxLength > 0)
 80025f4:	f1b9 0f00 	cmp.w	r9, #0
 80025f8:	f000 82d7 	beq.w	8002baa <RI_GetRegCommandParser+0x5ca>
 80025fc:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8002888 <RI_GetRegCommandParser+0x2a8>
 8002600:	4607      	mov	r7, r0
 8002602:	b20c      	sxth	r4, r1
  uint8_t * rxData = pHandle->rxBuffer;
 8002604:	4655      	mov	r5, sl
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002606:	f835 2b02 	ldrh.w	r2, [r5], #2
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 800260a:	f002 0107 	and.w	r1, r2, #7
 800260e:	3901      	subs	r1, #1
  uint16_t regID = dataID & REG_MASK;
 8002610:	f022 0307 	bic.w	r3, r2, #7
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002614:	fa5f fc81 	uxtb.w	ip, r1
  switch (typeID)
 8002618:	f002 0238 	and.w	r2, r2, #56	; 0x38
  MCI_Handle_t * pMCI = &Mci[motorID];
 800261c:	ebcc 00cc 	rsb	r0, ip, ip, lsl #3
  switch (typeID)
 8002620:	3a08      	subs	r2, #8
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002622:	4661      	mov	r1, ip
  uint16_t regID = dataID & REG_MASK;
 8002624:	b29b      	uxth	r3, r3
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002626:	eb08 0b80 	add.w	fp, r8, r0, lsl #2
  switch (typeID)
 800262a:	2a20      	cmp	r2, #32
 800262c:	d812      	bhi.n	8002654 <RI_GetRegCommandParser+0x74>
 800262e:	e8df f002 	tbb	[pc, r2]
 8002632:	119e      	.short	0x119e
 8002634:	11111111 	.word	0x11111111
 8002638:	11611111 	.word	0x11611111
 800263c:	11111111 	.word	0x11111111
 8002640:	11a81111 	.word	0x11a81111
 8002644:	11111111 	.word	0x11111111
 8002648:	112c1111 	.word	0x112c1111
 800264c:	11111111 	.word	0x11111111
 8002650:	1111      	.short	0x1111
 8002652:	15          	.byte	0x15
 8002653:	00          	.byte	0x00
 8002654:	2007      	movs	r0, #7
}
 8002656:	b00f      	add	sp, #60	; 0x3c
 8002658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uint8_t * rawData = data+2;
 800265c:	2be8      	cmp	r3, #232	; 0xe8
 800265e:	f106 0202 	add.w	r2, r6, #2
      switch (regID)
 8002662:	f000 826b 	beq.w	8002b3c <RI_GetRegCommandParser+0x55c>
 8002666:	f200 80b3 	bhi.w	80027d0 <RI_GetRegCommandParser+0x1f0>
 800266a:	2b68      	cmp	r3, #104	; 0x68
 800266c:	f000 8279 	beq.w	8002b62 <RI_GetRegCommandParser+0x582>
 8002670:	2ba8      	cmp	r3, #168	; 0xa8
 8002672:	f040 809c 	bne.w	80027ae <RI_GetRegCommandParser+0x1ce>
        *rawSize = sizeof(ApplicationConfig_reg_t);
 8002676:	f04f 030e 	mov.w	r3, #14
        if ((*rawSize) +2  > freeSpace)
 800267a:	2c0f      	cmp	r4, #15
        *rawSize = sizeof(ApplicationConfig_reg_t);
 800267c:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 800267e:	f300 823d 	bgt.w	8002afc <RI_GetRegCommandParser+0x51c>
        retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002682:	2008      	movs	r0, #8
}
 8002684:	b00f      	add	sp, #60	; 0x3c
 8002686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (regID)
 800268a:	2ba0      	cmp	r3, #160	; 0xa0
 800268c:	f000 81f9 	beq.w	8002a82 <RI_GetRegCommandParser+0x4a2>
 8002690:	f200 80b8 	bhi.w	8002804 <RI_GetRegCommandParser+0x224>
 8002694:	2b20      	cmp	r3, #32
 8002696:	f000 820d 	beq.w	8002ab4 <RI_GetRegCommandParser+0x4d4>
 800269a:	2b60      	cmp	r3, #96	; 0x60
 800269c:	d16f      	bne.n	800277e <RI_GetRegCommandParser+0x19e>
  while ((*srcString != 0) && (*size < maxSize) )
 800269e:	4b7b      	ldr	r3, [pc, #492]	; (800288c <RI_GetRegCommandParser+0x2ac>)
 80026a0:	7818      	ldrb	r0, [r3, #0]
 80026a2:	2800      	cmp	r0, #0
 80026a4:	f000 823c 	beq.w	8002b20 <RI_GetRegCommandParser+0x540>
 80026a8:	2c01      	cmp	r4, #1
 80026aa:	f340 81dd 	ble.w	8002a68 <RI_GetRegCommandParser+0x488>
 80026ae:	469e      	mov	lr, r3
 80026b0:	46b4      	mov	ip, r6
 80026b2:	f1c6 0101 	rsb	r1, r6, #1
 80026b6:	e002      	b.n	80026be <RI_GetRegCommandParser+0xde>
 80026b8:	429c      	cmp	r4, r3
 80026ba:	f340 81d5 	ble.w	8002a68 <RI_GetRegCommandParser+0x488>
    *destString = *srcString ;
 80026be:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*srcString != 0) && (*size < maxSize) )
 80026c2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 80026c6:	eb0c 0301 	add.w	r3, ip, r1
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2800      	cmp	r0, #0
 80026ce:	d1f3      	bne.n	80026b8 <RI_GetRegCommandParser+0xd8>
       txData = txData+size;
 80026d0:	4619      	mov	r1, r3
    *destString = 0;
 80026d2:	2200      	movs	r2, #0
 80026d4:	f88c 2000 	strb.w	r2, [ip]
       pHandle->txLength += size;
 80026d8:	89fa      	ldrh	r2, [r7, #14]
       freeSpaceS16 = freeSpaceS16-size;
 80026da:	1ae4      	subs	r4, r4, r3
       pHandle->txLength += size;
 80026dc:	441a      	add	r2, r3
  while (rxLength > 0)
 80026de:	eb0a 0309 	add.w	r3, sl, r9
 80026e2:	b29b      	uxth	r3, r3
       pHandle->txLength += size;
 80026e4:	81fa      	strh	r2, [r7, #14]
  while (rxLength > 0)
 80026e6:	b2aa      	uxth	r2, r5
 80026e8:	429a      	cmp	r2, r3
       txData = txData+size;
 80026ea:	440e      	add	r6, r1
       freeSpaceS16 = freeSpaceS16-size;
 80026ec:	b224      	sxth	r4, r4
  while (rxLength > 0)
 80026ee:	d18a      	bne.n	8002606 <RI_GetRegCommandParser+0x26>
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 80026f0:	2000      	movs	r0, #0
 80026f2:	e7b0      	b.n	8002656 <RI_GetRegCommandParser+0x76>
      if (freeSpace >= 2 )
 80026f4:	2c01      	cmp	r4, #1
 80026f6:	ddc4      	ble.n	8002682 <RI_GetRegCommandParser+0xa2>
        switch (regID)
 80026f8:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80026fc:	f000 8259 	beq.w	8002bb2 <RI_GetRegCommandParser+0x5d2>
 8002700:	f200 80e1 	bhi.w	80028c6 <RI_GetRegCommandParser+0x2e6>
 8002704:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8002708:	f000 82b5 	beq.w	8002c76 <RI_GetRegCommandParser+0x696>
 800270c:	d917      	bls.n	800273e <RI_GetRegCommandParser+0x15e>
 800270e:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002712:	f000 82a8 	beq.w	8002c66 <RI_GetRegCommandParser+0x686>
 8002716:	f240 80c3 	bls.w	80028a0 <RI_GetRegCommandParser+0x2c0>
 800271a:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 800271e:	f000 829a 	beq.w	8002c56 <RI_GetRegCommandParser+0x676>
 8002722:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002726:	f040 80a1 	bne.w	800286c <RI_GetRegCommandParser+0x28c>
          *regdata16 = MCI_GetIqd(pMCI).d;
 800272a:	4658      	mov	r0, fp
 800272c:	f7fe fdce 	bl	80012cc <MCI_GetIqd>
         break;
 8002730:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIqd(pMCI).d;
 8002732:	9008      	str	r0, [sp, #32]
 8002734:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002738:	8030      	strh	r0, [r6, #0]
        *size = 2;
 800273a:	460b      	mov	r3, r1
         break;
 800273c:	e7cc      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 800273e:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8002742:	f000 8286 	beq.w	8002c52 <RI_GetRegCommandParser+0x672>
 8002746:	f240 80fe 	bls.w	8002946 <RI_GetRegCommandParser+0x366>
 800274a:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 800274e:	f000 82a7 	beq.w	8002ca0 <RI_GetRegCommandParser+0x6c0>
 8002752:	f240 80d6 	bls.w	8002902 <RI_GetRegCommandParser+0x322>
 8002756:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800275a:	d110      	bne.n	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <RI_GetRegCommandParser+0x2b0>)
 800275e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002762:	f003 fc3d 	bl	8005fe0 <PID_GetKD>
         break;
 8002766:	2102      	movs	r1, #2
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8002768:	8030      	strh	r0, [r6, #0]
        *size = 2;
 800276a:	460b      	mov	r3, r1
         break;
 800276c:	e7b4      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
      if (freeSpace > 0 )
 800276e:	2c00      	cmp	r4, #0
 8002770:	dd87      	ble.n	8002682 <RI_GetRegCommandParser+0xa2>
        switch (regID)
 8002772:	2b48      	cmp	r3, #72	; 0x48
 8002774:	f000 817a 	beq.w	8002a6c <RI_GetRegCommandParser+0x48c>
 8002778:	2b88      	cmp	r3, #136	; 0x88
 800277a:	f000 816e 	beq.w	8002a5a <RI_GetRegCommandParser+0x47a>
 800277e:	2005      	movs	r0, #5
  return retVal;
 8002780:	e769      	b.n	8002656 <RI_GetRegCommandParser+0x76>
      if ( freeSpace >= 4)
 8002782:	2c03      	cmp	r4, #3
 8002784:	f77f af7d 	ble.w	8002682 <RI_GetRegCommandParser+0xa2>
        switch (regID)
 8002788:	2b58      	cmp	r3, #88	; 0x58
 800278a:	f000 81b3 	beq.w	8002af4 <RI_GetRegCommandParser+0x514>
 800278e:	2b98      	cmp	r3, #152	; 0x98
 8002790:	f000 81a6 	beq.w	8002ae0 <RI_GetRegCommandParser+0x500>
 8002794:	2b18      	cmp	r3, #24
 8002796:	d1f2      	bne.n	800277e <RI_GetRegCommandParser+0x19e>
          *regdataU32 = STM_GetFaultState(&STM[motorID]);
 8002798:	483e      	ldr	r0, [pc, #248]	; (8002894 <RI_GetRegCommandParser+0x2b4>)
 800279a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800279e:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 80027a2:	f004 fc77 	bl	8007094 <STM_GetFaultState>
 80027a6:	2104      	movs	r1, #4
 80027a8:	6030      	str	r0, [r6, #0]
        *size = 4;
 80027aa:	460b      	mov	r3, r1
 80027ac:	e794      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 80027ae:	2b28      	cmp	r3, #40	; 0x28
 80027b0:	d1e5      	bne.n	800277e <RI_GetRegCommandParser+0x19e>
        *rawSize = sizeof(GlobalConfig_reg_t);
 80027b2:	230a      	movs	r3, #10
        if ((*rawSize) +2  > freeSpace)
 80027b4:	2c0b      	cmp	r4, #11
        *rawSize = sizeof(GlobalConfig_reg_t);
 80027b6:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 80027b8:	f77f af63 	ble.w	8002682 <RI_GetRegCommandParser+0xa2>
          memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t) );
 80027bc:	4b36      	ldr	r3, [pc, #216]	; (8002898 <RI_GetRegCommandParser+0x2b8>)
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	6010      	str	r0, [r2, #0]
 80027c2:	210c      	movs	r1, #12
 80027c4:	6858      	ldr	r0, [r3, #4]
 80027c6:	891b      	ldrh	r3, [r3, #8]
 80027c8:	8113      	strh	r3, [r2, #8]
 80027ca:	6050      	str	r0, [r2, #4]
      *size = (*rawSize)+2;
 80027cc:	460b      	mov	r3, r1
 80027ce:	e783      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 80027d0:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80027d4:	f000 81a8 	beq.w	8002b28 <RI_GetRegCommandParser+0x548>
 80027d8:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80027dc:	d132      	bne.n	8002844 <RI_GetRegCommandParser+0x264>
        *rawSize = 4;
 80027de:	2304      	movs	r3, #4
 80027e0:	8033      	strh	r3, [r6, #0]
        *iqref = MCI_GetIqdref(pMCI).q;
 80027e2:	4658      	mov	r0, fp
 80027e4:	f7fe fd80 	bl	80012e8 <MCI_GetIqdref>
 80027e8:	8070      	strh	r0, [r6, #2]
 80027ea:	9001      	str	r0, [sp, #4]
        *idref = MCI_GetIqdref(pMCI).d;
 80027ec:	4658      	mov	r0, fp
 80027ee:	f7fe fd7b 	bl	80012e8 <MCI_GetIqdref>
 80027f2:	9000      	str	r0, [sp, #0]
 80027f4:	f3c0 400f 	ubfx	r0, r0, #16, #16
      *size = (*rawSize)+2;
 80027f8:	8832      	ldrh	r2, [r6, #0]
        *idref = MCI_GetIqdref(pMCI).d;
 80027fa:	80b0      	strh	r0, [r6, #4]
      *size = (*rawSize)+2;
 80027fc:	3202      	adds	r2, #2
 80027fe:	b293      	uxth	r3, r2
       txData = txData+size;
 8002800:	4619      	mov	r1, r3
 8002802:	e769      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002804:	2be0      	cmp	r3, #224	; 0xe0
 8002806:	d1ba      	bne.n	800277e <RI_GetRegCommandParser+0x19e>
        retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <RI_GetRegCommandParser+0x2bc>)
 800280a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 800280e:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8002812:	2800      	cmp	r0, #0
 8002814:	f000 8184 	beq.w	8002b20 <RI_GetRegCommandParser+0x540>
 8002818:	2c01      	cmp	r4, #1
 800281a:	f340 8125 	ble.w	8002a68 <RI_GetRegCommandParser+0x488>
 800281e:	f103 0e24 	add.w	lr, r3, #36	; 0x24
 8002822:	46b4      	mov	ip, r6
 8002824:	f1c6 0101 	rsb	r1, r6, #1
 8002828:	e002      	b.n	8002830 <RI_GetRegCommandParser+0x250>
 800282a:	42a3      	cmp	r3, r4
 800282c:	f280 811c 	bge.w	8002a68 <RI_GetRegCommandParser+0x488>
    *destString = *srcString ;
 8002830:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002834:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8002838:	eb0c 0301 	add.w	r3, ip, r1
 800283c:	b29b      	uxth	r3, r3
 800283e:	2800      	cmp	r0, #0
 8002840:	d1f3      	bne.n	800282a <RI_GetRegCommandParser+0x24a>
 8002842:	e745      	b.n	80026d0 <RI_GetRegCommandParser+0xf0>
 8002844:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002848:	d199      	bne.n	800277e <RI_GetRegCommandParser+0x19e>
          *rpm = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800284a:	4658      	mov	r0, fp
 800284c:	f7fe fd08 	bl	8001260 <MCI_GetLastRampFinalSpeed>
 8002850:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002854:	0040      	lsls	r0, r0, #1
 8002856:	f8c6 0002 	str.w	r0, [r6, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 800285a:	4658      	mov	r0, fp
 800285c:	f7fe fd08 	bl	8001270 <MCI_GetLastRampFinalDuration>
          *rawSize = 6;
 8002860:	2306      	movs	r3, #6
 8002862:	2108      	movs	r1, #8
 8002864:	8033      	strh	r3, [r6, #0]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002866:	80f0      	strh	r0, [r6, #6]
      *size = (*rawSize)+2;
 8002868:	460b      	mov	r3, r1
 800286a:	e735      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 800286c:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002870:	d185      	bne.n	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8002872:	4658      	mov	r0, fp
 8002874:	f7fe fd1c 	bl	80012b0 <MCI_GetIalphabeta>
         break;
 8002878:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 800287a:	900a      	str	r0, [sp, #40]	; 0x28
 800287c:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002880:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002882:	460b      	mov	r3, r1
         break;
 8002884:	e728      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002886:	bf00      	nop
 8002888:	20000770 	.word	0x20000770
 800288c:	0800723c 	.word	0x0800723c
 8002890:	20000444 	.word	0x20000444
 8002894:	200007a0 	.word	0x200007a0
 8002898:	080072d0 	.word	0x080072d0
 800289c:	2000045c 	.word	0x2000045c
 80028a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028a4:	f000 8191 	beq.w	8002bca <RI_GetRegCommandParser+0x5ea>
 80028a8:	d93c      	bls.n	8002924 <RI_GetRegCommandParser+0x344>
 80028aa:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80028ae:	f47f af66 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = MCI_GetIab(pMCI).b;
 80028b2:	4658      	mov	r0, fp
 80028b4:	f7fe fcee 	bl	8001294 <MCI_GetIab>
         break;
 80028b8:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIab(pMCI).b;
 80028ba:	900c      	str	r0, [sp, #48]	; 0x30
 80028bc:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80028c0:	8030      	strh	r0, [r6, #0]
        *size = 2;
 80028c2:	460b      	mov	r3, r1
         break;
 80028c4:	e708      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 80028c6:	f241 4250 	movw	r2, #5200	; 0x1450
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f000 81a6 	beq.w	8002c1c <RI_GetRegCommandParser+0x63c>
 80028d0:	d966      	bls.n	80029a0 <RI_GetRegCommandParser+0x3c0>
 80028d2:	f241 5290 	movw	r2, #5520	; 0x1590
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f000 81b9 	beq.w	8002c4e <RI_GetRegCommandParser+0x66e>
 80028dc:	d94c      	bls.n	8002978 <RI_GetRegCommandParser+0x398>
 80028de:	f241 6210 	movw	r2, #5648	; 0x1610
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f000 819c 	beq.w	8002c20 <RI_GetRegCommandParser+0x640>
 80028e8:	f241 6250 	movw	r2, #5712	; 0x1650
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d135      	bne.n	800295c <RI_GetRegCommandParser+0x37c>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80028f0:	4bba      	ldr	r3, [pc, #744]	; (8002bdc <RI_GetRegCommandParser+0x5fc>)
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 80028f2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80028f6:	f003 fb77 	bl	8005fe8 <PID_GetKDDivisorPOW2>
 80028fa:	2102      	movs	r1, #2
 80028fc:	8030      	strh	r0, [r6, #0]
        *size = 2;
 80028fe:	460b      	mov	r3, r1
 8002900:	e6ea      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002902:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002906:	f000 8152 	beq.w	8002bae <RI_GetRegCommandParser+0x5ce>
 800290a:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 800290e:	f47f af36 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 8002912:	4bb3      	ldr	r3, [pc, #716]	; (8002be0 <RI_GetRegCommandParser+0x600>)
 8002914:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002918:	f003 fb30 	bl	8005f7c <PID_GetKP>
         break;
 800291c:	2102      	movs	r1, #2
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 800291e:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002920:	460b      	mov	r3, r1
         break;
 8002922:	e6d9      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002924:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8002928:	f000 81bc 	beq.w	8002ca4 <RI_GetRegCommandParser+0x6c4>
 800292c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8002930:	f47f af25 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 8002934:	4bab      	ldr	r3, [pc, #684]	; (8002be4 <RI_GetRegCommandParser+0x604>)
 8002936:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800293a:	f003 fab9 	bl	8005eb0 <MPM_GetAvrgElMotorPowerW>
         break;
 800293e:	2102      	movs	r1, #2
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 8002940:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002942:	460b      	mov	r3, r1
         break;
 8002944:	e6c8      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002946:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800294a:	f000 813c 	beq.w	8002bc6 <RI_GetRegCommandParser+0x5e6>
 800294e:	d965      	bls.n	8002a1c <RI_GetRegCommandParser+0x43c>
 8002950:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002954:	f47f af13 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8002958:	4ba0      	ldr	r3, [pc, #640]	; (8002bdc <RI_GetRegCommandParser+0x5fc>)
 800295a:	e7db      	b.n	8002914 <RI_GetRegCommandParser+0x334>
 800295c:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002960:	4293      	cmp	r3, r2
 8002962:	f47f af0c 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8002966:	4b9d      	ldr	r3, [pc, #628]	; (8002bdc <RI_GetRegCommandParser+0x5fc>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8002968:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800296c:	f003 fb10 	bl	8005f90 <PID_GetKPDivisorPOW2>
 8002970:	2102      	movs	r1, #2
 8002972:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002974:	460b      	mov	r3, r1
 8002976:	e6af      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002978:	f241 5210 	movw	r2, #5392	; 0x1510
 800297c:	4293      	cmp	r3, r2
 800297e:	f000 8120 	beq.w	8002bc2 <RI_GetRegCommandParser+0x5e2>
 8002982:	d924      	bls.n	80029ce <RI_GetRegCommandParser+0x3ee>
 8002984:	f241 5250 	movw	r2, #5456	; 0x1550
 8002988:	4293      	cmp	r3, r2
 800298a:	f47f aef8 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 800298e:	4b94      	ldr	r3, [pc, #592]	; (8002be0 <RI_GetRegCommandParser+0x600>)
 8002990:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002994:	f003 fb06 	bl	8005fa4 <PID_GetKIDivisorPOW2>
 8002998:	2102      	movs	r1, #2
 800299a:	8030      	strh	r0, [r6, #0]
        *size = 2;
 800299c:	460b      	mov	r3, r1
 800299e:	e69b      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 80029a0:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80029a4:	f000 8130 	beq.w	8002c08 <RI_GetRegCommandParser+0x628>
 80029a8:	d927      	bls.n	80029fa <RI_GetRegCommandParser+0x41a>
 80029aa:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 80029ae:	f000 8145 	beq.w	8002c3c <RI_GetRegCommandParser+0x65c>
 80029b2:	d918      	bls.n	80029e6 <RI_GetRegCommandParser+0x406>
 80029b4:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 80029b8:	f47f aee1 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 80029bc:	4b8a      	ldr	r3, [pc, #552]	; (8002be8 <RI_GetRegCommandParser+0x608>)
 80029be:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80029c2:	f004 f9e7 	bl	8006d94 <SPD_GetS16Speed>
 80029c6:	2102      	movs	r1, #2
 80029c8:	8030      	strh	r0, [r6, #0]
        *size = 2;
 80029ca:	460b      	mov	r3, r1
 80029cc:	e684      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 80029ce:	f241 4290 	movw	r2, #5264	; 0x1490
 80029d2:	4293      	cmp	r3, r2
 80029d4:	f000 8130 	beq.w	8002c38 <RI_GetRegCommandParser+0x658>
 80029d8:	f241 42d0 	movw	r2, #5328	; 0x14d0
 80029dc:	4293      	cmp	r3, r2
 80029de:	f47f aece 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 80029e2:	4b82      	ldr	r3, [pc, #520]	; (8002bec <RI_GetRegCommandParser+0x60c>)
 80029e4:	e785      	b.n	80028f2 <RI_GetRegCommandParser+0x312>
 80029e6:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 80029ea:	d003      	beq.n	80029f4 <RI_GetRegCommandParser+0x414>
 80029ec:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 80029f0:	f47f aec5 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
 80029f4:	2102      	movs	r1, #2
 80029f6:	460b      	mov	r3, r1
 80029f8:	e66e      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 80029fa:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80029fe:	f000 8111 	beq.w	8002c24 <RI_GetRegCommandParser+0x644>
 8002a02:	d91a      	bls.n	8002a3a <RI_GetRegCommandParser+0x45a>
 8002a04:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002a08:	f47f aeb9 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8002a0c:	4658      	mov	r0, fp
 8002a0e:	f7fe fc87 	bl	8001320 <MCI_GetValphabeta>
 8002a12:	2102      	movs	r1, #2
 8002a14:	9003      	str	r0, [sp, #12]
        *size = 2;
 8002a16:	460b      	mov	r3, r1
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8002a18:	8030      	strh	r0, [r6, #0]
     if (retVal == MCP_CMD_OK )
 8002a1a:	e65d      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002a1c:	2b90      	cmp	r3, #144	; 0x90
 8002a1e:	f000 8133 	beq.w	8002c88 <RI_GetRegCommandParser+0x6a8>
 8002a22:	2bd0      	cmp	r3, #208	; 0xd0
 8002a24:	f47f aeab 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8002a28:	4b70      	ldr	r3, [pc, #448]	; (8002bec <RI_GetRegCommandParser+0x60c>)
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002a2a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002a2e:	f003 faa9 	bl	8005f84 <PID_GetKI>
         break;
 8002a32:	2102      	movs	r1, #2
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002a34:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002a36:	460b      	mov	r3, r1
         break;
 8002a38:	e64e      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002a3a:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002a3e:	f000 8125 	beq.w	8002c8c <RI_GetRegCommandParser+0x6ac>
 8002a42:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002a46:	f47f ae9a 	bne.w	800277e <RI_GetRegCommandParser+0x19e>
          *regdata16 = MCI_GetVqd(pMCI).q;
 8002a4a:	4658      	mov	r0, fp
 8002a4c:	f7fe fc5a 	bl	8001304 <MCI_GetVqd>
 8002a50:	2102      	movs	r1, #2
 8002a52:	9005      	str	r0, [sp, #20]
        *size = 2;
 8002a54:	460b      	mov	r3, r1
          *regdata16 = MCI_GetVqd(pMCI).q;
 8002a56:	8030      	strh	r0, [r6, #0]
     if (retVal == MCP_CMD_OK )
 8002a58:	e63e      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
          *data =  MCI_GetControlMode(pMCI);
 8002a5a:	4658      	mov	r0, fp
 8002a5c:	f7fe fbfe 	bl	800125c <MCI_GetControlMode>
          break;
 8002a60:	2101      	movs	r1, #1
          *data =  MCI_GetControlMode(pMCI);
 8002a62:	7030      	strb	r0, [r6, #0]
        *size = 1;
 8002a64:	460b      	mov	r3, r1
          break;
 8002a66:	e637      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002a68:	2006      	movs	r0, #6
 8002a6a:	e5f4      	b.n	8002656 <RI_GetRegCommandParser+0x76>
          *data = STM_GetState(&STM[motorID]);
 8002a6c:	4860      	ldr	r0, [pc, #384]	; (8002bf0 <RI_GetRegCommandParser+0x610>)
 8002a6e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8002a72:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 8002a76:	f004 faff 	bl	8007078 <STM_GetState>
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	7030      	strb	r0, [r6, #0]
        *size = 1;
 8002a7e:	460b      	mov	r3, r1
 8002a80:	e62a      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
        retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8002a82:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <RI_GetRegCommandParser+0x614>)
 8002a84:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8002a88:	7818      	ldrb	r0, [r3, #0]
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d048      	beq.n	8002b20 <RI_GetRegCommandParser+0x540>
 8002a8e:	2c01      	cmp	r4, #1
 8002a90:	ddea      	ble.n	8002a68 <RI_GetRegCommandParser+0x488>
 8002a92:	469e      	mov	lr, r3
 8002a94:	46b4      	mov	ip, r6
 8002a96:	f1c6 0101 	rsb	r1, r6, #1
 8002a9a:	e001      	b.n	8002aa0 <RI_GetRegCommandParser+0x4c0>
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	dae3      	bge.n	8002a68 <RI_GetRegCommandParser+0x488>
    *destString = *srcString ;
 8002aa0:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002aa4:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8002aa8:	eb0c 0301 	add.w	r3, ip, r1
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d1f4      	bne.n	8002a9c <RI_GetRegCommandParser+0x4bc>
 8002ab2:	e60d      	b.n	80026d0 <RI_GetRegCommandParser+0xf0>
 8002ab4:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <RI_GetRegCommandParser+0x618>)
 8002ab6:	7818      	ldrb	r0, [r3, #0]
 8002ab8:	b390      	cbz	r0, 8002b20 <RI_GetRegCommandParser+0x540>
 8002aba:	2c01      	cmp	r4, #1
 8002abc:	ddd4      	ble.n	8002a68 <RI_GetRegCommandParser+0x488>
 8002abe:	469e      	mov	lr, r3
 8002ac0:	46b4      	mov	ip, r6
 8002ac2:	f1c6 0101 	rsb	r1, r6, #1
 8002ac6:	e001      	b.n	8002acc <RI_GetRegCommandParser+0x4ec>
 8002ac8:	42a3      	cmp	r3, r4
 8002aca:	dacd      	bge.n	8002a68 <RI_GetRegCommandParser+0x488>
    *destString = *srcString ;
 8002acc:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002ad0:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8002ad4:	eb0c 0301 	add.w	r3, ip, r1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d1f4      	bne.n	8002ac8 <RI_GetRegCommandParser+0x4e8>
 8002ade:	e5f7      	b.n	80026d0 <RI_GetRegCommandParser+0xf0>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002ae0:	4658      	mov	r0, fp
 8002ae2:	f7fe fbd3 	bl	800128c <MCI_GetMecSpeedRefUnit>
 8002ae6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002aea:	0040      	lsls	r0, r0, #1
 8002aec:	2104      	movs	r1, #4
 8002aee:	6030      	str	r0, [r6, #0]
        *size = 4;
 8002af0:	460b      	mov	r3, r1
 8002af2:	e5f1      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
          *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002af4:	4658      	mov	r0, fp
 8002af6:	f7fe fbc1 	bl	800127c <MCI_GetAvrgMecSpeedUnit>
 8002afa:	e7f4      	b.n	8002ae6 <RI_GetRegCommandParser+0x506>
          memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <RI_GetRegCommandParser+0x61c>)
 8002afe:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002b02:	f8d3 c000 	ldr.w	ip, [r3]
 8002b06:	6858      	ldr	r0, [r3, #4]
 8002b08:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8002b0c:	f8c2 e008 	str.w	lr, [r2, #8]
 8002b10:	f8c2 c000 	str.w	ip, [r2]
 8002b14:	6050      	str	r0, [r2, #4]
 8002b16:	899b      	ldrh	r3, [r3, #12]
 8002b18:	8193      	strh	r3, [r2, #12]
 8002b1a:	2110      	movs	r1, #16
      *size = (*rawSize)+2;
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	e5db      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
  while ((*srcString != 0) && (*size < maxSize) )
 8002b20:	2101      	movs	r1, #1
 8002b22:	46b4      	mov	ip, r6
  *size= 1 ; /* /0 is the min String size */
 8002b24:	460b      	mov	r3, r1
 8002b26:	e5d4      	b.n	80026d2 <RI_GetRegCommandParser+0xf2>
          *rawSize = 4;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	8033      	strh	r3, [r6, #0]
          *torque = MCI_GetLastRampFinalTorque(pMCI);
 8002b2c:	4658      	mov	r0, fp
 8002b2e:	f7fe fb9b 	bl	8001268 <MCI_GetLastRampFinalTorque>
 8002b32:	8070      	strh	r0, [r6, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002b34:	4658      	mov	r0, fp
 8002b36:	f7fe fb9b 	bl	8001270 <MCI_GetLastRampFinalDuration>
 8002b3a:	e65d      	b.n	80027f8 <RI_GetRegCommandParser+0x218>
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8002b3c:	230c      	movs	r3, #12
        if ((*rawSize) +2  > freeSpace)
 8002b3e:	2c0d      	cmp	r4, #13
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8002b40:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 8002b42:	f77f ad9e 	ble.w	8002682 <RI_GetRegCommandParser+0xa2>
          memcpy(rawData, FOCConfig_reg[motorID], sizeof(FOCFwConfig_reg_t) );
 8002b46:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <RI_GetRegCommandParser+0x620>)
 8002b48:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002b4c:	210e      	movs	r1, #14
 8002b4e:	f8d3 c000 	ldr.w	ip, [r3]
 8002b52:	6858      	ldr	r0, [r3, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	6093      	str	r3, [r2, #8]
 8002b58:	f8c2 c000 	str.w	ip, [r2]
 8002b5c:	6050      	str	r0, [r2, #4]
      *size = (*rawSize)+2;
 8002b5e:	460b      	mov	r3, r1
 8002b60:	e5ba      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
        *rawSize = sizeof(MotorConfig_reg_t);
 8002b62:	233c      	movs	r3, #60	; 0x3c
        if ((*rawSize) +2  > freeSpace)
 8002b64:	2c3d      	cmp	r4, #61	; 0x3d
        *rawSize = sizeof(MotorConfig_reg_t);
 8002b66:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 8002b68:	f77f ad8b 	ble.w	8002682 <RI_GetRegCommandParser+0xa2>
          memcpy(rawData, MotorConfig_reg[motorID], sizeof(MotorConfig_reg_t) );
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <RI_GetRegCommandParser+0x624>)
 8002b6e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002b72:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8002b76:	f8d3 c000 	ldr.w	ip, [r3]
 8002b7a:	6858      	ldr	r0, [r3, #4]
 8002b7c:	6899      	ldr	r1, [r3, #8]
 8002b7e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8002b82:	f8c2 e00c 	str.w	lr, [r2, #12]
 8002b86:	3310      	adds	r3, #16
 8002b88:	455b      	cmp	r3, fp
 8002b8a:	f8c2 c000 	str.w	ip, [r2]
 8002b8e:	6050      	str	r0, [r2, #4]
 8002b90:	6091      	str	r1, [r2, #8]
 8002b92:	f102 0210 	add.w	r2, r2, #16
 8002b96:	d1ee      	bne.n	8002b76 <RI_GetRegCommandParser+0x596>
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	6051      	str	r1, [r2, #4]
 8002ba0:	213e      	movs	r1, #62	; 0x3e
 8002ba2:	6093      	str	r3, [r2, #8]
 8002ba4:	6010      	str	r0, [r2, #0]
      *size = (*rawSize)+2;
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	e596      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
  uint8_t retVal = MCP_CMD_NOK;
 8002baa:	2001      	movs	r0, #1
 8002bac:	e553      	b.n	8002656 <RI_GetRegCommandParser+0x76>
          *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <RI_GetRegCommandParser+0x5fc>)
 8002bb0:	e5d5      	b.n	800275e <RI_GetRegCommandParser+0x17e>
          *regdata16 = MCI_GetIqdref(pMCI).q;
 8002bb2:	4658      	mov	r0, fp
 8002bb4:	f7fe fb98 	bl	80012e8 <MCI_GetIqdref>
 8002bb8:	2102      	movs	r1, #2
 8002bba:	9007      	str	r0, [sp, #28]
        *size = 2;
 8002bbc:	460b      	mov	r3, r1
          *regdata16 = MCI_GetIqdref(pMCI).q;
 8002bbe:	8030      	strh	r0, [r6, #0]
     if (retVal == MCP_CMD_OK )
 8002bc0:	e58a      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <RI_GetRegCommandParser+0x600>)
 8002bc4:	e6d0      	b.n	8002968 <RI_GetRegCommandParser+0x388>
          *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <RI_GetRegCommandParser+0x60c>)
 8002bc8:	e5c9      	b.n	800275e <RI_GetRegCommandParser+0x17e>
          *regdata16 = MCI_GetIab(pMCI).a;
 8002bca:	4658      	mov	r0, fp
 8002bcc:	f7fe fb62 	bl	8001294 <MCI_GetIab>
         break;
 8002bd0:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIab(pMCI).a;
 8002bd2:	900d      	str	r0, [sp, #52]	; 0x34
        *size = 2;
 8002bd4:	460b      	mov	r3, r1
          *regdata16 = MCI_GetIab(pMCI).a;
 8002bd6:	8030      	strh	r0, [r6, #0]
         break;
 8002bd8:	e57e      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002bda:	bf00      	nop
 8002bdc:	20000448 	.word	0x20000448
 8002be0:	20000444 	.word	0x20000444
 8002be4:	20000440 	.word	0x20000440
 8002be8:	20000524 	.word	0x20000524
 8002bec:	20000528 	.word	0x20000528
 8002bf0:	200007a0 	.word	0x200007a0
 8002bf4:	20000460 	.word	0x20000460
 8002bf8:	0800724c 	.word	0x0800724c
 8002bfc:	20000454 	.word	0x20000454
 8002c00:	20000458 	.word	0x20000458
 8002c04:	2000045c 	.word	0x2000045c
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 8002c08:	4658      	mov	r0, fp
 8002c0a:	f7fe fb89 	bl	8001320 <MCI_GetValphabeta>
 8002c0e:	2102      	movs	r1, #2
 8002c10:	9002      	str	r0, [sp, #8]
 8002c12:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002c16:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002c18:	460b      	mov	r3, r1
 8002c1a:	e55d      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8002c1c:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <RI_GetRegCommandParser+0x6d8>)
 8002c1e:	e6a3      	b.n	8002968 <RI_GetRegCommandParser+0x388>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <RI_GetRegCommandParser+0x6dc>)
 8002c22:	e6b5      	b.n	8002990 <RI_GetRegCommandParser+0x3b0>
          *regdata16 = MCI_GetVqd(pMCI).d;
 8002c24:	4658      	mov	r0, fp
 8002c26:	f7fe fb6d 	bl	8001304 <MCI_GetVqd>
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	9004      	str	r0, [sp, #16]
 8002c2e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002c32:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002c34:	460b      	mov	r3, r1
 8002c36:	e54f      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8002c38:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <RI_GetRegCommandParser+0x6d8>)
 8002c3a:	e6a9      	b.n	8002990 <RI_GetRegCommandParser+0x3b0>
          *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <RI_GetRegCommandParser+0x6e0>)
 8002c3e:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002c42:	f004 f865 	bl	8006d10 <SPD_GetElAngle>
 8002c46:	2102      	movs	r1, #2
 8002c48:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	e544      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <RI_GetRegCommandParser+0x6e4>)
 8002c50:	e64f      	b.n	80028f2 <RI_GetRegCommandParser+0x312>
          *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8002c52:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <RI_GetRegCommandParser+0x6dc>)
 8002c54:	e6e9      	b.n	8002a2a <RI_GetRegCommandParser+0x44a>
          *regdata16 = MCI_GetIqd(pMCI).q;
 8002c56:	4658      	mov	r0, fp
 8002c58:	f7fe fb38 	bl	80012cc <MCI_GetIqd>
         break;
 8002c5c:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIqd(pMCI).q;
 8002c5e:	9009      	str	r0, [sp, #36]	; 0x24
        *size = 2;
 8002c60:	460b      	mov	r3, r1
          *regdata16 = MCI_GetIqd(pMCI).q;
 8002c62:	8030      	strh	r0, [r6, #0]
         break;
 8002c64:	e538      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8002c66:	4658      	mov	r0, fp
 8002c68:	f7fe fb22 	bl	80012b0 <MCI_GetIalphabeta>
         break;
 8002c6c:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8002c6e:	900b      	str	r0, [sp, #44]	; 0x2c
        *size = 2;
 8002c70:	460b      	mov	r3, r1
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8002c72:	8030      	strh	r0, [r6, #0]
         break;
 8002c74:	e530      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <RI_GetRegCommandParser+0x6e8>)
 8002c78:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002c7c:	f002 fa7a 	bl	8005174 <VBS_GetAvBusVoltage_V>
         break;
 8002c80:	2102      	movs	r1, #2
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8002c82:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002c84:	460b      	mov	r3, r1
         break;
 8002c86:	e527      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <RI_GetRegCommandParser+0x6d8>)
 8002c8a:	e643      	b.n	8002914 <RI_GetRegCommandParser+0x334>
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8002c8c:	4658      	mov	r0, fp
 8002c8e:	f7fe fb2b 	bl	80012e8 <MCI_GetIqdref>
 8002c92:	2102      	movs	r1, #2
 8002c94:	9006      	str	r0, [sp, #24]
 8002c96:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002c9a:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	e51b      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <RI_GetRegCommandParser+0x6e4>)
 8002ca2:	e6c2      	b.n	8002a2a <RI_GetRegCommandParser+0x44a>
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <RI_GetRegCommandParser+0x6ec>)
 8002ca6:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002caa:	f003 f945 	bl	8005f38 <NTC_GetAvTemp_C>
         break;
 8002cae:	2102      	movs	r1, #2
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8002cb0:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002cb2:	460b      	mov	r3, r1
         break;
 8002cb4:	e510      	b.n	80026d8 <RI_GetRegCommandParser+0xf8>
 8002cb6:	bf00      	nop
 8002cb8:	20000528 	.word	0x20000528
 8002cbc:	20000448 	.word	0x20000448
 8002cc0:	20000524 	.word	0x20000524
 8002cc4:	20000444 	.word	0x20000444
 8002cc8:	20000520 	.word	0x20000520
 8002ccc:	20000450 	.word	0x20000450

08002cd0 <RI_GetIDSize>:
return retVal;
}

uint8_t RI_GetIDSize (uint16_t dataID)
{
  uint8_t typeID = dataID & TYPE_MASK;
 8002cd0:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002cd4:	3808      	subs	r0, #8
 8002cd6:	b2c0      	uxtb	r0, r0
 8002cd8:	2810      	cmp	r0, #16
 8002cda:	bf9a      	itte	ls
 8002cdc:	4b01      	ldrls	r3, [pc, #4]	; (8002ce4 <RI_GetIDSize+0x14>)
 8002cde:	5c18      	ldrbls	r0, [r3, r0]
 8002ce0:	2000      	movhi	r0, #0
    default:
      result=0;
      break;
  }
  return result;
}
 8002ce2:	4770      	bx	lr
 8002ce4:	08007578 	.word	0x08007578

08002ce8 <RI_GetPtrReg>:
  uint16_t regID = dataID & REG_MASK;
  uint8_t retVal = MCP_CMD_OK;

  MCI_Handle_t * pMCI = &Mci[motorID];

  switch (typeID)
 8002ce8:	f000 0238 	and.w	r2, r0, #56	; 0x38
 8002cec:	2a10      	cmp	r2, #16
  uint8_t typeID = dataID & TYPE_MASK;
 8002cee:	b2c3      	uxtb	r3, r0
  switch (typeID)
 8002cf0:	d003      	beq.n	8002cfa <RI_GetPtrReg+0x12>
      break;
      case MC_REG_HALL_EL_ANGLE:
        *dataPtr = &(pHallSensor[motorID]->_Super.hElAngle);
      break;
      default:
        *dataPtr = &nullData16;
 8002cf2:	4b5f      	ldr	r3, [pc, #380]	; (8002e70 <RI_GetPtrReg+0x188>)
 8002cf4:	600b      	str	r3, [r1, #0]
        retVal = MCP_ERROR_UNKNOWN_REG;
 8002cf6:	2005      	movs	r0, #5
      *dataPtr = &nullData16;
      retVal = MCP_ERROR_UNKNOWN_REG;
      break;
  }
  return retVal;
}
 8002cf8:	4770      	bx	lr
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002cfa:	f003 0207 	and.w	r2, r3, #7
  uint16_t regID = dataID & REG_MASK;
 8002cfe:	f020 0007 	bic.w	r0, r0, #7
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002d02:	3a01      	subs	r2, #1
 8002d04:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002d08:	b2d2      	uxtb	r2, r2
  uint16_t regID = dataID & REG_MASK;
 8002d0a:	b283      	uxth	r3, r0
 8002d0c:	d06c      	beq.n	8002de8 <RI_GetPtrReg+0x100>
 8002d0e:	d813      	bhi.n	8002d38 <RI_GetPtrReg+0x50>
 8002d10:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002d14:	d072      	beq.n	8002dfc <RI_GetPtrReg+0x114>
 8002d16:	d92e      	bls.n	8002d76 <RI_GetPtrReg+0x8e>
 8002d18:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002d1c:	d078      	beq.n	8002e10 <RI_GetPtrReg+0x128>
 8002d1e:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002d22:	d11b      	bne.n	8002d5c <RI_GetPtrReg+0x74>
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8002d24:	4853      	ldr	r0, [pc, #332]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002d26:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002d2a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002d2e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8002d30:	6893      	ldr	r3, [r2, #8]
 8002d32:	3310      	adds	r3, #16
 8002d34:	600b      	str	r3, [r1, #0]
       break;
 8002d36:	4770      	bx	lr
 8002d38:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002d3c:	d072      	beq.n	8002e24 <RI_GetPtrReg+0x13c>
 8002d3e:	d92a      	bls.n	8002d96 <RI_GetPtrReg+0xae>
 8002d40:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 8002d44:	f000 808c 	beq.w	8002e60 <RI_GetPtrReg+0x178>
 8002d48:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 8002d4c:	d1d1      	bne.n	8002cf2 <RI_GetPtrReg+0xa>
        *dataPtr = &(pHallSensor[motorID]->_Super.hAvrMecSpeedUnit);
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <RI_GetPtrReg+0x190>)
 8002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d54:	330c      	adds	r3, #12
  uint8_t retVal = MCP_CMD_OK;
 8002d56:	2000      	movs	r0, #0
        *dataPtr = &(pHallSensor[motorID]->_Super.hAvrMecSpeedUnit);
 8002d58:	600b      	str	r3, [r1, #0]
      break;
 8002d5a:	4770      	bx	lr
 8002d5c:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002d60:	d1c7      	bne.n	8002cf2 <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 8002d62:	4844      	ldr	r0, [pc, #272]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002d64:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002d68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002d6c:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 8002d6e:	6893      	ldr	r3, [r2, #8]
 8002d70:	330c      	adds	r3, #12
 8002d72:	600b      	str	r3, [r1, #0]
       break;
 8002d74:	4770      	bx	lr
 8002d76:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002d7a:	d05d      	beq.n	8002e38 <RI_GetPtrReg+0x150>
 8002d7c:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002d80:	d119      	bne.n	8002db6 <RI_GetPtrReg+0xce>
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8002d82:	483c      	ldr	r0, [pc, #240]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002d84:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002d88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002d8c:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8002d8e:	6893      	ldr	r3, [r2, #8]
 8002d90:	3304      	adds	r3, #4
 8002d92:	600b      	str	r3, [r1, #0]
       break;
 8002d94:	4770      	bx	lr
 8002d96:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8002d9a:	d057      	beq.n	8002e4c <RI_GetPtrReg+0x164>
 8002d9c:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002da0:	d115      	bne.n	8002dce <RI_GetPtrReg+0xe6>
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8002da2:	4834      	ldr	r0, [pc, #208]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002da4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002da8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002dac:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8002dae:	6893      	ldr	r3, [r2, #8]
 8002db0:	331a      	adds	r3, #26
 8002db2:	600b      	str	r3, [r1, #0]
       break;
 8002db4:	4770      	bx	lr
 8002db6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dba:	d19a      	bne.n	8002cf2 <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8002dbc:	482d      	ldr	r0, [pc, #180]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002dbe:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002dc2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002dc6:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8002dc8:	6893      	ldr	r3, [r2, #8]
 8002dca:	600b      	str	r3, [r1, #0]
       break;
 8002dcc:	4770      	bx	lr
 8002dce:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002dd2:	d18e      	bne.n	8002cf2 <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8002dd4:	4827      	ldr	r0, [pc, #156]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002dd6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002dda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002dde:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8002de0:	6893      	ldr	r3, [r2, #8]
 8002de2:	3316      	adds	r3, #22
 8002de4:	600b      	str	r3, [r1, #0]
       break;
 8002de6:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8002de8:	4822      	ldr	r0, [pc, #136]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002dea:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002dee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002df2:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8002df4:	6893      	ldr	r3, [r2, #8]
 8002df6:	3312      	adds	r3, #18
 8002df8:	600b      	str	r3, [r1, #0]
       break;
 8002dfa:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8002dfc:	481d      	ldr	r0, [pc, #116]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002dfe:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e06:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8002e08:	6893      	ldr	r3, [r2, #8]
 8002e0a:	3306      	adds	r3, #6
 8002e0c:	600b      	str	r3, [r1, #0]
       break;
 8002e0e:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8002e10:	4818      	ldr	r0, [pc, #96]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002e12:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e1a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8002e1c:	6893      	ldr	r3, [r2, #8]
 8002e1e:	330e      	adds	r3, #14
 8002e20:	600b      	str	r3, [r1, #0]
       break;
 8002e22:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 8002e24:	4813      	ldr	r0, [pc, #76]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002e26:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e2a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e2e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 8002e30:	6893      	ldr	r3, [r2, #8]
 8002e32:	331c      	adds	r3, #28
 8002e34:	600b      	str	r3, [r1, #0]
       break;
 8002e36:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8002e38:	480e      	ldr	r0, [pc, #56]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002e3a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e3e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e42:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8002e44:	6893      	ldr	r3, [r2, #8]
 8002e46:	3302      	adds	r3, #2
 8002e48:	600b      	str	r3, [r1, #0]
       break;
 8002e4a:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 8002e4c:	4809      	ldr	r0, [pc, #36]	; (8002e74 <RI_GetPtrReg+0x18c>)
 8002e4e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e56:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 8002e58:	6893      	ldr	r3, [r2, #8]
 8002e5a:	3318      	adds	r3, #24
 8002e5c:	600b      	str	r3, [r1, #0]
       break;
 8002e5e:	4770      	bx	lr
        *dataPtr = &(pHallSensor[motorID]->_Super.hElAngle);
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <RI_GetPtrReg+0x190>)
 8002e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e66:	3304      	adds	r3, #4
  uint8_t retVal = MCP_CMD_OK;
 8002e68:	2000      	movs	r0, #0
        *dataPtr = &(pHallSensor[motorID]->_Super.hElAngle);
 8002e6a:	600b      	str	r3, [r1, #0]
      break;
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20001a74 	.word	0x20001a74
 8002e74:	20000770 	.word	0x20000770
 8002e78:	20000524 	.word	0x20000524

08002e7c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002e7c:	4b6b      	ldr	r3, [pc, #428]	; (800302c <RCM_RegisterRegConv+0x1b0>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002e84:	2a00      	cmp	r2, #0
 8002e86:	d02f      	beq.n	8002ee8 <RCM_RegisterRegConv+0x6c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002e88:	f890 c004 	ldrb.w	ip, [r0, #4]
 8002e8c:	7910      	ldrb	r0, [r2, #4]
 8002e8e:	4584      	cmp	ip, r0
 8002e90:	d01d      	beq.n	8002ece <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002e92:	685c      	ldr	r4, [r3, #4]
 8002e94:	2c00      	cmp	r4, #0
 8002e96:	f000 80ac 	beq.w	8002ff2 <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002e9a:	7922      	ldrb	r2, [r4, #4]
 8002e9c:	4562      	cmp	r2, ip
  uint8_t handle=255;
 8002e9e:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002ea2:	d02b      	beq.n	8002efc <RCM_RegisterRegConv+0x80>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ea4:	689c      	ldr	r4, [r3, #8]
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	f000 808f 	beq.w	8002fca <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002eac:	7922      	ldrb	r2, [r4, #4]
 8002eae:	4562      	cmp	r2, ip
 8002eb0:	d02a      	beq.n	8002f08 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002eb2:	68dc      	ldr	r4, [r3, #12]
 8002eb4:	2c00      	cmp	r4, #0
 8002eb6:	f000 8091 	beq.w	8002fdc <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002eba:	7922      	ldrb	r2, [r4, #4]
 8002ebc:	4562      	cmp	r2, ip
 8002ebe:	f000 8092 	beq.w	8002fe6 <RCM_RegisterRegConv+0x16a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002ec2:	2803      	cmp	r0, #3
 8002ec4:	bf88      	it	hi
 8002ec6:	20ff      	movhi	r0, #255	; 0xff
 8002ec8:	f240 80a1 	bls.w	800300e <RCM_RegisterRegConv+0x192>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002ece:	6810      	ldr	r0, [r2, #0]
 8002ed0:	680a      	ldr	r2, [r1, #0]
 8002ed2:	4290      	cmp	r0, r2
 8002ed4:	d01e      	beq.n	8002f14 <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ed6:	685c      	ldr	r4, [r3, #4]
 8002ed8:	2c00      	cmp	r4, #0
 8002eda:	d1de      	bne.n	8002e9a <RCM_RegisterRegConv+0x1e>
 8002edc:	689c      	ldr	r4, [r3, #8]
 8002ede:	2c00      	cmp	r4, #0
 8002ee0:	f000 809a 	beq.w	8003018 <RCM_RegisterRegConv+0x19c>
      i++;
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	e7e1      	b.n	8002eac <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ee8:	685c      	ldr	r4, [r3, #4]
 8002eea:	2c00      	cmp	r4, #0
 8002eec:	f000 808d 	beq.w	800300a <RCM_RegisterRegConv+0x18e>
 8002ef0:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8002ef4:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002ef6:	7922      	ldrb	r2, [r4, #4]
 8002ef8:	4562      	cmp	r2, ip
 8002efa:	d1d3      	bne.n	8002ea4 <RCM_RegisterRegConv+0x28>
 8002efc:	6824      	ldr	r4, [r4, #0]
 8002efe:	680a      	ldr	r2, [r1, #0]
 8002f00:	4294      	cmp	r4, r2
 8002f02:	d1cf      	bne.n	8002ea4 <RCM_RegisterRegConv+0x28>
      i++;
 8002f04:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 8002f06:	e006      	b.n	8002f16 <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002f08:	6824      	ldr	r4, [r4, #0]
 8002f0a:	680a      	ldr	r2, [r1, #0]
 8002f0c:	4294      	cmp	r4, r2
 8002f0e:	d1d0      	bne.n	8002eb2 <RCM_RegisterRegConv+0x36>
      i++;
 8002f10:	2002      	movs	r0, #2
 8002f12:	e000      	b.n	8002f16 <RCM_RegisterRegConv+0x9a>
  uint8_t i=0;
 8002f14:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8002f16:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002f1a:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002f1c:	4c44      	ldr	r4, [pc, #272]	; (8003030 <RCM_RegisterRegConv+0x1b4>)
 8002f1e:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002f20:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002f22:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002f26:	d411      	bmi.n	8002f4c <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002f28:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002f2a:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002f2e:	f023 0320 	bic.w	r3, r3, #32
 8002f32:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002f34:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002f36:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002f38:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f40:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002f42:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002f44:	6893      	ldr	r3, [r2, #8]
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002f4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f52:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002f54:	790b      	ldrb	r3, [r1, #4]
 8002f56:	2b09      	cmp	r3, #9
 8002f58:	d82d      	bhi.n	8002fb6 <RCM_RegisterRegConv+0x13a>
 8002f5a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8002f5e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f66:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002f6e:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002f72:	fab4 f484 	clz	r4, r4
 8002f76:	fa2e fe04 	lsr.w	lr, lr, r4
 8002f7a:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8002f7c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002f80:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8002f84:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8002f88:	fa9c f5ac 	rbit	r5, ip
 8002f8c:	fab5 f585 	clz	r5, r5
 8002f90:	fa9c fcac 	rbit	ip, ip
 8002f94:	688e      	ldr	r6, [r1, #8]
 8002f96:	fabc fc8c 	clz	ip, ip
 8002f9a:	fa23 f105 	lsr.w	r1, r3, r5
 8002f9e:	fa23 f30c 	lsr.w	r3, r3, ip
 8002fa2:	fa06 f503 	lsl.w	r5, r6, r3
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	408b      	lsls	r3, r1
 8002faa:	ea24 0303 	bic.w	r3, r4, r3
 8002fae:	432b      	orrs	r3, r5
 8002fb0:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002fb6:	2403      	movs	r4, #3
 8002fb8:	f06f 051d 	mvn.w	r5, #29
 8002fbc:	fb14 5403 	smlabb	r4, r4, r3, r5
 8002fc0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002fc4:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8002fc8:	e7cf      	b.n	8002f6a <RCM_RegisterRegConv+0xee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002fca:	2804      	cmp	r0, #4
 8002fcc:	d917      	bls.n	8002ffe <RCM_RegisterRegConv+0x182>
 8002fce:	68dc      	ldr	r4, [r3, #12]
 8002fd0:	b114      	cbz	r4, 8002fd8 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002fd2:	7922      	ldrb	r2, [r4, #4]
 8002fd4:	4562      	cmp	r2, ip
 8002fd6:	d01c      	beq.n	8003012 <RCM_RegisterRegConv+0x196>
 8002fd8:	680a      	ldr	r2, [r1, #0]
 8002fda:	e799      	b.n	8002f10 <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002fdc:	2804      	cmp	r0, #4
 8002fde:	680a      	ldr	r2, [r1, #0]
 8002fe0:	d999      	bls.n	8002f16 <RCM_RegisterRegConv+0x9a>
      i++;
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	e797      	b.n	8002f16 <RCM_RegisterRegConv+0x9a>
 8002fe6:	680a      	ldr	r2, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002fe8:	6824      	ldr	r4, [r4, #0]
 8002fea:	4294      	cmp	r4, r2
 8002fec:	f47f af69 	bne.w	8002ec2 <RCM_RegisterRegConv+0x46>
 8002ff0:	e7f7      	b.n	8002fe2 <RCM_RegisterRegConv+0x166>
      i++;
 8002ff2:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ff4:	689c      	ldr	r4, [r3, #8]
 8002ff6:	b11c      	cbz	r4, 8003000 <RCM_RegisterRegConv+0x184>
 8002ff8:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002ffc:	e756      	b.n	8002eac <RCM_RegisterRegConv+0x30>
 8002ffe:	4620      	mov	r0, r4
 8003000:	68dc      	ldr	r4, [r3, #12]
 8003002:	b124      	cbz	r4, 800300e <RCM_RegisterRegConv+0x192>
 8003004:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003008:	e757      	b.n	8002eba <RCM_RegisterRegConv+0x3e>
  uint8_t i=0;
 800300a:	4620      	mov	r0, r4
 800300c:	e7f2      	b.n	8002ff4 <RCM_RegisterRegConv+0x178>
 800300e:	680a      	ldr	r2, [r1, #0]
 8003010:	e781      	b.n	8002f16 <RCM_RegisterRegConv+0x9a>
 8003012:	680a      	ldr	r2, [r1, #0]
      i++;
 8003014:	2002      	movs	r0, #2
 8003016:	e7e7      	b.n	8002fe8 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003018:	68dc      	ldr	r4, [r3, #12]
 800301a:	2c00      	cmp	r4, #0
 800301c:	f43f af72 	beq.w	8002f04 <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003020:	7920      	ldrb	r0, [r4, #4]
 8003022:	4560      	cmp	r0, ip
 8003024:	f47f af6e 	bne.w	8002f04 <RCM_RegisterRegConv+0x88>
      i++;
 8003028:	2001      	movs	r0, #1
 800302a:	e7dd      	b.n	8002fe8 <RCM_RegisterRegConv+0x16c>
 800302c:	20001a9c 	.word	0x20001a9c
 8003030:	20001a78 	.word	0x20001a78

08003034 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <RCM_ExecRegularConv+0x70>)
 8003036:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800303a:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	2b09      	cmp	r3, #9
 8003040:	d827      	bhi.n	8003092 <RCM_ExecRegularConv+0x5e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003042:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003046:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800304a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800304e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003052:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003056:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800305a:	fab1 f181 	clz	r1, r1
 800305e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8003062:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 800306e:	f021 011f 	bic.w	r1, r1, #31
 8003072:	430b      	orrs	r3, r1

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8003074:	0151      	lsls	r1, r2, #5
 8003076:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 800307a:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 800307e:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003080:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8003082:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003086:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8003088:	079b      	lsls	r3, r3, #30
 800308a:	d5fc      	bpl.n	8003086 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800308c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 800308e:	b280      	uxth	r0, r0
 8003090:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003092:	2103      	movs	r1, #3
 8003094:	f06f 001d 	mvn.w	r0, #29
 8003098:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800309c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80030a0:	e7d5      	b.n	800304e <RCM_ExecRegularConv+0x1a>
 80030a2:	bf00      	nop
 80030a4:	20001a9c 	.word	0x20001a9c

080030a8 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80030a8:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80030aa:	4c0e      	ldr	r4, [pc, #56]	; (80030e4 <RCM_ExecUserConv+0x3c>)
 80030ac:	7823      	ldrb	r3, [r4, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d000      	beq.n	80030b4 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80030b4:	4d0c      	ldr	r5, [pc, #48]	; (80030e8 <RCM_ExecUserConv+0x40>)
 80030b6:	7828      	ldrb	r0, [r5, #0]
 80030b8:	f7ff ffbc 	bl	8003034 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <RCM_ExecUserConv+0x44>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80030be:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <RCM_ExecUserConv+0x48>)
 80030c0:	4601      	mov	r1, r0
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80030c2:	7828      	ldrb	r0, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80030c4:	8011      	strh	r1, [r2, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80030c6:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 80030ca:	2202      	movs	r2, #2
 80030cc:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	d0ef      	beq.n	80030b2 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80030d2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80030d6:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80030dc:	462b      	mov	r3, r5
}
 80030de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80030e2:	4718      	bx	r3
 80030e4:	20001a99 	.word	0x20001a99
 80030e8:	20001a98 	.word	0x20001a98
 80030ec:	20001a78 	.word	0x20001a78
 80030f0:	20001a9a 	.word	0x20001a9a

080030f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_MspInit+0x38>)
 80030f8:	2100      	movs	r1, #0
 80030fa:	9100      	str	r1, [sp, #0]
 80030fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
 8003104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003106:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800310a:	9200      	str	r2, [sp, #0]
 800310c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	9101      	str	r1, [sp, #4]
 8003110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003112:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003122:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003124:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003126:	f000 bd85 	b.w	8003c34 <HAL_NVIC_SetPriorityGrouping>
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003130:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003132:	6803      	ldr	r3, [r0, #0]
 8003134:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <HAL_ADC_MspInit+0xc4>)
{
 8003136:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800313a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003140:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003144:	940a      	str	r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8003146:	d004      	beq.n	8003152 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003148:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <HAL_ADC_MspInit+0xc8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d033      	beq.n	80031b6 <HAL_ADC_MspInit+0x86>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800314e:	b00d      	add	sp, #52	; 0x34
 8003150:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003152:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_ADC_MspInit+0xcc>)
 8003154:	9401      	str	r4, [sp, #4]
 8003156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	4829      	ldr	r0, [pc, #164]	; (8003200 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800315a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
 8003160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003162:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003166:	9201      	str	r2, [sp, #4]
 8003168:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	9402      	str	r4, [sp, #8]
 800316c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
 8003174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003176:	f002 0201 	and.w	r2, r2, #1
 800317a:	9202      	str	r2, [sp, #8]
 800317c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317e:	9403      	str	r4, [sp, #12]
 8003180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003182:	f042 0202 	orr.w	r2, r2, #2
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003190:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_U_Pin;
 8003192:	2258      	movs	r2, #88	; 0x58
 8003194:	2303      	movs	r3, #3
 8003196:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	f000 fe5e 	bl	8003e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 80031a0:	2203      	movs	r2, #3
 80031a2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a4:	4817      	ldr	r0, [pc, #92]	; (8003204 <HAL_ADC_MspInit+0xd4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 80031aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ae:	f000 fe55 	bl	8003e5c <HAL_GPIO_Init>
}
 80031b2:	b00d      	add	sp, #52	; 0x34
 80031b4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_ADC_MspInit+0xcc>)
 80031b8:	9404      	str	r4, [sp, #16]
 80031ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	4810      	ldr	r0, [pc, #64]	; (8003200 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44
 80031c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80031ca:	9204      	str	r2, [sp, #16]
 80031cc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	9405      	str	r4, [sp, #20]
 80031d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_U_Pin;
 80031e2:	2458      	movs	r4, #88	; 0x58
 80031e4:	2503      	movs	r5, #3
 80031e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ea:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ec:	f000 fe36 	bl	8003e5c <HAL_GPIO_Init>
}
 80031f0:	b00d      	add	sp, #52	; 0x34
 80031f2:	bd30      	pop	{r4, r5, pc}
 80031f4:	40012000 	.word	0x40012000
 80031f8:	40012100 	.word	0x40012100
 80031fc:	40023800 	.word	0x40023800
 8003200:	40020000 	.word	0x40020000
 8003204:	40020400 	.word	0x40020400

08003208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003208:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800320a:	6802      	ldr	r2, [r0, #0]
 800320c:	491f      	ldr	r1, [pc, #124]	; (800328c <HAL_TIM_Base_MspInit+0x84>)
{
 800320e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8003212:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003218:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800321c:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 800321e:	d004      	beq.n	800322a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003220:	491b      	ldr	r1, [pc, #108]	; (8003290 <HAL_TIM_Base_MspInit+0x88>)
 8003222:	428a      	cmp	r2, r1
 8003224:	d00e      	beq.n	8003244 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003226:	b00a      	add	sp, #40	; 0x28
 8003228:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800322a:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <HAL_TIM_Base_MspInit+0x8c>)
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6453      	str	r3, [r2, #68]	; 0x44
 8003236:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	9b01      	ldr	r3, [sp, #4]
}
 8003240:	b00a      	add	sp, #40	; 0x28
 8003242:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003244:	4a13      	ldr	r2, [pc, #76]	; (8003294 <HAL_TIM_Base_MspInit+0x8c>)
 8003246:	9302      	str	r3, [sp, #8]
 8003248:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800324a:	f040 0002 	orr.w	r0, r0, #2
 800324e:	6410      	str	r0, [r2, #64]	; 0x40
 8003250:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003252:	f000 0002 	and.w	r0, r0, #2
 8003256:	9002      	str	r0, [sp, #8]
 8003258:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800325a:	9303      	str	r3, [sp, #12]
 800325c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325e:	480e      	ldr	r0, [pc, #56]	; (8003298 <HAL_TIM_Base_MspInit+0x90>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800326e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003270:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin|M1_HALL_H1_Pin;
 8003272:	f44f 76e0 	mov.w	r6, #448	; 0x1c0
 8003276:	2702      	movs	r7, #2
 8003278:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800327c:	e9cd 4407 	strd	r4, r4, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003280:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003282:	f000 fdeb 	bl	8003e5c <HAL_GPIO_Init>
}
 8003286:	b00a      	add	sp, #40	; 0x28
 8003288:	bdd0      	pop	{r4, r6, r7, pc}
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000
 8003290:	40000400 	.word	0x40000400
 8003294:	40023800 	.word	0x40023800
 8003298:	40020800 	.word	0x40020800

0800329c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800329c:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800329e:	4a20      	ldr	r2, [pc, #128]	; (8003320 <HAL_TIM_MspPostInit+0x84>)
 80032a0:	6801      	ldr	r1, [r0, #0]
{
 80032a2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80032a6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80032ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80032b0:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032b4:	b008      	add	sp, #32
 80032b6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b8:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c0:	4818      	ldr	r0, [pc, #96]	; (8003324 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c2:	f041 0101 	orr.w	r1, r1, #1
 80032c6:	6311      	str	r1, [r2, #48]	; 0x30
 80032c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032ca:	f001 0101 	and.w	r1, r1, #1
 80032ce:	9100      	str	r1, [sp, #0]
 80032d0:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	6313      	str	r3, [r2, #48]	; 0x30
 80032dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032e6:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_WH_Pin|M1_PWM_VH_Pin|M1_PWM_UH_Pin;
 80032ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032ee:	2302      	movs	r3, #2
 80032f0:	2602      	movs	r6, #2
 80032f2:	2702      	movs	r7, #2
 80032f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032fc:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f000 fdad 	bl	8003e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003302:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003306:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	4807      	ldr	r0, [pc, #28]	; (8003328 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800330a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800330e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003312:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003316:	f000 fda1 	bl	8003e5c <HAL_GPIO_Init>
}
 800331a:	b008      	add	sp, #32
 800331c:	bdd0      	pop	{r4, r6, r7, pc}
 800331e:	bf00      	nop
 8003320:	40010000 	.word	0x40010000
 8003324:	40020000 	.word	0x40020000
 8003328:	40020400 	.word	0x40020400

0800332c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800332c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800332e:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <HAL_UART_MspInit+0xcc>)
 8003330:	6802      	ldr	r2, [r0, #0]
{
 8003332:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8003336:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800333c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003340:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8003342:	d001      	beq.n	8003348 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003344:	b008      	add	sp, #32
 8003346:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003348:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800334c:	9400      	str	r4, [sp, #0]
 800334e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003350:	4e2a      	ldr	r6, [pc, #168]	; (80033fc <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003352:	f042 0210 	orr.w	r2, r2, #16
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
 8003358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335a:	f002 0210 	and.w	r2, r2, #16
 800335e:	9200      	str	r2, [sp, #0]
 8003360:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003362:	9401      	str	r4, [sp, #4]
 8003364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003366:	f042 0202 	orr.w	r2, r2, #2
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8003374:	22c0      	movs	r2, #192	; 0xc0
 8003376:	2302      	movs	r3, #2
 8003378:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800337c:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800337e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003380:	481f      	ldr	r0, [pc, #124]	; (8003400 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003382:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003386:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	f000 fd68 	bl	8003e5c <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_UART_MspInit+0xd8>)
 800338e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003392:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003396:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003398:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800339c:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a0:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80033a4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033a8:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033ac:	f000 fcbe 	bl	8003d2c <HAL_DMA_Init>
 80033b0:	b9d8      	cbnz	r0, 80033ea <HAL_UART_MspInit+0xbe>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80033b2:	4c15      	ldr	r4, [pc, #84]	; (8003408 <HAL_UART_MspInit+0xdc>)
 80033b4:	4915      	ldr	r1, [pc, #84]	; (800340c <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033b6:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80033b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033bc:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80033be:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033c2:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c4:	2140      	movs	r1, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ca:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ce:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033d2:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033d6:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033d8:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033da:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033dc:	f000 fca6 	bl	8003d2c <HAL_DMA_Init>
 80033e0:	b930      	cbnz	r0, 80033f0 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80033e2:	632c      	str	r4, [r5, #48]	; 0x30
 80033e4:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80033e6:	b008      	add	sp, #32
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80033ea:	f7fd fea1 	bl	8001130 <Error_Handler>
 80033ee:	e7e0      	b.n	80033b2 <HAL_UART_MspInit+0x86>
      Error_Handler();
 80033f0:	f7fd fe9e 	bl	8001130 <Error_Handler>
 80033f4:	e7f5      	b.n	80033e2 <HAL_UART_MspInit+0xb6>
 80033f6:	bf00      	nop
 80033f8:	40011000 	.word	0x40011000
 80033fc:	200005f0 	.word	0x200005f0
 8003400:	40020400 	.word	0x40020400
 8003404:	40026440 	.word	0x40026440
 8003408:	20000650 	.word	0x20000650
 800340c:	400264b8 	.word	0x400264b8

08003410 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <ADC_IRQHandler+0x24>)
 8003412:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8003414:	0752      	lsls	r2, r2, #29
 8003416:	d505      	bpl.n	8003424 <ADC_IRQHandler+0x14>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	f022 020c 	bic.w	r2, r2, #12
 800341e:	601a      	str	r2, [r3, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003420:	f7fe baa0 	b.w	8001964 <TSK_HighFrequencyTask>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <ADC_IRQHandler+0x28>)
 8003426:	6813      	ldr	r3, [r2, #0]
 8003428:	f023 030c 	bic.w	r3, r3, #12
 800342c:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 800342e:	f7fe ba99 	b.w	8001964 <TSK_HighFrequencyTask>
 8003432:	bf00      	nop
 8003434:	40012000 	.word	0x40012000
 8003438:	40012200 	.word	0x40012200

0800343c <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 800343c:	4804      	ldr	r0, [pc, #16]	; (8003450 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800343e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8003442:	689b      	ldr	r3, [r3, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003444:	f06f 0201 	mvn.w	r2, #1
 8003448:	611a      	str	r2, [r3, #16]
  R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800344a:	f003 ba55 	b.w	80068f8 <R3_2_TIMx_UP_IRQHandler>
 800344e:	bf00      	nop
 8003450:	2000033c 	.word	0x2000033c

08003454 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003454:	4808      	ldr	r0, [pc, #32]	; (8003478 <TIM1_BRK_TIM9_IRQHandler+0x24>)
{
 8003456:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003458:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800345c:	689b      	ldr	r3, [r3, #8]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	0612      	lsls	r2, r2, #24
 8003462:	d504      	bpl.n	800346e <TIM1_BRK_TIM9_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003464:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003468:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 800346a:	f003 faa5 	bl	80069b8 <R3_2_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800346e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003472:	f7fe ba2f 	b.w	80018d4 <MC_Scheduler>
 8003476:	bf00      	nop
 8003478:	2000033c 	.word	0x2000033c

0800347c <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 800347c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 800347e:	4c0c      	ldr	r4, [pc, #48]	; (80034b0 <TIM3_IRQHandler+0x34>)
 8003480:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	07d1      	lsls	r1, r2, #31
 8003486:	d40b      	bmi.n	80034a0 <TIM3_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	0792      	lsls	r2, r2, #30
 800348c:	d507      	bpl.n	800349e <TIM3_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800348e:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8003496:	4806      	ldr	r0, [pc, #24]	; (80034b0 <TIM3_IRQHandler+0x34>)
 8003498:	611a      	str	r2, [r3, #16]
 800349a:	f002 b841 	b.w	8005520 <HALL_TIMx_CC_IRQHandler>
}
 800349e:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80034a0:	f06f 0201 	mvn.w	r2, #1
 80034a4:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80034a6:	4620      	mov	r0, r4
 80034a8:	f002 f9e0 	bl	800586c <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 80034ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034ae:	e7eb      	b.n	8003488 <TIM3_IRQHandler+0xc>
 80034b0:	200000dc 	.word	0x200000dc

080034b4 <DMA2_Stream2_IRQHandler>:
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Stream )
{
  register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
  return ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) ) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <DMA2_Stream2_IRQHandler+0x1c>)
 80034b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80034ba:	0292      	lsls	r2, r2, #10
 80034bc:	d400      	bmi.n	80034c0 <DMA2_Stream2_IRQHandler+0xc>
  }
  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

}
 80034be:	4770      	bx	lr
  WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 80034c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80034c4:	4803      	ldr	r0, [pc, #12]	; (80034d4 <DMA2_Stream2_IRQHandler+0x20>)
 80034c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80034ca:	f7fd bb29 	b.w	8000b20 <ASPEP_HWDataReceivedIT>
 80034ce:	bf00      	nop
 80034d0:	40026000 	.word	0x40026000
 80034d4:	200004b4 	.word	0x200004b4

080034d8 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USARTA_IRQHandler(void)
{
 80034d8:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <USART1_IRQHandler+0xd0>)
 80034dc:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USARTA_IRQn 0 */

  /* USER CODE END USARTA_IRQn 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80034de:	0650      	lsls	r0, r2, #25
{
 80034e0:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80034e2:	d436      	bmi.n	8003552 <USART1_IRQHandler+0x7a>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80034e4:	4b30      	ldr	r3, [pc, #192]	; (80035a8 <USART1_IRQHandler+0xd0>)
 80034e6:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 80034e8:	0711      	lsls	r1, r2, #28
 80034ea:	d402      	bmi.n	80034f2 <USART1_IRQHandler+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	0792      	lsls	r2, r2, #30
 80034f0:	d527      	bpl.n	8003542 <USART1_IRQHandler+0x6a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <USART1_IRQHandler+0xd0>)
 80034f4:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 80034f6:	07d0      	lsls	r0, r2, #31
 80034f8:	d408      	bmi.n	800350c <USART1_IRQHandler+0x34>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80034fa:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <USART1_IRQHandler+0xd0>)
 80034fc:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 80034fe:	06d1      	lsls	r1, r2, #27
 8003500:	d502      	bpl.n	8003508 <USART1_IRQHandler+0x30>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	06d2      	lsls	r2, r2, #27
 8003506:	d432      	bmi.n	800356e <USART1_IRQHandler+0x96>
  }

  /* USER CODE BEGIN USARTA_IRQn 1 */

  /* USER CODE END USARTA_IRQn 1 */
}
 8003508:	b004      	add	sp, #16
 800350a:	bd10      	pop	{r4, pc}
  tmpreg = USARTx->SR;
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003510:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003516:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800351c:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003522:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003528:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800352e:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	f042 0210 	orr.w	r2, r2, #16
 800353e:	60da      	str	r2, [r3, #12]
}
 8003540:	e7db      	b.n	80034fa <USART1_IRQHandler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8003542:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003544:	075c      	lsls	r4, r3, #29
 8003546:	d5d8      	bpl.n	80034fa <USART1_IRQHandler+0x22>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <USART1_IRQHandler+0xd0>)
 800354a:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 800354c:	07d0      	lsls	r0, r2, #31
 800354e:	d5d4      	bpl.n	80034fa <USART1_IRQHandler+0x22>
 8003550:	e7dc      	b.n	800350c <USART1_IRQHandler+0x34>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003552:	4916      	ldr	r1, [pc, #88]	; (80035ac <USART1_IRQHandler+0xd4>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003554:	4816      	ldr	r0, [pc, #88]	; (80035b0 <USART1_IRQHandler+0xd8>)
 8003556:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800355a:	f06f 0440 	mvn.w	r4, #64	; 0x40
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	f8c1 20b8 	str.w	r2, [r1, #184]	; 0xb8
 8003566:	601c      	str	r4, [r3, #0]
 8003568:	f7fd f936 	bl	80007d8 <ASPEP_HWDataTransmittedIT>
 800356c:	e7ba      	b.n	80034e4 <USART1_IRQHandler+0xc>
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800356e:	68da      	ldr	r2, [r3, #12]
  WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream) );
 8003570:	4910      	ldr	r1, [pc, #64]	; (80035b4 <USART1_IRQHandler+0xdc>)
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003572:	480f      	ldr	r0, [pc, #60]	; (80035b0 <USART1_IRQHandler+0xd8>)
 8003574:	f022 0210 	bic.w	r2, r2, #16
 8003578:	60da      	str	r2, [r3, #12]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	615a      	str	r2, [r3, #20]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003588:	615a      	str	r2, [r3, #20]
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800358a:	685a      	ldr	r2, [r3, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8003592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	f8c1 4408 	str.w	r4, [r1, #1032]	; 0x408
}
 800359c:	b004      	add	sp, #16
 800359e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 80035a2:	f7fd bb0d 	b.w	8000bc0 <ASPEP_HWDMAReset>
 80035a6:	bf00      	nop
 80035a8:	40011000 	.word	0x40011000
 80035ac:	40026400 	.word	0x40026400
 80035b0:	200004b4 	.word	0x200004b4
 80035b4:	40026000 	.word	0x40026000

080035b8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80035b8:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80035ba:	f7fe facd 	bl	8001b58 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80035be:	e7fe      	b.n	80035be <HardFault_Handler+0x6>

080035c0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80035c0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80035c2:	4c0a      	ldr	r4, [pc, #40]	; (80035ec <SysTick_Handler+0x2c>)
 80035c4:	7823      	ldrb	r3, [r4, #0]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d006      	beq.n	80035d8 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80035d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80035d4:	f7fe bab4 	b.w	8001b40 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80035d8:	f000 f8e6 	bl	80037a8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80035dc:	f000 fba2 	bl	8003d24 <HAL_SYSTICK_IRQHandler>
 80035e0:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80035e2:	7023      	strb	r3, [r4, #0]
}
 80035e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80035e8:	f7fe baaa 	b.w	8001b40 <MC_RunMotorControlTasks>
 80035ec:	2000052c 	.word	0x2000052c

080035f0 <EXTI2_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <EXTI2_IRQHandler+0x14>)
 80035f2:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PG2.
  */
void EXTI2_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_2) )
 80035f4:	0752      	lsls	r2, r2, #29
 80035f6:	d400      	bmi.n	80035fa <EXTI2_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_2);
    UI_HandleStartStopButton_cb ();
  }

}
 80035f8:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80035fa:	2204      	movs	r2, #4
 80035fc:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 80035fe:	f7fe babb 	b.w	8001b78 <UI_HandleStartStopButton_cb>
 8003602:	bf00      	nop
 8003604:	40013c00 	.word	0x40013c00

08003608 <UASPEP_INIT>:
}

void UASPEP_DAMCONFIG_TX (UASPEP_Handle_t *pHandle)
{
/* Enable DMA UART */
 LL_USART_ClearFlag_TC (pHandle->USARTx);
 8003608:	6803      	ldr	r3, [r0, #0]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800360a:	f06f 0140 	mvn.w	r1, #64	; 0x40
{
 800360e:	b430      	push	{r4, r5}
 8003610:	6019      	str	r1, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003612:	68da      	ldr	r2, [r3, #12]
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003614:	4d13      	ldr	r5, [pc, #76]	; (8003664 <UASPEP_INIT+0x5c>)
 8003616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800361a:	60da      	str	r2, [r3, #12]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003622:	615a      	str	r2, [r3, #20]
 8003624:	6902      	ldr	r2, [r0, #16]
 8003626:	f815 c002 	ldrb.w	ip, [r5, r2]
 800362a:	6882      	ldr	r2, [r0, #8]
 800362c:	4462      	add	r2, ip
/* Enable DMA UART to start the TX request */
 LL_USART_EnableDMAReq_TX (pHandle->USARTx);

/* Write the USART_TDR register address in the DMA control register to configure it as
the destination of the transfer. */
  LL_DMA_SetPeriphAddress ( pHandle->txDMA, pHandle->txChannel , ( uint32_t ) &pHandle->USARTx->DR );
 800362e:	1d1c      	adds	r4, r3, #4
 8003630:	6094      	str	r4, [r2, #8]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003632:	68c2      	ldr	r2, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003634:	6019      	str	r1, [r3, #0]
 8003636:	f815 c002 	ldrb.w	ip, [r5, r2]
 800363a:	6842      	ldr	r2, [r0, #4]
 800363c:	f852 000c 	ldr.w	r0, [r2, ip]
 8003640:	f040 0010 	orr.w	r0, r0, #16
 8003644:	f842 000c 	str.w	r0, [r2, ip]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003648:	6958      	ldr	r0, [r3, #20]
 800364a:	4462      	add	r2, ip
 800364c:	f040 0001 	orr.w	r0, r0, #1
 8003650:	6158      	str	r0, [r3, #20]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003652:	6094      	str	r4, [r2, #8]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003654:	6019      	str	r1, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
}
 800365c:	bc30      	pop	{r4, r5}
 800365e:	615a      	str	r2, [r3, #20]
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	0800758c 	.word	0x0800758c

08003668 <UASPEP_SEND_PACKET>:

 LL_USART_EnableDMAReq_RX (pHandle->USARTx);
}

bool UASPEP_SEND_PACKET (void *pHWHandle, void *data, uint16_t length)
{
 8003668:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  bool result;
  if ( LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel) )
 800366a:	6905      	ldr	r5, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 800366c:	4f17      	ldr	r7, [pc, #92]	; (80036cc <UASPEP_SEND_PACKET+0x64>)
 800366e:	6884      	ldr	r4, [r0, #8]
 8003670:	5d7b      	ldrb	r3, [r7, r5]
 8003672:	58e6      	ldr	r6, [r4, r3]
 8003674:	07f6      	lsls	r6, r6, #31
 8003676:	4423      	add	r3, r4
 8003678:	d419      	bmi.n	80036ae <UASPEP_SEND_PACKET+0x46>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800367a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	0c09      	lsrs	r1, r1, #16
 8003680:	0409      	lsls	r1, r1, #16
  register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003682:	2d03      	cmp	r5, #3
 8003684:	ea41 0102 	orr.w	r1, r1, r2
 8003688:	6059      	str	r1, [r3, #4]
 800368a:	f104 0308 	add.w	r3, r4, #8
 800368e:	bf88      	it	hi
 8003690:	f104 030c 	addhi.w	r3, r4, #12
  WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8003694:	f015 0503 	ands.w	r5, r5, #3
 8003698:	d10c      	bne.n	80036b4 <UASPEP_SEND_PACKET+0x4c>
 800369a:	2220      	movs	r2, #32
 800369c:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800369e:	6903      	ldr	r3, [r0, #16]
 80036a0:	5cfa      	ldrb	r2, [r7, r3]
 80036a2:	58a3      	ldr	r3, [r4, r2]
  else {
    LL_DMA_SetMemoryAddress( pHandle->txDMA, pHandle->txChannel, (uint32_t) data );
    LL_DMA_SetDataLength( pHandle->txDMA, pHandle->txChannel, length );
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel) ;
    LL_DMA_EnableStream( pHandle->txDMA, pHandle->txChannel );
   result = true;
 80036a4:	2001      	movs	r0, #1
 80036a6:	4303      	orrs	r3, r0
 80036a8:	50a3      	str	r3, [r4, r2]
  }
  return result;
}
 80036aa:	bcf0      	pop	{r4, r5, r6, r7}
 80036ac:	4770      	bx	lr
    result = false;
 80036ae:	2000      	movs	r0, #0
}
 80036b0:	bcf0      	pop	{r4, r5, r6, r7}
 80036b2:	4770      	bx	lr
 80036b4:	2d01      	cmp	r5, #1
 80036b6:	d006      	beq.n	80036c6 <UASPEP_SEND_PACKET+0x5e>
 80036b8:	2d02      	cmp	r5, #2
 80036ba:	bf0c      	ite	eq
 80036bc:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80036c0:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 80036c4:	e7ea      	b.n	800369c <UASPEP_SEND_PACKET+0x34>
 80036c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ca:	e7e7      	b.n	800369c <UASPEP_SEND_PACKET+0x34>
 80036cc:	0800758c 	.word	0x0800758c

080036d0 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER (void *pHWHandle, void* buffer, uint16_t length)
{
 80036d0:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80036d2:	68c3      	ldr	r3, [r0, #12]
 80036d4:	4d09      	ldr	r5, [pc, #36]	; (80036fc <UASPEP_RECEIVE_BUFFER+0x2c>)
 80036d6:	6844      	ldr	r4, [r0, #4]
 80036d8:	5ce8      	ldrb	r0, [r5, r3]
 80036da:	eb04 0c00 	add.w	ip, r4, r0
 80036de:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80036e2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80036f0:	5823      	ldr	r3, [r4, r0]
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  LL_DMA_SetMemoryAddress( pHandle->rxDMA, pHandle->rxChannel, (uint32_t) buffer );
  LL_DMA_SetDataLength(  pHandle->rxDMA, pHandle->rxChannel, length );
  LL_DMA_EnableStream(  pHandle->rxDMA, pHandle->rxChannel );
}
 80036f8:	bc30      	pop	{r4, r5}
 80036fa:	4770      	bx	lr
 80036fc:	0800758c 	.word	0x0800758c

08003700 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE (void *pHWHandle)
{
   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
   LL_USART_ClearFlag_IDLE (pHandle->USARTx);
 8003700:	6803      	ldr	r3, [r0, #0]
{
 8003702:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003708:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800370e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	f042 0210 	orr.w	r2, r2, #16
 8003716:	60da      	str	r2, [r3, #12]
   LL_USART_EnableIT_IDLE (pHandle->USARTx);
}
 8003718:	b002      	add	sp, #8
 800371a:	4770      	bx	lr

0800371c <SystemInit>:

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <SystemInit+0xc>)
 800371e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003722:	609a      	str	r2, [r3, #8]
#endif
}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800372c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800372e:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <HAL_InitTick+0x3c>)
 8003730:	4b0e      	ldr	r3, [pc, #56]	; (800376c <HAL_InitTick+0x40>)
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
{
 8003736:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800373c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003740:	fbb3 f0f0 	udiv	r0, r3, r0
 8003744:	f000 fad4 	bl	8003cf0 <HAL_SYSTICK_Config>
 8003748:	b908      	cbnz	r0, 800374e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800374a:	2d0f      	cmp	r5, #15
 800374c:	d901      	bls.n	8003752 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800374e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003750:	bd38      	pop	{r3, r4, r5, pc}
 8003752:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003754:	4602      	mov	r2, r0
 8003756:	4629      	mov	r1, r5
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f000 fa7c 	bl	8003c58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_InitTick+0x44>)
 8003762:	4620      	mov	r0, r4
 8003764:	601d      	str	r5, [r3, #0]
}
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	20000534 	.word	0x20000534
 800376c:	20000530 	.word	0x20000530
 8003770:	20000538 	.word	0x20000538

08003774 <HAL_Init>:
{
 8003774:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_Init+0x30>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003786:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800378e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003790:	2003      	movs	r0, #3
 8003792:	f000 fa4f 	bl	8003c34 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003796:	2004      	movs	r0, #4
 8003798:	f7ff ffc8 	bl	800372c <HAL_InitTick>
  HAL_MspInit();
 800379c:	f7ff fcaa 	bl	80030f4 <HAL_MspInit>
}
 80037a0:	2000      	movs	r0, #0
 80037a2:	bd08      	pop	{r3, pc}
 80037a4:	40023c00 	.word	0x40023c00

080037a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80037a8:	4a03      	ldr	r2, [pc, #12]	; (80037b8 <HAL_IncTick+0x10>)
 80037aa:	4b04      	ldr	r3, [pc, #16]	; (80037bc <HAL_IncTick+0x14>)
 80037ac:	6811      	ldr	r1, [r2, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	440b      	add	r3, r1
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20001aac 	.word	0x20001aac
 80037bc:	20000534 	.word	0x20000534

080037c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037c0:	4b01      	ldr	r3, [pc, #4]	; (80037c8 <HAL_GetTick+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20001aac 	.word	0x20001aac

080037cc <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037cc:	2800      	cmp	r0, #0
 80037ce:	f000 809f 	beq.w	8003910 <HAL_ADC_Init+0x144>
{
 80037d2:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037d4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80037d6:	4604      	mov	r4, r0
 80037d8:	b13d      	cbz	r5, 80037ea <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037dc:	06db      	lsls	r3, r3, #27
 80037de:	d50c      	bpl.n	80037fa <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037e0:	2300      	movs	r3, #0
 80037e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 80037e6:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 80037e8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80037ea:	f7ff fca1 	bl	8003130 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80037ee:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80037f2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037f6:	06db      	lsls	r3, r3, #27
 80037f8:	d4f2      	bmi.n	80037e0 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 80037fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037fc:	4a48      	ldr	r2, [pc, #288]	; (8003920 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 80037fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003802:	f023 0302 	bic.w	r3, r3, #2
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800380c:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800380e:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003810:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003814:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003816:	6851      	ldr	r1, [r2, #4]
 8003818:	6860      	ldr	r0, [r4, #4]
 800381a:	4301      	orrs	r1, r0
 800381c:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800381e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003820:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003822:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003830:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8003838:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	4302      	orrs	r2, r0
 800383e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003840:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003842:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003844:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003848:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800384a:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800384c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800384e:	4302      	orrs	r2, r0
 8003850:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003852:	4a34      	ldr	r2, [pc, #208]	; (8003924 <HAL_ADC_Init+0x158>)
 8003854:	4291      	cmp	r1, r2
 8003856:	d052      	beq.n	80038fe <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003858:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800385a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800385c:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8003860:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	4311      	orrs	r1, r2
 8003866:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003868:	6899      	ldr	r1, [r3, #8]
 800386a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800386e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	432a      	orrs	r2, r5
 8003874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	f022 0202 	bic.w	r2, r2, #2
 800387c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	7e21      	ldrb	r1, [r4, #24]
 8003882:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003886:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003888:	f894 2020 	ldrb.w	r2, [r4, #32]
 800388c:	2a00      	cmp	r2, #0
 800388e:	d041      	beq.n	8003914 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003890:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003892:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003894:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003898:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800389a:	6858      	ldr	r0, [r3, #4]
 800389c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80038a0:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038a2:	1e51      	subs	r1, r2, #1
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80038aa:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038ae:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038b0:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	3901      	subs	r1, #1
 80038bc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038c2:	6899      	ldr	r1, [r3, #8]
 80038c4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80038c8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80038d0:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80038d4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038d6:	6899      	ldr	r1, [r3, #8]
 80038d8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80038dc:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038de:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80038e0:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038e2:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80038e6:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80038e8:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80038ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038ec:	f023 0303 	bic.w	r3, r3, #3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80038f6:	2300      	movs	r3, #0
 80038f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80038fc:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800390c:	609a      	str	r2, [r3, #8]
 800390e:	e7b2      	b.n	8003876 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8003910:	2001      	movs	r0, #1
}
 8003912:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	e7c6      	b.n	80038ac <HAL_ADC_Init+0xe0>
 800391e:	bf00      	nop
 8003920:	40012300 	.word	0x40012300
 8003924:	0f000001 	.word	0x0f000001

08003928 <HAL_ADC_ConfigChannel>:
{
 8003928:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800392a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800392e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003930:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003932:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003934:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003936:	f000 809c 	beq.w	8003a72 <HAL_ADC_ConfigChannel+0x14a>
 800393a:	2301      	movs	r3, #1
 800393c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003940:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003942:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003944:	2c09      	cmp	r4, #9
 8003946:	d82d      	bhi.n	80039a4 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003948:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800394a:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800394c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003950:	f04f 0c07 	mov.w	ip, #7
 8003954:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003958:	ea25 050c 	bic.w	r5, r5, ip
 800395c:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800395e:	691d      	ldr	r5, [r3, #16]
 8003960:	fa02 f20e 	lsl.w	r2, r2, lr
 8003964:	432a      	orrs	r2, r5
 8003966:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8003968:	684a      	ldr	r2, [r1, #4]
 800396a:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800396c:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 800396e:	d82f      	bhi.n	80039d0 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003970:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003974:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003976:	3a05      	subs	r2, #5
 8003978:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800397c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003980:	fa0e f202 	lsl.w	r2, lr, r2
 8003984:	ea21 0202 	bic.w	r2, r1, r2
 8003988:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800398a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398c:	ea4c 0202 	orr.w	r2, ip, r2
 8003990:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003992:	4a39      	ldr	r2, [pc, #228]	; (8003a78 <HAL_ADC_ConfigChannel+0x150>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d030      	beq.n	80039fa <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8003998:	2300      	movs	r3, #0
 800399a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800399e:	4618      	mov	r0, r3
}
 80039a0:	b003      	add	sp, #12
 80039a2:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039a4:	fa1f fc84 	uxth.w	ip, r4
 80039a8:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80039ac:	68dd      	ldr	r5, [r3, #12]
 80039ae:	f1a2 0e1e 	sub.w	lr, r2, #30
 80039b2:	2207      	movs	r2, #7
 80039b4:	fa02 f20e 	lsl.w	r2, r2, lr
 80039b8:	ea25 0202 	bic.w	r2, r5, r2
 80039bc:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039be:	688a      	ldr	r2, [r1, #8]
 80039c0:	68dd      	ldr	r5, [r3, #12]
 80039c2:	fa02 f20e 	lsl.w	r2, r2, lr
 80039c6:	432a      	orrs	r2, r5
 80039c8:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80039ca:	684a      	ldr	r2, [r1, #4]
 80039cc:	2a06      	cmp	r2, #6
 80039ce:	d9cf      	bls.n	8003970 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 80039d0:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 80039d6:	d836      	bhi.n	8003a46 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039da:	3a23      	subs	r2, #35	; 0x23
 80039dc:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039de:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039e2:	fa05 f202 	lsl.w	r2, r5, r2
 80039e6:	ea21 0202 	bic.w	r2, r1, r2
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ee:	ea4c 0202 	orr.w	r2, ip, r2
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039f4:	4a20      	ldr	r2, [pc, #128]	; (8003a78 <HAL_ADC_ConfigChannel+0x150>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d1ce      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x70>
 80039fa:	2c12      	cmp	r4, #18
 80039fc:	d032      	beq.n	8003a64 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039fe:	f1a4 0310 	sub.w	r3, r4, #16
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d8c8      	bhi.n	8003998 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a06:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <HAL_ADC_ConfigChannel+0x154>)
 8003a08:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a0a:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a10:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a12:	d1c1      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_ADC_ConfigChannel+0x158>)
 8003a16:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8003a20:	f202 3283 	addw	r2, r2, #899	; 0x383
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	0c9b      	lsrs	r3, r3, #18
 8003a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003a32:	9b01      	ldr	r3, [sp, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0af      	beq.n	8003998 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003a38:	9b01      	ldr	r3, [sp, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003a3e:	9b01      	ldr	r3, [sp, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f9      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x110>
 8003a44:	e7a8      	b.n	8003998 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a48:	3a41      	subs	r2, #65	; 0x41
 8003a4a:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a4c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a50:	fa05 f202 	lsl.w	r2, r5, r2
 8003a54:	ea21 0202 	bic.w	r2, r1, r2
 8003a58:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	ea4c 0202 	orr.w	r2, ip, r2
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a62:	e796      	b.n	8003992 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a64:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003a68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a6c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a70:	e792      	b.n	8003998 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003a72:	2002      	movs	r0, #2
}
 8003a74:	b003      	add	sp, #12
 8003a76:	bd30      	pop	{r4, r5, pc}
 8003a78:	40012000 	.word	0x40012000
 8003a7c:	40012300 	.word	0x40012300
 8003a80:	20000530 	.word	0x20000530

08003a84 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a86:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003a8a:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	f000 80c8 	beq.w	8003c22 <HAL_ADCEx_InjectedConfigChannel+0x19e>
 8003a92:	2301      	movs	r3, #1
 8003a94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003a98:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003a9a:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003a9c:	2d09      	cmp	r5, #9
 8003a9e:	d868      	bhi.n	8003b72 <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003aa0:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003aa2:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003aa4:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8003aa8:	2707      	movs	r7, #7
 8003aaa:	fa07 f70c 	lsl.w	r7, r7, ip
 8003aae:	ea24 0407 	bic.w	r4, r4, r7
 8003ab2:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003ab4:	691c      	ldr	r4, [r3, #16]
 8003ab6:	fa02 f20c 	lsl.w	r2, r2, ip
 8003aba:	4322      	orrs	r2, r4
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003ac2:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003ac6:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003ac8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003ace:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003ad0:	f10e 32ff 	add.w	r2, lr, #4294967295
 8003ad4:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003ad8:	1ce2      	adds	r2, r4, #3
 8003ada:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003ade:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003ae4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003ae8:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003aec:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003af0:	fa0e f202 	lsl.w	r2, lr, r2
 8003af4:	ea27 0202 	bic.w	r2, r7, r2
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afc:	ea4c 0202 	orr.w	r2, ip, r2
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b02:	4a49      	ldr	r2, [pc, #292]	; (8003c28 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8003b04:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003b0e:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b10:	d066      	beq.n	8003be0 <HAL_ADCEx_InjectedConfigChannel+0x15c>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003b12:	4316      	orrs	r6, r2
 8003b14:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003b16:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003b18:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003b1a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003b1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	4332      	orrs	r2, r6
 8003b24:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003b26:	7d4a      	ldrb	r2, [r1, #21]
 8003b28:	2a00      	cmp	r2, #0
 8003b2a:	d034      	beq.n	8003b96 <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b32:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003b34:	7d0a      	ldrb	r2, [r1, #20]
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	d034      	beq.n	8003ba4 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003b3a:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8003b3c:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003b3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b42:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003b44:	d034      	beq.n	8003bb0 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 8003b46:	2c03      	cmp	r4, #3
 8003b48:	d059      	beq.n	8003bfe <HAL_ADCEx_InjectedConfigChannel+0x17a>
 8003b4a:	2c01      	cmp	r4, #1
 8003b4c:	d04c      	beq.n	8003be8 <HAL_ADCEx_InjectedConfigChannel+0x164>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003b50:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003b52:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003b56:	f022 020f 	bic.w	r2, r2, #15
 8003b5a:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003b62:	4a32      	ldr	r2, [pc, #200]	; (8003c2c <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d030      	beq.n	8003bca <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b6e:	4618      	mov	r0, r3
}
 8003b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003b72:	fa1f fc85 	uxth.w	ip, r5
 8003b76:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003b7a:	f1a2 041e 	sub.w	r4, r2, #30
 8003b7e:	2707      	movs	r7, #7
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	40a7      	lsls	r7, r4
 8003b84:	ea22 0207 	bic.w	r2, r2, r7
 8003b88:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003b8a:	688a      	ldr	r2, [r1, #8]
 8003b8c:	40a2      	lsls	r2, r4
 8003b8e:	68dc      	ldr	r4, [r3, #12]
 8003b90:	4322      	orrs	r2, r4
 8003b92:	60da      	str	r2, [r3, #12]
 8003b94:	e794      	b.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9c:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003b9e:	7d0a      	ldrb	r2, [r1, #20]
 8003ba0:	2a00      	cmp	r2, #0
 8003ba2:	d1ca      	bne.n	8003b3a <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003ba4:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003ba6:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003ba8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bac:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003bae:	d1ca      	bne.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003bb0:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003bb2:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003bb4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003bb8:	f022 020f 	bic.w	r2, r2, #15
 8003bbc:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003bbe:	699a      	ldr	r2, [r3, #24]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003bc4:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d1ce      	bne.n	8003b68 <HAL_ADCEx_InjectedConfigChannel+0xe4>
 8003bca:	2d12      	cmp	r5, #18
 8003bcc:	d022      	beq.n	8003c14 <HAL_ADCEx_InjectedConfigChannel+0x190>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003bce:	3d10      	subs	r5, #16
 8003bd0:	2d01      	cmp	r5, #1
 8003bd2:	d8c9      	bhi.n	8003b68 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bd4:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 8003bd6:	6853      	ldr	r3, [r2, #4]
 8003bd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bdc:	6053      	str	r3, [r2, #4]
 8003bde:	e7c3      	b.n	8003b68 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003be0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003be4:	609a      	str	r2, [r3, #8]
 8003be6:	e79e      	b.n	8003b26 <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003be8:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003bea:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003bec:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003bf0:	f022 020f 	bic.w	r2, r2, #15
 8003bf4:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	615a      	str	r2, [r3, #20]
      break;
 8003bfc:	e7b1      	b.n	8003b62 <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003bfe:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003c00:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003c02:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003c06:	f022 020f 	bic.w	r2, r2, #15
 8003c0a:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	61da      	str	r2, [r3, #28]
      break;
 8003c12:	e7a6      	b.n	8003b62 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c14:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003c18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003c20:	e7a2      	b.n	8003b68 <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 8003c22:	2002      	movs	r0, #2
}
 8003c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c26:	bf00      	nop
 8003c28:	000f0001 	.word	0x000f0001
 8003c2c:	40012000 	.word	0x40012000
 8003c30:	40012300 	.word	0x40012300

08003c34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c34:	4907      	ldr	r1, [pc, #28]	; (8003c54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003c36:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c42:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c44:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c46:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003c4e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_NVIC_SetPriority+0x74>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c60:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c62:	f1c3 0e07 	rsb	lr, r3, #7
 8003c66:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c6e:	bf28      	it	cs
 8003c70:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c74:	f1bc 0f06 	cmp.w	ip, #6
 8003c78:	d91b      	bls.n	8003cb2 <HAL_NVIC_SetPriority+0x5a>
 8003c7a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c7c:	f04f 3cff 	mov.w	ip, #4294967295
 8003c80:	fa0c fc03 	lsl.w	ip, ip, r3
 8003c84:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	f04f 3cff 	mov.w	ip, #4294967295
 8003c8c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003c90:	ea21 010c 	bic.w	r1, r1, ip
 8003c94:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003c96:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003c9c:	db0c      	blt.n	8003cb8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003ca2:	0109      	lsls	r1, r1, #4
 8003ca4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003ca8:	b2c9      	uxtb	r1, r1
 8003caa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cb2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	e7e7      	b.n	8003c88 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_NVIC_SetPriority+0x78>)
 8003cba:	f000 000f 	and.w	r0, r0, #15
 8003cbe:	0109      	lsls	r1, r1, #4
 8003cc0:	4403      	add	r3, r0
 8003cc2:	b2c9      	uxtb	r1, r1
 8003cc4:	7619      	strb	r1, [r3, #24]
 8003cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cca:	bf00      	nop
 8003ccc:	e000ed00 	.word	0xe000ed00
 8003cd0:	e000ecfc 	.word	0xe000ecfc

08003cd4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	db08      	blt.n	8003cea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cd8:	0941      	lsrs	r1, r0, #5
 8003cda:	4a04      	ldr	r2, [pc, #16]	; (8003cec <HAL_NVIC_EnableIRQ+0x18>)
 8003cdc:	f000 001f 	and.w	r0, r0, #31
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ce6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003cea:	4770      	bx	lr
 8003cec:	e000e100 	.word	0xe000e100

08003cf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cf0:	3801      	subs	r0, #1
 8003cf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003cf6:	d20f      	bcs.n	8003d18 <HAL_SYSTICK_Config+0x28>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cf8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cfa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	4c07      	ldr	r4, [pc, #28]	; (8003d1c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d00:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d02:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003d06:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d0a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d0c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d0e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d10:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003d12:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d14:	6119      	str	r1, [r3, #16]
 8003d16:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003d18:	2001      	movs	r0, #1
 8003d1a:	4770      	bx	lr
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_SYSTICK_IRQHandler>:
{
 8003d24:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003d26:	f7ff fffb 	bl	8003d20 <HAL_SYSTICK_Callback>
}
 8003d2a:	bd08      	pop	{r3, pc}

08003d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003d30:	f7ff fd46 	bl	80037c0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d34:	2c00      	cmp	r4, #0
 8003d36:	d052      	beq.n	8003dde <HAL_DMA_Init+0xb2>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d38:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d3a:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d42:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d50:	e005      	b.n	8003d5e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d52:	f7ff fd35 	bl	80037c0 <HAL_GetTick>
 8003d56:	1b43      	subs	r3, r0, r5
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d839      	bhi.n	8003dd0 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	07d1      	lsls	r1, r2, #31
 8003d62:	d4f6      	bmi.n	8003d52 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d64:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003d68:	68e1      	ldr	r1, [r4, #12]
 8003d6a:	4302      	orrs	r2, r0
 8003d6c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d72:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	432a      	orrs	r2, r5
 8003d76:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d78:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8003d7a:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7c:	4302      	orrs	r2, r0
 8003d7e:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d80:	4933      	ldr	r1, [pc, #204]	; (8003e50 <HAL_DMA_Init+0x124>)
 8003d82:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d84:	6a25      	ldr	r5, [r4, #32]
 8003d86:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d88:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d8c:	2904      	cmp	r1, #4
 8003d8e:	d028      	beq.n	8003de2 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d90:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d92:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d94:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d98:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d9a:	b2d8      	uxtb	r0, r3
 8003d9c:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8003d9e:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003da0:	3810      	subs	r0, #16
 8003da2:	fba2 5200 	umull	r5, r2, r2, r0
 8003da6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003da8:	492b      	ldr	r1, [pc, #172]	; (8003e58 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dae:	5c89      	ldrb	r1, [r1, r2]
 8003db0:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003db2:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8003db6:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003db8:	bf88      	it	hi
 8003dba:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dbc:	223f      	movs	r2, #63	; 0x3f
 8003dbe:	408a      	lsls	r2, r1
 8003dc0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc2:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc4:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8003dc6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003dca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dd6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8003dda:	4618      	mov	r0, r3
}
 8003ddc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003dde:	2001      	movs	r0, #1
}
 8003de0:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003de2:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8003de6:	4329      	orrs	r1, r5
 8003de8:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8003dea:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003dec:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8003dee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003df0:	f021 0107 	bic.w	r1, r1, #7
 8003df4:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8003df6:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dfa:	2d00      	cmp	r5, #0
 8003dfc:	d0cd      	beq.n	8003d9a <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dfe:	b178      	cbz	r0, 8003e20 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e00:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003e04:	d016      	beq.n	8003e34 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e06:	2a02      	cmp	r2, #2
 8003e08:	d903      	bls.n	8003e12 <HAL_DMA_Init+0xe6>
 8003e0a:	2a03      	cmp	r2, #3
 8003e0c:	d1c5      	bne.n	8003d9a <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e0e:	01ea      	lsls	r2, r5, #7
 8003e10:	d5c3      	bpl.n	8003d9a <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8003e12:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e14:	2240      	movs	r2, #64	; 0x40
 8003e16:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003e18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8003e1c:	4618      	mov	r0, r3
}
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8003e20:	2a01      	cmp	r2, #1
 8003e22:	d003      	beq.n	8003e2c <HAL_DMA_Init+0x100>
 8003e24:	f032 0202 	bics.w	r2, r2, #2
 8003e28:	d1b7      	bne.n	8003d9a <HAL_DMA_Init+0x6e>
 8003e2a:	e7f0      	b.n	8003e0e <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e2c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003e30:	d1b3      	bne.n	8003d9a <HAL_DMA_Init+0x6e>
 8003e32:	e7ee      	b.n	8003e12 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8003e34:	2a03      	cmp	r2, #3
 8003e36:	d8b0      	bhi.n	8003d9a <HAL_DMA_Init+0x6e>
 8003e38:	a001      	add	r0, pc, #4	; (adr r0, 8003e40 <HAL_DMA_Init+0x114>)
 8003e3a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e13 	.word	0x08003e13
 8003e44:	08003e0f 	.word	0x08003e0f
 8003e48:	08003e13 	.word	0x08003e13
 8003e4c:	08003e2d 	.word	0x08003e2d
 8003e50:	f010803f 	.word	0xf010803f
 8003e54:	aaaaaaab 	.word	0xaaaaaaab
 8003e58:	080075ac 	.word	0x080075ac

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e60:	2200      	movs	r2, #0
 8003e62:	680d      	ldr	r5, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e64:	f8df a240 	ldr.w	sl, [pc, #576]	; 80040a8 <HAL_GPIO_Init+0x24c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e68:	4e90      	ldr	r6, [pc, #576]	; (80040ac <HAL_GPIO_Init+0x250>)
{
 8003e6a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	e005      	b.n	8003e7c <HAL_GPIO_Init+0x20>
 8003e70:	3301      	adds	r3, #1
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	f102 0202 	add.w	r2, r2, #2
 8003e78:	f000 80a5 	beq.w	8003fc6 <HAL_GPIO_Init+0x16a>
    ioposition = 0x01U << position;
 8003e7c:	2401      	movs	r4, #1
 8003e7e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e80:	ea04 0b05 	and.w	fp, r4, r5
    if(iocurrent == ioposition)
 8003e84:	43ac      	bics	r4, r5
 8003e86:	d1f3      	bne.n	8003e70 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e88:	684f      	ldr	r7, [r1, #4]
 8003e8a:	f027 0e10 	bic.w	lr, r7, #16
 8003e8e:	f10e 34ff 	add.w	r4, lr, #4294967295
 8003e92:	2c01      	cmp	r4, #1
 8003e94:	f240 809a 	bls.w	8003fcc <HAL_GPIO_Init+0x170>
      temp = GPIOx->PUPDR;
 8003e98:	f8d0 e00c 	ldr.w	lr, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e9c:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e9e:	f04f 0c03 	mov.w	ip, #3
 8003ea2:	fa0c fc02 	lsl.w	ip, ip, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ea6:	4094      	lsls	r4, r2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ea8:	ea2e 0e0c 	bic.w	lr, lr, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eac:	ea44 040e 	orr.w	r4, r4, lr
      GPIOx->PUPDR = temp;
 8003eb0:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eb2:	ea6f 040c 	mvn.w	r4, ip
      temp = GPIOx->MODER;
 8003eb6:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eba:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ebe:	f007 0403 	and.w	r4, r7, #3
 8003ec2:	4094      	lsls	r4, r2
 8003ec4:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003ec8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eca:	00fc      	lsls	r4, r7, #3
 8003ecc:	d5d0      	bpl.n	8003e70 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ece:	2400      	movs	r4, #0
 8003ed0:	9403      	str	r4, [sp, #12]
 8003ed2:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
 8003ed6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003eda:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8003ede:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
 8003ee2:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8003ee6:	9403      	str	r4, [sp, #12]
 8003ee8:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003eea:	f023 0403 	bic.w	r4, r3, #3
 8003eee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003ef2:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ef6:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003efa:	f8d4 8008 	ldr.w	r8, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003efe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003f02:	f04f 0c0f 	mov.w	ip, #15
 8003f06:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003f0a:	ea28 0c0c 	bic.w	ip, r8, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f0e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80040b0 <HAL_GPIO_Init+0x254>
 8003f12:	4540      	cmp	r0, r8
 8003f14:	d029      	beq.n	8003f6a <HAL_GPIO_Init+0x10e>
 8003f16:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8003f1a:	4540      	cmp	r0, r8
 8003f1c:	f000 809a 	beq.w	8004054 <HAL_GPIO_Init+0x1f8>
 8003f20:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80040b4 <HAL_GPIO_Init+0x258>
 8003f24:	4540      	cmp	r0, r8
 8003f26:	f000 809c 	beq.w	8004062 <HAL_GPIO_Init+0x206>
 8003f2a:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80040b8 <HAL_GPIO_Init+0x25c>
 8003f2e:	4540      	cmp	r0, r8
 8003f30:	f000 809e 	beq.w	8004070 <HAL_GPIO_Init+0x214>
 8003f34:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80040bc <HAL_GPIO_Init+0x260>
 8003f38:	4540      	cmp	r0, r8
 8003f3a:	f000 80a0 	beq.w	800407e <HAL_GPIO_Init+0x222>
 8003f3e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80040c0 <HAL_GPIO_Init+0x264>
 8003f42:	4540      	cmp	r0, r8
 8003f44:	f000 80a2 	beq.w	800408c <HAL_GPIO_Init+0x230>
 8003f48:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80040c4 <HAL_GPIO_Init+0x268>
 8003f4c:	4540      	cmp	r0, r8
 8003f4e:	f000 80a4 	beq.w	800409a <HAL_GPIO_Init+0x23e>
 8003f52:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80040c8 <HAL_GPIO_Init+0x26c>
 8003f56:	4540      	cmp	r0, r8
 8003f58:	bf0c      	ite	eq
 8003f5a:	f04f 0807 	moveq.w	r8, #7
 8003f5e:	f04f 0808 	movne.w	r8, #8
 8003f62:	fa08 fe0e 	lsl.w	lr, r8, lr
 8003f66:	ea4c 0c0e 	orr.w	ip, ip, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f6a:	f8c4 c008 	str.w	ip, [r4, #8]
        temp = EXTI->IMR;
 8003f6e:	6834      	ldr	r4, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8003f70:	ea6f 0c0b 	mvn.w	ip, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f74:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8003f78:	bf0c      	ite	eq
 8003f7a:	ea0c 0404 	andeq.w	r4, ip, r4
        {
          temp |= iocurrent;
 8003f7e:	ea4b 0404 	orrne.w	r4, fp, r4
        }
        EXTI->IMR = temp;
 8003f82:	6034      	str	r4, [r6, #0]

        temp = EXTI->EMR;
 8003f84:	6874      	ldr	r4, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f86:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003f8a:	bf0c      	ite	eq
 8003f8c:	ea0c 0404 	andeq.w	r4, ip, r4
        {
          temp |= iocurrent;
 8003f90:	ea4b 0404 	orrne.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 8003f94:	6074      	str	r4, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f96:	68b4      	ldr	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f98:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003f9c:	bf0c      	ite	eq
 8003f9e:	ea0c 0404 	andeq.w	r4, ip, r4
        {
          temp |= iocurrent;
 8003fa2:	ea4b 0404 	orrne.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8003fa6:	60b4      	str	r4, [r6, #8]

        temp = EXTI->FTSR;
 8003fa8:	68f4      	ldr	r4, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003faa:	02bf      	lsls	r7, r7, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fac:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	bf54      	ite	pl
 8003fb2:	ea0c 0404 	andpl.w	r4, ip, r4
        {
          temp |= iocurrent;
 8003fb6:	ea4b 0404 	orrmi.w	r4, fp, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fba:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8003fbc:	60f4      	str	r4, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fbe:	f102 0202 	add.w	r2, r2, #2
 8003fc2:	f47f af5b 	bne.w	8003e7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fc6:	b005      	add	sp, #20
 8003fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003fcc:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd0:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fd2:	f04f 0903 	mov.w	r9, #3
 8003fd6:	fa09 f902 	lsl.w	r9, r9, r2
 8003fda:	ea2c 0c09 	bic.w	ip, ip, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fde:	4094      	lsls	r4, r2
 8003fe0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8003fe4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003fe6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe8:	ea24 0c0b 	bic.w	ip, r4, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fec:	f3c7 1400 	ubfx	r4, r7, #4, #1
 8003ff0:	409c      	lsls	r4, r3
 8003ff2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003ff6:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003ff8:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ffa:	f8d1 c008 	ldr.w	ip, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ffe:	ea24 0809 	bic.w	r8, r4, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004002:	fa0c fc02 	lsl.w	ip, ip, r2
 8004006:	ea4c 0c08 	orr.w	ip, ip, r8
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800400a:	f1be 0f02 	cmp.w	lr, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800400e:	ea6f 0409 	mvn.w	r4, r9
      GPIOx->PUPDR = temp;
 8004012:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004016:	f47f af4e 	bne.w	8003eb6 <HAL_GPIO_Init+0x5a>
        temp = GPIOx->AFR[position >> 3U];
 800401a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800401e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004022:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004026:	f8de c020 	ldr.w	ip, [lr, #32]
 800402a:	f8cd c004 	str.w	ip, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800402e:	f8d1 c010 	ldr.w	ip, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004032:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8004036:	f04f 090f 	mov.w	r9, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800403a:	fa0c fc08 	lsl.w	ip, ip, r8
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800403e:	fa09 f808 	lsl.w	r8, r9, r8
 8004042:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004046:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800404a:	ea4c 0c09 	orr.w	ip, ip, r9
        GPIOx->AFR[position >> 3U] = temp;
 800404e:	f8ce c020 	str.w	ip, [lr, #32]
 8004052:	e730      	b.n	8003eb6 <HAL_GPIO_Init+0x5a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004054:	f04f 0801 	mov.w	r8, #1
 8004058:	fa08 fe0e 	lsl.w	lr, r8, lr
 800405c:	ea4c 0c0e 	orr.w	ip, ip, lr
 8004060:	e783      	b.n	8003f6a <HAL_GPIO_Init+0x10e>
 8004062:	f04f 0802 	mov.w	r8, #2
 8004066:	fa08 fe0e 	lsl.w	lr, r8, lr
 800406a:	ea4c 0c0e 	orr.w	ip, ip, lr
 800406e:	e77c      	b.n	8003f6a <HAL_GPIO_Init+0x10e>
 8004070:	f04f 0803 	mov.w	r8, #3
 8004074:	fa08 fe0e 	lsl.w	lr, r8, lr
 8004078:	ea4c 0c0e 	orr.w	ip, ip, lr
 800407c:	e775      	b.n	8003f6a <HAL_GPIO_Init+0x10e>
 800407e:	f04f 0804 	mov.w	r8, #4
 8004082:	fa08 fe0e 	lsl.w	lr, r8, lr
 8004086:	ea4c 0c0e 	orr.w	ip, ip, lr
 800408a:	e76e      	b.n	8003f6a <HAL_GPIO_Init+0x10e>
 800408c:	f04f 0805 	mov.w	r8, #5
 8004090:	fa08 fe0e 	lsl.w	lr, r8, lr
 8004094:	ea4c 0c0e 	orr.w	ip, ip, lr
 8004098:	e767      	b.n	8003f6a <HAL_GPIO_Init+0x10e>
 800409a:	f04f 0806 	mov.w	r8, #6
 800409e:	fa08 fe0e 	lsl.w	lr, r8, lr
 80040a2:	ea4c 0c0e 	orr.w	ip, ip, lr
 80040a6:	e760      	b.n	8003f6a <HAL_GPIO_Init+0x10e>
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40013c00 	.word	0x40013c00
 80040b0:	40020000 	.word	0x40020000
 80040b4:	40020800 	.word	0x40020800
 80040b8:	40020c00 	.word	0x40020c00
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40021400 	.word	0x40021400
 80040c4:	40021800 	.word	0x40021800
 80040c8:	40021c00 	.word	0x40021c00

080040cc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040cc:	2800      	cmp	r0, #0
 80040ce:	f000 819c 	beq.w	800440a <HAL_RCC_OscConfig+0x33e>
{
 80040d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d6:	6803      	ldr	r3, [r0, #0]
 80040d8:	07dd      	lsls	r5, r3, #31
{
 80040da:	b082      	sub	sp, #8
 80040dc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040de:	d52f      	bpl.n	8004140 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040e0:	499e      	ldr	r1, [pc, #632]	; (800435c <HAL_RCC_OscConfig+0x290>)
 80040e2:	688a      	ldr	r2, [r1, #8]
 80040e4:	f002 020c 	and.w	r2, r2, #12
 80040e8:	2a04      	cmp	r2, #4
 80040ea:	f000 80ed 	beq.w	80042c8 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ee:	688a      	ldr	r2, [r1, #8]
 80040f0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040f4:	2a08      	cmp	r2, #8
 80040f6:	f000 80e3 	beq.w	80042c0 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fa:	6863      	ldr	r3, [r4, #4]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	f000 80ec 	beq.w	80042dc <HAL_RCC_OscConfig+0x210>
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004108:	f000 816f 	beq.w	80043ea <HAL_RCC_OscConfig+0x31e>
 800410c:	4d93      	ldr	r5, [pc, #588]	; (800435c <HAL_RCC_OscConfig+0x290>)
 800410e:	682a      	ldr	r2, [r5, #0]
 8004110:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004114:	602a      	str	r2, [r5, #0]
 8004116:	682a      	ldr	r2, [r5, #0]
 8004118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800411c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 80e1 	bne.w	80042e6 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7ff fb4c 	bl	80037c0 <HAL_GetTick>
 8004128:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412a:	e005      	b.n	8004138 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412c:	f7ff fb48 	bl	80037c0 <HAL_GetTick>
 8004130:	1b80      	subs	r0, r0, r6
 8004132:	2864      	cmp	r0, #100	; 0x64
 8004134:	f200 8101 	bhi.w	800433a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	039b      	lsls	r3, r3, #14
 800413c:	d4f6      	bmi.n	800412c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	079f      	lsls	r7, r3, #30
 8004142:	d528      	bpl.n	8004196 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004144:	4a85      	ldr	r2, [pc, #532]	; (800435c <HAL_RCC_OscConfig+0x290>)
 8004146:	6891      	ldr	r1, [r2, #8]
 8004148:	f011 0f0c 	tst.w	r1, #12
 800414c:	f000 8090 	beq.w	8004270 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004150:	6891      	ldr	r1, [r2, #8]
 8004152:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004156:	2908      	cmp	r1, #8
 8004158:	f000 8086 	beq.w	8004268 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800415c:	68e3      	ldr	r3, [r4, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 810e 	beq.w	8004380 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004164:	4b7e      	ldr	r3, [pc, #504]	; (8004360 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004166:	4e7d      	ldr	r6, [pc, #500]	; (800435c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8004168:	2201      	movs	r2, #1
 800416a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800416c:	f7ff fb28 	bl	80037c0 <HAL_GetTick>
 8004170:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	e005      	b.n	8004180 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004174:	f7ff fb24 	bl	80037c0 <HAL_GetTick>
 8004178:	1b40      	subs	r0, r0, r5
 800417a:	2802      	cmp	r0, #2
 800417c:	f200 80dd 	bhi.w	800433a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	6833      	ldr	r3, [r6, #0]
 8004182:	0798      	lsls	r0, r3, #30
 8004184:	d5f6      	bpl.n	8004174 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	6833      	ldr	r3, [r6, #0]
 8004188:	6922      	ldr	r2, [r4, #16]
 800418a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800418e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004192:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	071a      	lsls	r2, r3, #28
 8004198:	d451      	bmi.n	800423e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419a:	0758      	lsls	r0, r3, #29
 800419c:	d52f      	bpl.n	80041fe <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4a6f      	ldr	r2, [pc, #444]	; (800435c <HAL_RCC_OscConfig+0x290>)
 80041a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80041a2:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80041a6:	d07f      	beq.n	80042a8 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 80041a8:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041aa:	4e6e      	ldr	r6, [pc, #440]	; (8004364 <HAL_RCC_OscConfig+0x298>)
 80041ac:	6833      	ldr	r3, [r6, #0]
 80041ae:	05d9      	lsls	r1, r3, #23
 80041b0:	f140 80b3 	bpl.w	800431a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b4:	68a3      	ldr	r3, [r4, #8]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	f000 80c3 	beq.w	8004342 <HAL_RCC_OscConfig+0x276>
 80041bc:	2b05      	cmp	r3, #5
 80041be:	f000 8126 	beq.w	800440e <HAL_RCC_OscConfig+0x342>
 80041c2:	4e66      	ldr	r6, [pc, #408]	; (800435c <HAL_RCC_OscConfig+0x290>)
 80041c4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	6732      	str	r2, [r6, #112]	; 0x70
 80041cc:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80041ce:	f022 0204 	bic.w	r2, r2, #4
 80041d2:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 80b9 	bne.w	800434c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041da:	f7ff faf1 	bl	80037c0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80041e2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e4:	e005      	b.n	80041f2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7ff faeb 	bl	80037c0 <HAL_GetTick>
 80041ea:	1bc0      	subs	r0, r0, r7
 80041ec:	4540      	cmp	r0, r8
 80041ee:	f200 80a4 	bhi.w	800433a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80041f4:	0798      	lsls	r0, r3, #30
 80041f6:	d4f6      	bmi.n	80041e6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	f040 8100 	bne.w	80043fe <HAL_RCC_OscConfig+0x332>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041fe:	69a0      	ldr	r0, [r4, #24]
 8004200:	b1c8      	cbz	r0, 8004236 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004202:	4d56      	ldr	r5, [pc, #344]	; (800435c <HAL_RCC_OscConfig+0x290>)
 8004204:	68ab      	ldr	r3, [r5, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b08      	cmp	r3, #8
 800420c:	f000 80c9 	beq.w	80043a2 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_OscConfig+0x294>)
 8004212:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004214:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004218:	f000 8103 	beq.w	8004422 <HAL_RCC_OscConfig+0x356>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7ff fad0 	bl	80037c0 <HAL_GetTick>
 8004220:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	e005      	b.n	8004230 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004224:	f7ff facc 	bl	80037c0 <HAL_GetTick>
 8004228:	1b00      	subs	r0, r0, r4
 800422a:	2802      	cmp	r0, #2
 800422c:	f200 8085 	bhi.w	800433a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	019b      	lsls	r3, r3, #6
 8004234:	d4f6      	bmi.n	8004224 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004236:	2000      	movs	r0, #0
}
 8004238:	b002      	add	sp, #8
 800423a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800423e:	6963      	ldr	r3, [r4, #20]
 8004240:	b30b      	cbz	r3, 8004286 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004244:	4e45      	ldr	r6, [pc, #276]	; (800435c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8004246:	2201      	movs	r2, #1
 8004248:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800424c:	f7ff fab8 	bl	80037c0 <HAL_GetTick>
 8004250:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004252:	e004      	b.n	800425e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004254:	f7ff fab4 	bl	80037c0 <HAL_GetTick>
 8004258:	1b40      	subs	r0, r0, r5
 800425a:	2802      	cmp	r0, #2
 800425c:	d86d      	bhi.n	800433a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004260:	079b      	lsls	r3, r3, #30
 8004262:	d5f7      	bpl.n	8004254 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	e798      	b.n	800419a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004268:	6852      	ldr	r2, [r2, #4]
 800426a:	0256      	lsls	r6, r2, #9
 800426c:	f53f af76 	bmi.w	800415c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004270:	4a3a      	ldr	r2, [pc, #232]	; (800435c <HAL_RCC_OscConfig+0x290>)
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	0795      	lsls	r5, r2, #30
 8004276:	d544      	bpl.n	8004302 <HAL_RCC_OscConfig+0x236>
 8004278:	68e2      	ldr	r2, [r4, #12]
 800427a:	2a01      	cmp	r2, #1
 800427c:	d041      	beq.n	8004302 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 800427e:	2001      	movs	r0, #1
}
 8004280:	b002      	add	sp, #8
 8004282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004286:	4a36      	ldr	r2, [pc, #216]	; (8004360 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	4e34      	ldr	r6, [pc, #208]	; (800435c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800428a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800428e:	f7ff fa97 	bl	80037c0 <HAL_GetTick>
 8004292:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	e004      	b.n	80042a0 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004296:	f7ff fa93 	bl	80037c0 <HAL_GetTick>
 800429a:	1b40      	subs	r0, r0, r5
 800429c:	2802      	cmp	r0, #2
 800429e:	d84c      	bhi.n	800433a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80042a2:	079f      	lsls	r7, r3, #30
 80042a4:	d4f7      	bmi.n	8004296 <HAL_RCC_OscConfig+0x1ca>
 80042a6:	e7dd      	b.n	8004264 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80042ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40
 80042b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80042bc:	2501      	movs	r5, #1
 80042be:	e774      	b.n	80041aa <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c0:	684a      	ldr	r2, [r1, #4]
 80042c2:	0250      	lsls	r0, r2, #9
 80042c4:	f57f af19 	bpl.w	80040fa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	4a24      	ldr	r2, [pc, #144]	; (800435c <HAL_RCC_OscConfig+0x290>)
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	0391      	lsls	r1, r2, #14
 80042ce:	f57f af37 	bpl.w	8004140 <HAL_RCC_OscConfig+0x74>
 80042d2:	6862      	ldr	r2, [r4, #4]
 80042d4:	2a00      	cmp	r2, #0
 80042d6:	f47f af33 	bne.w	8004140 <HAL_RCC_OscConfig+0x74>
 80042da:	e7d0      	b.n	800427e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042dc:	4a1f      	ldr	r2, [pc, #124]	; (800435c <HAL_RCC_OscConfig+0x290>)
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042e6:	f7ff fa6b 	bl	80037c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4e1c      	ldr	r6, [pc, #112]	; (800435c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80042ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	e004      	b.n	80042fa <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f0:	f7ff fa66 	bl	80037c0 <HAL_GetTick>
 80042f4:	1b40      	subs	r0, r0, r5
 80042f6:	2864      	cmp	r0, #100	; 0x64
 80042f8:	d81f      	bhi.n	800433a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	6833      	ldr	r3, [r6, #0]
 80042fc:	039a      	lsls	r2, r3, #14
 80042fe:	d5f7      	bpl.n	80042f0 <HAL_RCC_OscConfig+0x224>
 8004300:	e71d      	b.n	800413e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004302:	4916      	ldr	r1, [pc, #88]	; (800435c <HAL_RCC_OscConfig+0x290>)
 8004304:	6920      	ldr	r0, [r4, #16]
 8004306:	680a      	ldr	r2, [r1, #0]
 8004308:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800430c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004310:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004312:	071a      	lsls	r2, r3, #28
 8004314:	f57f af41 	bpl.w	800419a <HAL_RCC_OscConfig+0xce>
 8004318:	e791      	b.n	800423e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431a:	6833      	ldr	r3, [r6, #0]
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004322:	f7ff fa4d 	bl	80037c0 <HAL_GetTick>
 8004326:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	05da      	lsls	r2, r3, #23
 800432c:	f53f af42 	bmi.w	80041b4 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004330:	f7ff fa46 	bl	80037c0 <HAL_GetTick>
 8004334:	1bc0      	subs	r0, r0, r7
 8004336:	2802      	cmp	r0, #2
 8004338:	d9f6      	bls.n	8004328 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800433a:	2003      	movs	r0, #3
}
 800433c:	b002      	add	sp, #8
 800433e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004342:	4a06      	ldr	r2, [pc, #24]	; (800435c <HAL_RCC_OscConfig+0x290>)
 8004344:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800434c:	f7ff fa38 	bl	80037c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004350:	4f02      	ldr	r7, [pc, #8]	; (800435c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004352:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004358:	e00b      	b.n	8004372 <HAL_RCC_OscConfig+0x2a6>
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	42470000 	.word	0x42470000
 8004364:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7ff fa2a 	bl	80037c0 <HAL_GetTick>
 800436c:	1b80      	subs	r0, r0, r6
 800436e:	4540      	cmp	r0, r8
 8004370:	d8e3      	bhi.n	800433a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004374:	079b      	lsls	r3, r3, #30
 8004376:	d5f7      	bpl.n	8004368 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004378:	2d00      	cmp	r5, #0
 800437a:	f43f af40 	beq.w	80041fe <HAL_RCC_OscConfig+0x132>
 800437e:	e03e      	b.n	80043fe <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_DISABLE();
 8004380:	4a3e      	ldr	r2, [pc, #248]	; (800447c <HAL_RCC_OscConfig+0x3b0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	4e3f      	ldr	r6, [pc, #252]	; (8004480 <HAL_RCC_OscConfig+0x3b4>)
        __HAL_RCC_HSI_DISABLE();
 8004384:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004386:	f7ff fa1b 	bl	80037c0 <HAL_GetTick>
 800438a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438c:	e004      	b.n	8004398 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438e:	f7ff fa17 	bl	80037c0 <HAL_GetTick>
 8004392:	1b40      	subs	r0, r0, r5
 8004394:	2802      	cmp	r0, #2
 8004396:	d8d0      	bhi.n	800433a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004398:	6833      	ldr	r3, [r6, #0]
 800439a:	0799      	lsls	r1, r3, #30
 800439c:	d4f7      	bmi.n	800438e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	e6f9      	b.n	8004196 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a2:	2801      	cmp	r0, #1
 80043a4:	f43f af48 	beq.w	8004238 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 80043a8:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	69e2      	ldr	r2, [r4, #28]
 80043ac:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80043b0:	4291      	cmp	r1, r2
 80043b2:	f47f af64 	bne.w	800427e <HAL_RCC_OscConfig+0x1b2>
 80043b6:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b8:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043bc:	4291      	cmp	r1, r2
 80043be:	f47f af5e 	bne.w	800427e <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043c4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80043c8:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043ca:	428a      	cmp	r2, r1
 80043cc:	f47f af57 	bne.w	800427e <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043d2:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043d6:	4291      	cmp	r1, r2
 80043d8:	f47f af51 	bne.w	800427e <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043de:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
        return HAL_ERROR;
 80043e2:	1a18      	subs	r0, r3, r0
 80043e4:	bf18      	it	ne
 80043e6:	2001      	movne	r0, #1
 80043e8:	e726      	b.n	8004238 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_RCC_OscConfig+0x3b4>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043fa:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043fc:	e773      	b.n	80042e6 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fe:	4a20      	ldr	r2, [pc, #128]	; (8004480 <HAL_RCC_OscConfig+0x3b4>)
 8004400:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004406:	6413      	str	r3, [r2, #64]	; 0x40
 8004408:	e6f9      	b.n	80041fe <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 800440a:	2001      	movs	r0, #1
}
 800440c:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800440e:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <HAL_RCC_OscConfig+0x3b4>)
 8004410:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004412:	f042 0204 	orr.w	r2, r2, #4
 8004416:	671a      	str	r2, [r3, #112]	; 0x70
 8004418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004420:	e794      	b.n	800434c <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8004422:	f7ff f9cd 	bl	80037c0 <HAL_GetTick>
 8004426:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004428:	e004      	b.n	8004434 <HAL_RCC_OscConfig+0x368>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7ff f9c9 	bl	80037c0 <HAL_GetTick>
 800442e:	1b80      	subs	r0, r0, r6
 8004430:	2802      	cmp	r0, #2
 8004432:	d882      	bhi.n	800433a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	0199      	lsls	r1, r3, #6
 8004438:	d4f7      	bmi.n	800442a <HAL_RCC_OscConfig+0x35e>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800443a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800443e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004440:	430b      	orrs	r3, r1
 8004442:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004446:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800444a:	0852      	lsrs	r2, r2, #1
 800444c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004450:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004452:	490a      	ldr	r1, [pc, #40]	; (800447c <HAL_RCC_OscConfig+0x3b0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004458:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800445a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800445c:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800445e:	f7ff f9af 	bl	80037c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004462:	4d07      	ldr	r5, [pc, #28]	; (8004480 <HAL_RCC_OscConfig+0x3b4>)
        tickstart = HAL_GetTick();
 8004464:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004466:	e005      	b.n	8004474 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004468:	f7ff f9aa 	bl	80037c0 <HAL_GetTick>
 800446c:	1b00      	subs	r0, r0, r4
 800446e:	2802      	cmp	r0, #2
 8004470:	f63f af63 	bhi.w	800433a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	019a      	lsls	r2, r3, #6
 8004478:	d5f6      	bpl.n	8004468 <HAL_RCC_OscConfig+0x39c>
 800447a:	e6dc      	b.n	8004236 <HAL_RCC_OscConfig+0x16a>
 800447c:	42470000 	.word	0x42470000
 8004480:	40023800 	.word	0x40023800

08004484 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004484:	4b01      	ldr	r3, [pc, #4]	; (800448c <HAL_RCC_EnableCSS+0x8>)
 8004486:	2201      	movs	r2, #1
 8004488:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800448a:	4770      	bx	lr
 800448c:	42470000 	.word	0x42470000

08004490 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004490:	4916      	ldr	r1, [pc, #88]	; (80044ec <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8004492:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004494:	688b      	ldr	r3, [r1, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d01b      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x46>
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d117      	bne.n	80044d2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044a2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b0:	d113      	bne.n	80044da <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	480f      	ldr	r0, [pc, #60]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x60>)
 80044b4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80044b8:	fba1 0100 	umull	r0, r1, r1, r0
 80044bc:	f7fb fe84 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_RCC_GetSysClockFreq+0x5c>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80044c8:	3301      	adds	r3, #1
 80044ca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80044cc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80044d0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80044d2:	4807      	ldr	r0, [pc, #28]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80044d4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d6:	4807      	ldr	r0, [pc, #28]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80044d8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044da:	4806      	ldr	r0, [pc, #24]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x64>)
 80044dc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80044e0:	2300      	movs	r3, #0
 80044e2:	fba1 0100 	umull	r0, r1, r1, r0
 80044e6:	f7fb fe6f 	bl	80001c8 <__aeabi_uldivmod>
 80044ea:	e7e9      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x30>
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	017d7840 	.word	0x017d7840

080044f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f000 8087 	beq.w	800460c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044fe:	4a48      	ldr	r2, [pc, #288]	; (8004620 <HAL_RCC_ClockConfig+0x128>)
 8004500:	6813      	ldr	r3, [r2, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	428b      	cmp	r3, r1
{
 8004508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800450c:	460d      	mov	r5, r1
 800450e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004510:	d209      	bcs.n	8004526 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	b2cb      	uxtb	r3, r1
 8004514:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	428b      	cmp	r3, r1
 800451e:	d002      	beq.n	8004526 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004520:	2001      	movs	r0, #1
}
 8004522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	0798      	lsls	r0, r3, #30
 800452a:	d514      	bpl.n	8004556 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	0759      	lsls	r1, r3, #29
 800452e:	d504      	bpl.n	800453a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004530:	493c      	ldr	r1, [pc, #240]	; (8004624 <HAL_RCC_ClockConfig+0x12c>)
 8004532:	688a      	ldr	r2, [r1, #8]
 8004534:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004538:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453a:	071a      	lsls	r2, r3, #28
 800453c:	d504      	bpl.n	8004548 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800453e:	4939      	ldr	r1, [pc, #228]	; (8004624 <HAL_RCC_ClockConfig+0x12c>)
 8004540:	688a      	ldr	r2, [r1, #8]
 8004542:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004546:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004548:	4936      	ldr	r1, [pc, #216]	; (8004624 <HAL_RCC_ClockConfig+0x12c>)
 800454a:	68a0      	ldr	r0, [r4, #8]
 800454c:	688a      	ldr	r2, [r1, #8]
 800454e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004552:	4302      	orrs	r2, r0
 8004554:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	07df      	lsls	r7, r3, #31
 8004558:	d521      	bpl.n	800459e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455a:	6862      	ldr	r2, [r4, #4]
 800455c:	2a01      	cmp	r2, #1
 800455e:	d057      	beq.n	8004610 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004560:	1e93      	subs	r3, r2, #2
 8004562:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004564:	4b2f      	ldr	r3, [pc, #188]	; (8004624 <HAL_RCC_ClockConfig+0x12c>)
 8004566:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004568:	d94d      	bls.n	8004606 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456a:	0799      	lsls	r1, r3, #30
 800456c:	d5d8      	bpl.n	8004520 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800456e:	4e2d      	ldr	r6, [pc, #180]	; (8004624 <HAL_RCC_ClockConfig+0x12c>)
 8004570:	68b3      	ldr	r3, [r6, #8]
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	4313      	orrs	r3, r2
 8004578:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800457a:	f7ff f921 	bl	80037c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004582:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004584:	e004      	b.n	8004590 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004586:	f7ff f91b 	bl	80037c0 <HAL_GetTick>
 800458a:	1bc0      	subs	r0, r0, r7
 800458c:	4540      	cmp	r0, r8
 800458e:	d844      	bhi.n	800461a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004590:	68b3      	ldr	r3, [r6, #8]
 8004592:	6862      	ldr	r2, [r4, #4]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800459c:	d1f3      	bne.n	8004586 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800459e:	4a20      	ldr	r2, [pc, #128]	; (8004620 <HAL_RCC_ClockConfig+0x128>)
 80045a0:	6813      	ldr	r3, [r2, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	42ab      	cmp	r3, r5
 80045a8:	d906      	bls.n	80045b8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	b2eb      	uxtb	r3, r5
 80045ac:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	42ab      	cmp	r3, r5
 80045b6:	d1b3      	bne.n	8004520 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	075a      	lsls	r2, r3, #29
 80045bc:	d506      	bpl.n	80045cc <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045be:	4919      	ldr	r1, [pc, #100]	; (8004624 <HAL_RCC_ClockConfig+0x12c>)
 80045c0:	68e0      	ldr	r0, [r4, #12]
 80045c2:	688a      	ldr	r2, [r1, #8]
 80045c4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80045c8:	4302      	orrs	r2, r0
 80045ca:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045cc:	071b      	lsls	r3, r3, #28
 80045ce:	d507      	bpl.n	80045e0 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <HAL_RCC_ClockConfig+0x12c>)
 80045d2:	6921      	ldr	r1, [r4, #16]
 80045d4:	6893      	ldr	r3, [r2, #8]
 80045d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80045da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80045de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e0:	f7ff ff56 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80045e4:	4a0f      	ldr	r2, [pc, #60]	; (8004624 <HAL_RCC_ClockConfig+0x12c>)
 80045e6:	4c10      	ldr	r4, [pc, #64]	; (8004628 <HAL_RCC_ClockConfig+0x130>)
 80045e8:	6892      	ldr	r2, [r2, #8]
 80045ea:	4910      	ldr	r1, [pc, #64]	; (800462c <HAL_RCC_ClockConfig+0x134>)
 80045ec:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80045f0:	4603      	mov	r3, r0
 80045f2:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80045f4:	480e      	ldr	r0, [pc, #56]	; (8004630 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045f6:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80045f8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045fa:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80045fc:	f7ff f896 	bl	800372c <HAL_InitTick>
  return HAL_OK;
 8004600:	2000      	movs	r0, #0
}
 8004602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	0198      	lsls	r0, r3, #6
 8004608:	d4b1      	bmi.n	800456e <HAL_RCC_ClockConfig+0x76>
 800460a:	e789      	b.n	8004520 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800460c:	2001      	movs	r0, #1
}
 800460e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <HAL_RCC_ClockConfig+0x12c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	039e      	lsls	r6, r3, #14
 8004616:	d4aa      	bmi.n	800456e <HAL_RCC_ClockConfig+0x76>
 8004618:	e782      	b.n	8004520 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800461a:	2003      	movs	r0, #3
 800461c:	e781      	b.n	8004522 <HAL_RCC_ClockConfig+0x2a>
 800461e:	bf00      	nop
 8004620:	40023c00 	.word	0x40023c00
 8004624:	40023800 	.word	0x40023800
 8004628:	08007594 	.word	0x08007594
 800462c:	20000530 	.word	0x20000530
 8004630:	20000538 	.word	0x20000538

08004634 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004634:	4b01      	ldr	r3, [pc, #4]	; (800463c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000530 	.word	0x20000530

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004642:	4905      	ldr	r1, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	4a05      	ldr	r2, [pc, #20]	; (800465c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004648:	6808      	ldr	r0, [r1, #0]
 800464a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800464e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004650:	40d8      	lsrs	r0, r3
 8004652:	4770      	bx	lr
 8004654:	40023800 	.word	0x40023800
 8004658:	20000530 	.word	0x20000530
 800465c:	080075a4 	.word	0x080075a4

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004662:	4905      	ldr	r1, [pc, #20]	; (8004678 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4a05      	ldr	r2, [pc, #20]	; (800467c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004668:	6808      	ldr	r0, [r1, #0]
 800466a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800466e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004670:	40d8      	lsrs	r0, r3
 8004672:	4770      	bx	lr
 8004674:	40023800 	.word	0x40023800
 8004678:	20000530 	.word	0x20000530
 800467c:	080075a4 	.word	0x080075a4

08004680 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004680:	2800      	cmp	r0, #0
 8004682:	d074      	beq.n	800476e <HAL_TIM_Base_Init+0xee>
{
 8004684:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004686:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800468a:	4604      	mov	r4, r0
 800468c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004690:	2b00      	cmp	r3, #0
 8004692:	d067      	beq.n	8004764 <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004696:	4937      	ldr	r1, [pc, #220]	; (8004774 <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	2302      	movs	r3, #2
 800469a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800469e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80046a0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a2:	d04b      	beq.n	800473c <HAL_TIM_Base_Init+0xbc>
 80046a4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80046a8:	d031      	beq.n	800470e <HAL_TIM_Base_Init+0x8e>
 80046aa:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80046ae:	428a      	cmp	r2, r1
 80046b0:	d02d      	beq.n	800470e <HAL_TIM_Base_Init+0x8e>
 80046b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80046b6:	428a      	cmp	r2, r1
 80046b8:	d029      	beq.n	800470e <HAL_TIM_Base_Init+0x8e>
 80046ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80046be:	428a      	cmp	r2, r1
 80046c0:	d025      	beq.n	800470e <HAL_TIM_Base_Init+0x8e>
 80046c2:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80046c6:	428a      	cmp	r2, r1
 80046c8:	d038      	beq.n	800473c <HAL_TIM_Base_Init+0xbc>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ca:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80046ce:	428a      	cmp	r2, r1
 80046d0:	d021      	beq.n	8004716 <HAL_TIM_Base_Init+0x96>
 80046d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80046d6:	428a      	cmp	r2, r1
 80046d8:	d01d      	beq.n	8004716 <HAL_TIM_Base_Init+0x96>
 80046da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80046de:	428a      	cmp	r2, r1
 80046e0:	d019      	beq.n	8004716 <HAL_TIM_Base_Init+0x96>
 80046e2:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80046e6:	428a      	cmp	r2, r1
 80046e8:	d015      	beq.n	8004716 <HAL_TIM_Base_Init+0x96>
 80046ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80046ee:	428a      	cmp	r2, r1
 80046f0:	d011      	beq.n	8004716 <HAL_TIM_Base_Init+0x96>
 80046f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80046f6:	428a      	cmp	r2, r1
 80046f8:	d00d      	beq.n	8004716 <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046fa:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046fc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004702:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004704:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004706:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004708:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800470a:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800470c:	e010      	b.n	8004730 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 800470e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004714:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004716:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004718:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800471a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004724:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004726:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004728:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800472a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800472c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800472e:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004730:	2301      	movs	r3, #1
 8004732:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004734:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004738:	2000      	movs	r0, #0
}
 800473a:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800473c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004744:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800474c:	69a1      	ldr	r1, [r4, #24]
 800474e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004752:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004754:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004756:	68e3      	ldr	r3, [r4, #12]
 8004758:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800475a:	6863      	ldr	r3, [r4, #4]
 800475c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800475e:	6963      	ldr	r3, [r4, #20]
 8004760:	6313      	str	r3, [r2, #48]	; 0x30
 8004762:	e7e5      	b.n	8004730 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004764:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004768:	f7fe fd4e 	bl	8003208 <HAL_TIM_Base_MspInit>
 800476c:	e792      	b.n	8004694 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800476e:	2001      	movs	r0, #1
}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000

08004778 <HAL_TIM_PWM_MspInit>:
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800477c:	2800      	cmp	r0, #0
 800477e:	d074      	beq.n	800486a <HAL_TIM_PWM_Init+0xee>
{
 8004780:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004786:	4604      	mov	r4, r0
 8004788:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800478c:	2b00      	cmp	r3, #0
 800478e:	d067      	beq.n	8004860 <HAL_TIM_PWM_Init+0xe4>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004790:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004792:	4937      	ldr	r1, [pc, #220]	; (8004870 <HAL_TIM_PWM_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	2302      	movs	r3, #2
 8004796:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800479a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800479c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800479e:	d04b      	beq.n	8004838 <HAL_TIM_PWM_Init+0xbc>
 80047a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80047a4:	d031      	beq.n	800480a <HAL_TIM_PWM_Init+0x8e>
 80047a6:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80047aa:	428a      	cmp	r2, r1
 80047ac:	d02d      	beq.n	800480a <HAL_TIM_PWM_Init+0x8e>
 80047ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047b2:	428a      	cmp	r2, r1
 80047b4:	d029      	beq.n	800480a <HAL_TIM_PWM_Init+0x8e>
 80047b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047ba:	428a      	cmp	r2, r1
 80047bc:	d025      	beq.n	800480a <HAL_TIM_PWM_Init+0x8e>
 80047be:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80047c2:	428a      	cmp	r2, r1
 80047c4:	d038      	beq.n	8004838 <HAL_TIM_PWM_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c6:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80047ca:	428a      	cmp	r2, r1
 80047cc:	d021      	beq.n	8004812 <HAL_TIM_PWM_Init+0x96>
 80047ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047d2:	428a      	cmp	r2, r1
 80047d4:	d01d      	beq.n	8004812 <HAL_TIM_PWM_Init+0x96>
 80047d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047da:	428a      	cmp	r2, r1
 80047dc:	d019      	beq.n	8004812 <HAL_TIM_PWM_Init+0x96>
 80047de:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80047e2:	428a      	cmp	r2, r1
 80047e4:	d015      	beq.n	8004812 <HAL_TIM_PWM_Init+0x96>
 80047e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047ea:	428a      	cmp	r2, r1
 80047ec:	d011      	beq.n	8004812 <HAL_TIM_PWM_Init+0x96>
 80047ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047f2:	428a      	cmp	r2, r1
 80047f4:	d00d      	beq.n	8004812 <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f6:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047f8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fe:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004800:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004802:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004804:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004806:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004808:	e010      	b.n	800482c <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 800480a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004810:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004814:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800481a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004820:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004822:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004824:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004826:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004828:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800482a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800482c:	2301      	movs	r3, #1
 800482e:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004830:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004834:	2000      	movs	r0, #0
}
 8004836:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004838:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800483c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004840:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004846:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004848:	69a1      	ldr	r1, [r4, #24]
 800484a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004850:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004852:	68e3      	ldr	r3, [r4, #12]
 8004854:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004856:	6863      	ldr	r3, [r4, #4]
 8004858:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800485a:	6963      	ldr	r3, [r4, #20]
 800485c:	6313      	str	r3, [r2, #48]	; 0x30
 800485e:	e7e5      	b.n	800482c <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004860:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004864:	f7ff ff88 	bl	8004778 <HAL_TIM_PWM_MspInit>
 8004868:	e792      	b.n	8004790 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 800486a:	2001      	movs	r0, #1
}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40010000 	.word	0x40010000

08004874 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004874:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	f000 80ca 	beq.w	8004a12 <HAL_TIM_PWM_ConfigChannel+0x19e>
 800487e:	f04f 0c01 	mov.w	ip, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004882:	2302      	movs	r3, #2
{
 8004884:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004886:	f880 c03c 	strb.w	ip, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800488a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800488e:	2a0c      	cmp	r2, #12
 8004890:	d832      	bhi.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x84>
 8004892:	e8df f002 	tbb	[pc, r2]
 8004896:	3107      	.short	0x3107
 8004898:	31683131 	.word	0x31683131
 800489c:	31943131 	.word	0x31943131
 80048a0:	3131      	.short	0x3131
 80048a2:	3a          	.byte	0x3a
 80048a3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048a4:	6803      	ldr	r3, [r0, #0]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a6:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a8:	6a1a      	ldr	r2, [r3, #32]
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80048b0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80048b2:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80048b4:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80048ba:	4334      	orrs	r4, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048bc:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80048be:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80048c2:	4332      	orrs	r2, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048c4:	4e6e      	ldr	r6, [pc, #440]	; (8004a80 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80048c6:	42b3      	cmp	r3, r6
 80048c8:	f000 80a5 	beq.w	8004a16 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 80048cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80048d0:	42b3      	cmp	r3, r6
 80048d2:	f000 80a0 	beq.w	8004a16 <HAL_TIM_PWM_ConfigChannel+0x1a2>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048d8:	619c      	str	r4, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048da:	684c      	ldr	r4, [r1, #4]
 80048dc:	635c      	str	r4, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048de:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048e0:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048e2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048e4:	f044 0408 	orr.w	r4, r4, #8
 80048e8:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048ea:	6999      	ldr	r1, [r3, #24]
 80048ec:	f021 0104 	bic.w	r1, r1, #4
 80048f0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048f2:	699a      	ldr	r2, [r3, #24]
 80048f4:	432a      	orrs	r2, r5
 80048f6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80048f8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80048fa:	2201      	movs	r2, #1
 80048fc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004900:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004904:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004906:	4618      	mov	r0, r3
}
 8004908:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800490a:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800490c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800490e:	6a1a      	ldr	r2, [r3, #32]
 8004910:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004914:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004916:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004918:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800491a:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800491c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004920:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004924:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800492a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492e:	4e54      	ldr	r6, [pc, #336]	; (8004a80 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004930:	42b3      	cmp	r3, r6
 8004932:	f000 808f 	beq.w	8004a54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
 8004936:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800493a:	42b3      	cmp	r3, r6
 800493c:	f000 808a 	beq.w	8004a54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004940:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004942:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004944:	684c      	ldr	r4, [r1, #4]
 8004946:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004948:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800494a:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800494c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800494e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004952:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004954:	69d9      	ldr	r1, [r3, #28]
 8004956:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800495a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800495c:	69da      	ldr	r2, [r3, #28]
 800495e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004962:	61da      	str	r2, [r3, #28]
      break;
 8004964:	e7c8      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x84>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004966:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004968:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	f022 0210 	bic.w	r2, r2, #16
 8004970:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004972:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004974:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004976:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004978:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800497c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004980:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004982:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004986:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800498a:	4e3d      	ldr	r6, [pc, #244]	; (8004a80 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800498c:	42b3      	cmp	r3, r6
 800498e:	d051      	beq.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8004990:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004994:	42b3      	cmp	r3, r6
 8004996:	d04d      	beq.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CR2 = tmpcr2;
 8004998:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800499a:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800499c:	684c      	ldr	r4, [r1, #4]
 800499e:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80049a0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049a2:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049a4:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049a6:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80049aa:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049ac:	6999      	ldr	r1, [r3, #24]
 80049ae:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80049b2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80049ba:	619a      	str	r2, [r3, #24]
      break;
 80049bc:	e79c      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x84>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049be:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80049c0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049c8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80049ca:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80049cc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80049ce:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80049d4:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049d6:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80049d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049dc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049e0:	4e27      	ldr	r6, [pc, #156]	; (8004a80 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80049e2:	42b3      	cmp	r3, r6
 80049e4:	d03c      	beq.n	8004a60 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 80049e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80049ea:	42b3      	cmp	r3, r6
 80049ec:	d038      	beq.n	8004a60 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CR2 = tmpcr2;
 80049ee:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80049f0:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80049f2:	684c      	ldr	r4, [r1, #4]
 80049f4:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80049f6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049f8:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049fa:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049fc:	f044 0408 	orr.w	r4, r4, #8
 8004a00:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a02:	69d9      	ldr	r1, [r3, #28]
 8004a04:	f021 0104 	bic.w	r1, r1, #4
 8004a08:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	432a      	orrs	r2, r5
 8004a0e:	61da      	str	r2, [r3, #28]
      break;
 8004a10:	e772      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x84>
  __HAL_LOCK(htim);
 8004a12:	2002      	movs	r0, #2
}
 8004a14:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004a16:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a18:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004a1c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a1e:	e9d1 c605 	ldrd	ip, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a22:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a26:	ea4c 0c06 	orr.w	ip, ip, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a2a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a2e:	ea4c 0505 	orr.w	r5, ip, r5
 8004a32:	e750      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a34:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a3a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a3e:	e9d1 c605 	ldrd	ip, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a42:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a46:	ea4c 0c06 	orr.w	ip, ip, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a4e:	ea45 058c 	orr.w	r5, r5, ip, lsl #2
 8004a52:	e7a1      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x124>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a54:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a56:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a5a:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004a5e:	e76f      	b.n	8004940 <HAL_TIM_PWM_ConfigChannel+0xcc>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a60:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a66:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a6a:	e9d1 c605 	ldrd	ip, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a6e:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a72:	ea4c 0c06 	orr.w	ip, ip, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a7a:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
 8004a7e:	e7b6      	b.n	80049ee <HAL_TIM_PWM_ConfigChannel+0x17a>
 8004a80:	40010000 	.word	0x40010000

08004a84 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004a84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d074      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xf2>
{
 8004a8c:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8004a8e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8004a90:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004a92:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004a94:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004a9c:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004a9e:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8004aa4:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004aa8:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004aaa:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004aac:	d065      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0xf6>
 8004aae:	d831      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x90>
 8004ab0:	2b40      	cmp	r3, #64	; 0x40
 8004ab2:	d048      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0xc2>
 8004ab4:	d921      	bls.n	8004afa <HAL_TIM_ConfigClockSource+0x76>
 8004ab6:	2b50      	cmp	r3, #80	; 0x50
 8004ab8:	d116      	bne.n	8004ae8 <HAL_TIM_ConfigClockSource+0x64>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	684c      	ldr	r4, [r1, #4]
 8004abc:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004abe:	6a11      	ldr	r1, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ac0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004ac4:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac6:	6a14      	ldr	r4, [r2, #32]
 8004ac8:	f024 0401 	bic.w	r4, r4, #1
 8004acc:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ace:	6993      	ldr	r3, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ad8:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004ada:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004adc:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ae6:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8004ae8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	2201      	movs	r2, #1
 8004aec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004af0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004af4:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004af6:	4618      	mov	r0, r3
}
 8004af8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d002      	beq.n	8004b04 <HAL_TIM_ConfigClockSource+0x80>
 8004afe:	d91e      	bls.n	8004b3e <HAL_TIM_ConfigClockSource+0xba>
 8004b00:	2b30      	cmp	r3, #48	; 0x30
 8004b02:	d1f1      	bne.n	8004ae8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8004b04:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b06:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b0a:	430b      	orrs	r3, r1
 8004b0c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004b10:	6093      	str	r3, [r2, #8]
}
 8004b12:	e7e9      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004b14:	2b70      	cmp	r3, #112	; 0x70
 8004b16:	d049      	beq.n	8004bac <HAL_TIM_ConfigClockSource+0x128>
 8004b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1c:	d1e4      	bne.n	8004ae8 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b1e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004b22:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b24:	432b      	orrs	r3, r5
 8004b26:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b28:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b2c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004b30:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b32:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b34:	6893      	ldr	r3, [r2, #8]
 8004b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b3a:	6093      	str	r3, [r2, #8]
      break;
 8004b3c:	e7d4      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004b3e:	f033 0110 	bics.w	r1, r3, #16
 8004b42:	d1d1      	bne.n	8004ae8 <HAL_TIM_ConfigClockSource+0x64>
 8004b44:	e7de      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x80>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	684c      	ldr	r4, [r1, #4]
 8004b48:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004b4a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004b50:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b52:	6a14      	ldr	r4, [r2, #32]
 8004b54:	f024 0401 	bic.w	r4, r4, #1
 8004b58:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5a:	6993      	ldr	r3, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004b64:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004b66:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004b68:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004b72:	6093      	str	r3, [r2, #8]
}
 8004b74:	e7b8      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8004b76:	2002      	movs	r0, #2
}
 8004b78:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b7a:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b7c:	68cb      	ldr	r3, [r1, #12]
 8004b7e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b80:	f024 0410 	bic.w	r4, r4, #16
 8004b84:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b86:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b88:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b8c:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8004b90:	6a13      	ldr	r3, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004b92:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004b9c:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004b9e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ba4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004ba8:	6093      	str	r3, [r2, #8]
}
 8004baa:	e79d      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bac:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004bb0:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb2:	432b      	orrs	r3, r5
 8004bb4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb6:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004bbe:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004bc0:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004bc2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004bc8:	6093      	str	r3, [r2, #8]
      break;
 8004bca:	e78d      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x64>

08004bcc <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004bcc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004bd0:	2a01      	cmp	r2, #1
 8004bd2:	d049      	beq.n	8004c68 <HAL_TIM_SlaveConfigSynchro+0x9c>
 8004bd4:	4603      	mov	r3, r0
{
 8004bd6:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8004bda:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004be0:	2001      	movs	r0, #1
 8004be2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004be6:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004be8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004bea:	680e      	ldr	r6, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004bf0:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004bf2:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004bf6:	4332      	orrs	r2, r6
  switch (sSlaveConfig->InputTrigger)
 8004bf8:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004bfa:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004bfc:	d04d      	beq.n	8004c9a <HAL_TIM_SlaveConfigSynchro+0xce>
 8004bfe:	d825      	bhi.n	8004c4c <HAL_TIM_SlaveConfigSynchro+0x80>
 8004c00:	2d40      	cmp	r5, #64	; 0x40
 8004c02:	d033      	beq.n	8004c6c <HAL_TIM_SlaveConfigSynchro+0xa0>
 8004c04:	2d50      	cmp	r5, #80	; 0x50
 8004c06:	d110      	bne.n	8004c2a <HAL_TIM_SlaveConfigSynchro+0x5e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c08:	6888      	ldr	r0, [r1, #8]
 8004c0a:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8004c0c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004c12:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c14:	6a20      	ldr	r0, [r4, #32]
 8004c16:	f020 0001 	bic.w	r0, r0, #1
 8004c1a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c1c:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c22:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004c26:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004c28:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004c2a:	68e2      	ldr	r2, [r4, #12]
 8004c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c30:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004c32:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8004c34:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004c36:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c3c:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004c3e:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004c42:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8004c46:	4608      	mov	r0, r1
}
 8004c48:	bc70      	pop	{r4, r5, r6}
 8004c4a:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004c4c:	2d70      	cmp	r5, #112	; 0x70
 8004c4e:	d1ec      	bne.n	8004c2a <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c50:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004c54:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c56:	432a      	orrs	r2, r5
 8004c58:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c5a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004c62:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004c64:	60a2      	str	r2, [r4, #8]
 8004c66:	e7e0      	b.n	8004c2a <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 8004c68:	2002      	movs	r0, #2
}
 8004c6a:	4770      	bx	lr
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004c6c:	2e05      	cmp	r6, #5
 8004c6e:	d00d      	beq.n	8004c8c <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 8004c70:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c72:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c74:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c76:	f020 0001 	bic.w	r0, r0, #1
 8004c7a:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c7c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c82:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004c86:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004c88:	6225      	str	r5, [r4, #32]
      break;
 8004c8a:	e7ce      	b.n	8004c2a <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 8004c8c:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8004c8e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c96:	bc70      	pop	{r4, r5, r6}
 8004c98:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c9a:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9c:	690a      	ldr	r2, [r1, #16]
 8004c9e:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca0:	f020 0010 	bic.w	r0, r0, #16
 8004ca4:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca6:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ca8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cac:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8004cb0:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004cb2:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cb8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004cbc:	6222      	str	r2, [r4, #32]
 8004cbe:	e7b4      	b.n	8004c2a <HAL_TIM_SlaveConfigSynchro+0x5e>

08004cc0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc0:	4a34      	ldr	r2, [pc, #208]	; (8004d94 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8004cc2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc4:	4290      	cmp	r0, r2
{
 8004cc6:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc8:	d04c      	beq.n	8004d64 <TIM_Base_SetConfig+0xa4>
 8004cca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004cce:	d034      	beq.n	8004d3a <TIM_Base_SetConfig+0x7a>
 8004cd0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004cd4:	4290      	cmp	r0, r2
 8004cd6:	d030      	beq.n	8004d3a <TIM_Base_SetConfig+0x7a>
 8004cd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cdc:	4290      	cmp	r0, r2
 8004cde:	d02c      	beq.n	8004d3a <TIM_Base_SetConfig+0x7a>
 8004ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ce4:	4290      	cmp	r0, r2
 8004ce6:	d028      	beq.n	8004d3a <TIM_Base_SetConfig+0x7a>
 8004ce8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004cec:	4290      	cmp	r0, r2
 8004cee:	d039      	beq.n	8004d64 <TIM_Base_SetConfig+0xa4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004cf4:	4290      	cmp	r0, r2
 8004cf6:	d024      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004cf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cfc:	4290      	cmp	r0, r2
 8004cfe:	d020      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d04:	4290      	cmp	r0, r2
 8004d06:	d01c      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004d08:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004d0c:	4290      	cmp	r0, r2
 8004d0e:	d018      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d14:	4290      	cmp	r0, r2
 8004d16:	d014      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004d18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d1c:	4290      	cmp	r0, r2
 8004d1e:	d010      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d20:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d22:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004d24:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d2a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004d2c:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004d2e:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d32:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004d34:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004d36:	6143      	str	r3, [r0, #20]
}
 8004d38:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004d3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d40:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d42:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d44:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d50:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d52:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004d54:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004d56:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004d58:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d5c:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004d5e:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	6143      	str	r3, [r0, #20]
}
 8004d62:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004d64:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d6c:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d72:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d74:	694a      	ldr	r2, [r1, #20]
 8004d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004d7c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7e:	688b      	ldr	r3, [r1, #8]
 8004d80:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d82:	680b      	ldr	r3, [r1, #0]
 8004d84:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004d86:	690b      	ldr	r3, [r1, #16]
 8004d88:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004d8a:	2301      	movs	r3, #1
}
 8004d8c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004d8e:	6143      	str	r3, [r0, #20]
}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000

08004d98 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d98:	6a03      	ldr	r3, [r0, #32]
 8004d9a:	f023 0310 	bic.w	r3, r3, #16
 8004d9e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004da0:	6a03      	ldr	r3, [r0, #32]
{
 8004da2:	b430      	push	{r4, r5}
  tmpcr2 =  TIMx->CR2;
 8004da4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004da6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004daa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004db4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dbc:	4d0e      	ldr	r5, [pc, #56]	; (8004df8 <TIM_OC2_SetConfig+0x60>)
 8004dbe:	42a8      	cmp	r0, r5
 8004dc0:	d00a      	beq.n	8004dd8 <TIM_OC2_SetConfig+0x40>
 8004dc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004dc6:	42a8      	cmp	r0, r5
 8004dc8:	d006      	beq.n	8004dd8 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8004dca:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004dcc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004dce:	6182      	str	r2, [r0, #24]
}
 8004dd0:	bc30      	pop	{r4, r5}
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004dd4:	6203      	str	r3, [r0, #32]
}
 8004dd6:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dde:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de2:	e9d1 c505 	ldrd	ip, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004de6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dea:	ea4c 0c05 	orr.w	ip, ip, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004df2:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 8004df6:	e7e8      	b.n	8004dca <TIM_OC2_SetConfig+0x32>
 8004df8:	40010000 	.word	0x40010000

08004dfc <TIM_TI1_SetConfig>:
{
 8004dfc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfe:	6a04      	ldr	r4, [r0, #32]
 8004e00:	f024 0401 	bic.w	r4, r4, #1
 8004e04:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e06:	4c1b      	ldr	r4, [pc, #108]	; (8004e74 <TIM_TI1_SetConfig+0x78>)
  tmpccmr1 = TIMx->CCMR1;
 8004e08:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8004e0a:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e0c:	42a0      	cmp	r0, r4
 8004e0e:	d01d      	beq.n	8004e4c <TIM_TI1_SetConfig+0x50>
 8004e10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e14:	d01a      	beq.n	8004e4c <TIM_TI1_SetConfig+0x50>
 8004e16:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8004e1a:	42a0      	cmp	r0, r4
 8004e1c:	d016      	beq.n	8004e4c <TIM_TI1_SetConfig+0x50>
 8004e1e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e22:	42a0      	cmp	r0, r4
 8004e24:	d012      	beq.n	8004e4c <TIM_TI1_SetConfig+0x50>
 8004e26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e2a:	42a0      	cmp	r0, r4
 8004e2c:	d00e      	beq.n	8004e4c <TIM_TI1_SetConfig+0x50>
 8004e2e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8004e32:	42a0      	cmp	r0, r4
 8004e34:	d00a      	beq.n	8004e4c <TIM_TI1_SetConfig+0x50>
 8004e36:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8004e3a:	42a0      	cmp	r0, r4
 8004e3c:	d006      	beq.n	8004e4c <TIM_TI1_SetConfig+0x50>
 8004e3e:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004e42:	42a0      	cmp	r0, r4
 8004e44:	d002      	beq.n	8004e4c <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e46:	f045 0201 	orr.w	r2, r5, #1
 8004e4a:	e003      	b.n	8004e54 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e4c:	f025 0c03 	bic.w	ip, r5, #3
    tmpccmr1 |= TIM_ICSelection;
 8004e50:	ea4c 0202 	orr.w	r2, ip, r2
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e54:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e56:	f026 0c0a 	bic.w	ip, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e5e:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e60:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e64:	4313      	orrs	r3, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e66:	ea41 010c 	orr.w	r1, r1, ip
  TIMx->CCMR1 = tmpccmr1;
 8004e6a:	6183      	str	r3, [r0, #24]
}
 8004e6c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004e6e:	6201      	str	r1, [r0, #32]
}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000

08004e78 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop

08004e7c <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d055      	beq.n	8004f2c <HAL_TIMEx_HallSensor_Init+0xb0>
{
 8004e80:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8004e86:	b088      	sub	sp, #32
 8004e88:	460d      	mov	r5, r1
 8004e8a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d046      	beq.n	8004f22 <HAL_TIMEx_HallSensor_Init+0xa6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e94:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004e96:	2302      	movs	r3, #2
 8004e98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004ea0:	f7ff ff0e 	bl	8004cc0 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004ea4:	68ab      	ldr	r3, [r5, #8]
 8004ea6:	6829      	ldr	r1, [r5, #0]
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	f7ff ffa6 	bl	8004dfc <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004eb0:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004eb2:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004eb4:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004eb6:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004eb8:	f022 020c 	bic.w	r2, r2, #12
 8004ebc:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004ebe:	6983      	ldr	r3, [r0, #24]
 8004ec0:	4333      	orrs	r3, r6
 8004ec2:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004ec4:	6843      	ldr	r3, [r0, #4]
 8004ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eca:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004ecc:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004ece:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed4:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004ed6:	6883      	ldr	r3, [r0, #8]
 8004ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004edc:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004ede:	6883      	ldr	r3, [r0, #8]
 8004ee0:	f023 0307 	bic.w	r3, r3, #7
 8004ee4:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004ee6:	6883      	ldr	r3, [r0, #8]
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004eee:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004ef0:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004ef2:	2370      	movs	r3, #112	; 0x70
 8004ef4:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ef6:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004efa:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004efe:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004f00:	f7ff ff4a 	bl	8004d98 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f0c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004f0e:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	2101      	movs	r1, #1
  return HAL_OK;
 8004f12:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004f14:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004f18:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004f1a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 8004f1e:	b008      	add	sp, #32
 8004f20:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004f22:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004f26:	f7ff ffa7 	bl	8004e78 <HAL_TIMEx_HallSensor_MspInit>
 8004f2a:	e7b3      	b.n	8004e94 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004f2c:	2001      	movs	r0, #1
}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d037      	beq.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f38:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3a:	2202      	movs	r2, #2
{
 8004f3c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004f42:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f44:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004f46:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f4c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f50:	4a16      	ldr	r2, [pc, #88]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01a      	beq.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d017      	beq.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004f5c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00f      	beq.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004f74:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004f7c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004f84:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f8e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f92:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f94:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004f96:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004f9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004fa2:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004fa4:	4618      	mov	r0, r3
}
 8004fa6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004fa8:	2002      	movs	r0, #2
}
 8004faa:	4770      	bx	lr
 8004fac:	40010000 	.word	0x40010000

08004fb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fb0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d022      	beq.n	8004ffe <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8004fb8:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fba:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fc6:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fc8:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fd4:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fd6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fdc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fde:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fe0:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fe6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fec:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8004fee:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ff0:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8004ff2:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004ff4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8004ff8:	4608      	mov	r0, r1
}
 8004ffa:	bc10      	pop	{r4}
 8004ffc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004ffe:	2002      	movs	r0, #2
}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop

08005004 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005004:	2800      	cmp	r0, #0
 8005006:	f000 80af 	beq.w	8005168 <HAL_UART_Init+0x164>
{
 800500a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800500c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005010:	4604      	mov	r4, r0
 8005012:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 809e 	beq.w	8005158 <HAL_UART_Init+0x154>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800501c:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800501e:	68e0      	ldr	r0, [r4, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005020:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8005022:	2224      	movs	r2, #36	; 0x24
 8005024:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800502e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005030:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005032:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005034:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005038:	4301      	orrs	r1, r0
 800503a:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800503c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800503e:	69e0      	ldr	r0, [r4, #28]
 8005040:	432a      	orrs	r2, r5
 8005042:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005044:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005048:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800504a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800504e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005050:	430a      	orrs	r2, r1
 8005052:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	69a1      	ldr	r1, [r4, #24]
 8005058:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800505c:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800505e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005062:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005064:	4a41      	ldr	r2, [pc, #260]	; (800516c <HAL_UART_Init+0x168>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005066:	d04f      	beq.n	8005108 <HAL_UART_Init+0x104>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005068:	4293      	cmp	r3, r2
 800506a:	d032      	beq.n	80050d2 <HAL_UART_Init+0xce>
 800506c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005070:	4293      	cmp	r3, r2
 8005072:	d02e      	beq.n	80050d2 <HAL_UART_Init+0xce>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7ff fae4 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	4d3d      	ldr	r5, [pc, #244]	; (8005170 <HAL_UART_Init+0x16c>)
 800507c:	2119      	movs	r1, #25
 800507e:	009a      	lsls	r2, r3, #2
 8005080:	fba0 0101 	umull	r0, r1, r0, r1
 8005084:	0f9b      	lsrs	r3, r3, #30
 8005086:	f7fb f89f 	bl	80001c8 <__aeabi_uldivmod>
 800508a:	fba5 3100 	umull	r3, r1, r5, r0
 800508e:	0949      	lsrs	r1, r1, #5
 8005090:	2264      	movs	r2, #100	; 0x64
 8005092:	fb02 0211 	mls	r2, r2, r1, r0
 8005096:	0112      	lsls	r2, r2, #4
 8005098:	3232      	adds	r2, #50	; 0x32
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	fba5 0202 	umull	r0, r2, r5, r2
 80050a0:	0109      	lsls	r1, r1, #4
 80050a2:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 80050a6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80050b8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ba:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80050bc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80050be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050c2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80050c6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80050ca:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 80050ce:	4628      	mov	r0, r5
}
 80050d0:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80050d2:	f7ff fac5 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050d6:	6863      	ldr	r3, [r4, #4]
 80050d8:	2119      	movs	r1, #25
 80050da:	009a      	lsls	r2, r3, #2
 80050dc:	fba0 0101 	umull	r0, r1, r0, r1
 80050e0:	0f9b      	lsrs	r3, r3, #30
 80050e2:	f7fb f871 	bl	80001c8 <__aeabi_uldivmod>
 80050e6:	4922      	ldr	r1, [pc, #136]	; (8005170 <HAL_UART_Init+0x16c>)
 80050e8:	fba1 3200 	umull	r3, r2, r1, r0
 80050ec:	0952      	lsrs	r2, r2, #5
 80050ee:	2564      	movs	r5, #100	; 0x64
 80050f0:	fb05 0012 	mls	r0, r5, r2, r0
 80050f4:	0100      	lsls	r0, r0, #4
 80050f6:	3032      	adds	r0, #50	; 0x32
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	fba1 1000 	umull	r1, r0, r1, r0
 80050fe:	0112      	lsls	r2, r2, #4
 8005100:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8005104:	6098      	str	r0, [r3, #8]
 8005106:	e7cf      	b.n	80050a8 <HAL_UART_Init+0xa4>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005108:	4293      	cmp	r3, r2
 800510a:	d02a      	beq.n	8005162 <HAL_UART_Init+0x15e>
 800510c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005110:	4293      	cmp	r3, r2
 8005112:	d026      	beq.n	8005162 <HAL_UART_Init+0x15e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005114:	f7ff fa94 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005118:	6862      	ldr	r2, [r4, #4]
 800511a:	2119      	movs	r1, #25
 800511c:	1892      	adds	r2, r2, r2
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	415b      	adcs	r3, r3
 8005124:	fba0 0101 	umull	r0, r1, r0, r1
 8005128:	f7fb f84e 	bl	80001c8 <__aeabi_uldivmod>
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <HAL_UART_Init+0x16c>)
 800512e:	fba3 2100 	umull	r2, r1, r3, r0
 8005132:	094d      	lsrs	r5, r1, #5
 8005134:	2264      	movs	r2, #100	; 0x64
 8005136:	fb02 0215 	mls	r2, r2, r5, r0
 800513a:	00d2      	lsls	r2, r2, #3
 800513c:	3232      	adds	r2, #50	; 0x32
 800513e:	fba3 3202 	umull	r3, r2, r3, r2
 8005142:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8005146:	0912      	lsrs	r2, r2, #4
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800514e:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005152:	440a      	add	r2, r1
 8005154:	609a      	str	r2, [r3, #8]
 8005156:	e7a7      	b.n	80050a8 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8005158:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800515c:	f7fe f8e6 	bl	800332c <HAL_UART_MspInit>
 8005160:	e75c      	b.n	800501c <HAL_UART_Init+0x18>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005162:	f7ff fa7d 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 8005166:	e7d7      	b.n	8005118 <HAL_UART_Init+0x114>
    return HAL_ERROR;
 8005168:	2001      	movs	r0, #1
}
 800516a:	4770      	bx	lr
 800516c:	40011000 	.word	0x40011000
 8005170:	51eb851f 	.word	0x51eb851f

08005174 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8005174:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8005176:	8840      	ldrh	r0, [r0, #2]
 8005178:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 800517c:	0c00      	lsrs	r0, r0, #16
 800517e:	4770      	bx	lr

08005180 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(CircleLimitation_Handle_t * pHandle, qd_t Vqd)
{
 8005180:	b570      	push	{r4, r5, r6, lr}
  int32_t vd_square_limit;
  int32_t new_q;
  int32_t new_d;
  qd_t Local_Vqd=Vqd;

  MaxModule = pHandle->MaxModule;
 8005182:	8803      	ldrh	r3, [r0, #0]
 8005184:	140d      	asrs	r5, r1, #16
{
 8005186:	b084      	sub	sp, #16
 8005188:	b20c      	sxth	r4, r1

  square_q = (int32_t)(Vqd.q) * Vqd.q;
  square_d = (int32_t)(Vqd.d) * Vqd.d;
 800518a:	fb05 f205 	mul.w	r2, r5, r5
  square_limit = MaxModule * MaxModule;
 800518e:	fb03 f303 	mul.w	r3, r3, r3
{
 8005192:	9101      	str	r1, [sp, #4]
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
  square_sum = square_q + square_d;
 8005194:	fb04 2104 	mla	r1, r4, r4, r2

  if (square_sum > square_limit)
 8005198:	428b      	cmp	r3, r1
 800519a:	da10      	bge.n	80051be <Circle_Limitation+0x3e>
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
 800519c:	8846      	ldrh	r6, [r0, #2]
 800519e:	fb06 f006 	mul.w	r0, r6, r6
  {
    if(square_d <= vd_square_limit)
 80051a2:	4282      	cmp	r2, r0
 80051a4:	dd14      	ble.n	80051d0 <Circle_Limitation+0x50>
      new_d = Vqd.d;
    }
    else
    {
      new_d = pHandle->MaxVd;
      if(Vqd.d < 0)
 80051a6:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
      square_temp = (square_limit - vd_square_limit)/1048576;
      new_q = SqrtTable[square_temp];
#else
      square_temp = square_limit - vd_square_limit;
      new_q = MCM_Sqrt(square_temp);
 80051a8:	eba3 0000 	sub.w	r0, r3, r0
        new_d = -new_d;
 80051ac:	bfb8      	it	lt
 80051ae:	4276      	neglt	r6, r6
      new_q = MCM_Sqrt(square_temp);
 80051b0:	f7fc f9ac 	bl	800150c <MCM_Sqrt>
#endif
      if(Vqd.q < 0)
 80051b4:	2c00      	cmp	r4, #0
      {
        new_q = - new_q;
 80051b6:	bfb8      	it	lt
 80051b8:	4240      	neglt	r0, r0
      }
    }
    Local_Vqd.q = new_q;
    Local_Vqd.d = new_d;
 80051ba:	b235      	sxth	r5, r6
    Local_Vqd.q = new_q;
 80051bc:	b204      	sxth	r4, r0
  }
  return(Local_Vqd);
 80051be:	b2a4      	uxth	r4, r4
 80051c0:	2000      	movs	r0, #0
 80051c2:	f364 000f 	bfi	r0, r4, #0, #16
 80051c6:	b2ad      	uxth	r5, r5
 80051c8:	f365 401f 	bfi	r0, r5, #16, #16
}
 80051cc:	b004      	add	sp, #16
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
      new_q = MCM_Sqrt(square_temp);
 80051d0:	1a98      	subs	r0, r3, r2
 80051d2:	f7fc f99b 	bl	800150c <MCM_Sqrt>
      if(Vqd.q < 0)
 80051d6:	2c00      	cmp	r4, #0
 80051d8:	daf0      	bge.n	80051bc <Circle_Limitation+0x3c>
        new_q = -new_q;
 80051da:	4240      	negs	r0, r0
 80051dc:	e7ee      	b.n	80051bc <Circle_Limitation+0x3c>
 80051de:	bf00      	nop

080051e0 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 80051e0:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80051e2:	f8b0 c016 	ldrh.w	ip, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 80051e6:	7843      	ldrb	r3, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 80051e8:	f8b0 e014 	ldrh.w	lr, [r0, #20]

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80051ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80051ee:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 80051f2:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80051f6:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 80051fa:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80051fe:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8005200:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005204:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8005206:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 800520a:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 800520e:	d96d      	bls.n	80052ec <HALL_Init+0x10c>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8005210:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8005214:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005218:	f242 7410 	movw	r4, #10000	; 0x2710
 800521c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005220:	fbb4 fcfc 	udiv	ip, r4, ip
 8005224:	fa1f f48c 	uxth.w	r4, ip
 8005228:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800522c:	4c31      	ldr	r4, [pc, #196]	; (80052f4 <HALL_Init+0x114>)
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800522e:	69c5      	ldr	r5, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8005230:	f8a0 e0b0 	strh.w	lr, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005234:	fb0c f101 	mul.w	r1, ip, r1
 8005238:	fba4 4101 	umull	r4, r1, r4, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800523c:	4c2e      	ldr	r4, [pc, #184]	; (80052f8 <HALL_Init+0x118>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800523e:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005242:	0989      	lsrs	r1, r1, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005244:	fba4 4202 	umull	r4, r2, r4, r2
 8005248:	0892      	lsrs	r2, r2, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800524a:	040c      	lsls	r4, r1, #16
 800524c:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005250:	eb02 0482 	add.w	r4, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005254:	fbb2 f2fc 	udiv	r2, r2, ip
 8005258:	fb05 f202 	mul.w	r2, r5, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800525c:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
                       / hMaxReliableElSpeedUnit);

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005260:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005264:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005268:	0064      	lsls	r4, r4, #1
                       / hMaxReliableElSpeedUnit);
 800526a:	fbb4 f4fe 	udiv	r4, r4, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800526e:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005272:	fb0c f202 	mul.w	r2, ip, r2
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8005276:	8c84      	ldrh	r4, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005278:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800527c:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800527e:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005280:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8005284:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 8005288:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800528c:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 800528e:	2401      	movs	r4, #1
 8005290:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 8005294:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
 8005298:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 800529a:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800529c:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 800529e:	2100      	movs	r1, #0
 80052a0:	4322      	orrs	r2, r4
 80052a2:	615a      	str	r2, [r3, #20]
 80052a4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	f042 0204 	orr.w	r2, r2, #4
 80052ac:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	f042 0202 	orr.w	r2, r2, #2
 80052b4:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	4322      	orrs	r2, r4
 80052ba:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 80052bc:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 80052be:	6a1a      	ldr	r2, [r3, #32]
 80052c0:	4322      	orrs	r2, r4
 80052c2:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4322      	orrs	r2, r4
 80052c8:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 80052ca:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 80052ce:	b163      	cbz	r3, 80052ea <HALL_Init+0x10a>
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b2d9      	uxtb	r1, r3
 80052d4:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 80052d8:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 80052dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80052e0:	304c      	adds	r0, #76	; 0x4c
 80052e2:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 80052e6:	4298      	cmp	r0, r3
 80052e8:	d1fb      	bne.n	80052e2 <HALL_Init+0x102>
  }
}
 80052ea:	bd30      	pop	{r4, r5, pc}
 80052ec:	f04f 0c96 	mov.w	ip, #150	; 0x96
    pHandle->HallTimeout = 150u;
 80052f0:	4664      	mov	r4, ip
 80052f2:	e799      	b.n	8005228 <HALL_Init+0x48>
 80052f4:	10624dd3 	.word	0x10624dd3
 80052f8:	aaaaaaab 	.word	0xaaaaaaab

080052fc <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80052fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80052fe:	68d1      	ldr	r1, [r2, #12]
 8005300:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8005304:	2300      	movs	r3, #0
{
 8005306:	b430      	push	{r4, r5}

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8005308:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
 800530c:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 800530e:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 8005310:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->Direction = POSITIVE;
 8005314:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->RatioInc = false;
 8005318:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 800531c:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->FirstCapt = 0u;
 8005320:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 8005324:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 8005326:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 800532a:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 800532c:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 8005330:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 8005334:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8005338:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 800533a:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800533c:	6813      	ldr	r3, [r2, #0]
 800533e:	430b      	orrs	r3, r1
 8005340:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005342:	68d3      	ldr	r3, [r2, #12]
 8005344:	f043 0302 	orr.w	r3, r3, #2
 8005348:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 800534a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800534e:	bb0b      	cbnz	r3, 8005394 <HALL_Clear+0x98>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005350:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005352:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8005354:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005356:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005358:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800535a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800535c:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800535e:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8005362:	bf0c      	ite	eq
 8005364:	2401      	moveq	r4, #1
 8005366:	2400      	movne	r4, #0
 8005368:	43ab      	bics	r3, r5
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8005378:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800537a:	bf08      	it	eq
 800537c:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8005380:	1e5a      	subs	r2, r3, #1
 8005382:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8005386:	2a05      	cmp	r2, #5
 8005388:	d85c      	bhi.n	8005444 <HALL_Clear+0x148>
 800538a:	e8df f002 	tbb	[pc, r2]
 800538e:	3329      	.short	0x3329
 8005390:	1f51473d 	.word	0x1f51473d
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005394:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005396:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005398:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800539a:	6914      	ldr	r4, [r2, #16]
 800539c:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800539e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053a0:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80053a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053a4:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80053a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80053a8:	bf0c      	ite	eq
 80053aa:	2101      	moveq	r1, #1
 80053ac:	2100      	movne	r1, #0
 80053ae:	43ab      	bics	r3, r5
 80053b0:	bf0c      	ite	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	2300      	movne	r3, #0
 80053b6:	43a2      	bics	r2, r4
 80053b8:	bf0c      	ite	eq
 80053ba:	2201      	moveq	r2, #1
 80053bc:	2200      	movne	r2, #0
 80053be:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80053c0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80053c4:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80053c8:	4313      	orrs	r3, r2
 80053ca:	e7d9      	b.n	8005380 <HALL_Clear+0x84>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80053cc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053ce:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80053d2:	3b3f      	subs	r3, #63	; 0x3f
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	8083      	strh	r3, [r0, #4]
}
 80053d8:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80053da:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80053de:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80053e0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053e2:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80053e6:	333f      	adds	r3, #63	; 0x3f
 80053e8:	b21b      	sxth	r3, r3
}
 80053ea:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80053ec:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80053ee:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80053f2:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80053f4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053f6:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80053fa:	3b2a      	subs	r3, #42	; 0x2a
 80053fc:	b21b      	sxth	r3, r3
}
 80053fe:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005400:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005402:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005406:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005408:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800540a:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 800540e:	332a      	adds	r3, #42	; 0x2a
 8005410:	b21b      	sxth	r3, r3
}
 8005412:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005414:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005416:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800541a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 800541c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800541e:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8005422:	3b15      	subs	r3, #21
 8005424:	b21b      	sxth	r3, r3
}
 8005426:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005428:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800542a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800542e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005430:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005432:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8005436:	3315      	adds	r3, #21
 8005438:	b21b      	sxth	r3, r3
}
 800543a:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800543c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800543e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005442:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 8005444:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005446:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 800544a:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 800544e:	e7c3      	b.n	80053d8 <HALL_Clear+0xdc>

08005450 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005450:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8005454:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005458:	428a      	cmp	r2, r1
{
 800545a:	4603      	mov	r3, r0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800545c:	8880      	ldrh	r0, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 800545e:	d00e      	beq.n	800547e <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005460:	f8b3 c0aa 	ldrh.w	ip, [r3, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005464:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005468:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800546a:	4408      	add	r0, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800546c:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800546e:	f8b3 c0ac 	ldrh.w	ip, [r3, #172]	; 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005472:	f8a3 10aa 	strh.w	r1, [r3, #170]	; 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005476:	4460      	add	r0, ip
 8005478:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800547a:	8098      	strh	r0, [r3, #4]
}
 800547c:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 800547e:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8005482:	4410      	add	r0, r2
 8005484:	b200      	sxth	r0, r0
 8005486:	8098      	strh	r0, [r3, #4]
}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop

0800548c <HALL_CalcAvrgMecSpeedUnit>:
{
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8005490:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8005494:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8005496:	b180      	cbz	r0, 80054ba <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 800549a:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d811      	bhi.n	80054c8 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 80054a8:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 80054aa:	4629      	mov	r1, r5
 80054ac:	4620      	mov	r0, r4
 80054ae:	f001 fc3b 	bl	8006d28 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80054b2:	f9b5 3000 	ldrsh.w	r3, [r5]
 80054b6:	81a3      	strh	r3, [r4, #12]
}
 80054b8:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80054ba:	78e3      	ldrb	r3, [r4, #3]
 80054bc:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 80054be:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 80054c0:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 80054c2:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80054c4:	81a3      	strh	r3, [r4, #12]
}
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80054c8:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 80054cc:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 80054ce:	b31b      	cbz	r3, 8005518 <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80054d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d01d      	beq.n	8005514 <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 80054d8:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 80054dc:	b9f2      	cbnz	r2, 800551c <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80054de:	88a2      	ldrh	r2, [r4, #4]
 80054e0:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 80054e4:	1a89      	subs	r1, r1, r2
 80054e6:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80054e8:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80054ec:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 80054f0:	fb91 f1f2 	sdiv	r1, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80054f4:	8b62      	ldrh	r2, [r4, #26]
 80054f6:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80054fa:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80054fe:	69e1      	ldr	r1, [r4, #28]
 8005500:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005502:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005506:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005508:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800550c:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8005510:	802b      	strh	r3, [r5, #0]
 8005512:	e7ca      	b.n	80054aa <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8005514:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8005518:	802b      	strh	r3, [r5, #0]
 800551a:	e7c6      	b.n	80054aa <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 800551c:	2100      	movs	r1, #0
 800551e:	e7e9      	b.n	80054f4 <HALL_CalcAvrgMecSpeedUnit+0x68>

08005520 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005520:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8005524:	2b00      	cmp	r3, #0
 8005526:	d047      	beq.n	80055b8 <HALL_TIMx_CC_IRQHandler+0x98>
{
 8005528:	b570      	push	{r4, r5, r6, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800552a:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 800552e:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 8005532:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8005536:	b333      	cbz	r3, 8005586 <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005538:	e9d0 340e 	ldrd	r3, r4, [r0, #56]	; 0x38
 800553c:	691d      	ldr	r5, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 800553e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005540:	691a      	ldr	r2, [r3, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005542:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005544:	691e      	ldr	r6, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005546:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005548:	4393      	bics	r3, r2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 800554a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800554c:	bf0c      	ite	eq
 800554e:	2201      	moveq	r2, #1
 8005550:	2200      	movne	r2, #0
 8005552:	43b3      	bics	r3, r6
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	43ac      	bics	r4, r5
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 800555c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8005560:	bf0c      	ite	eq
 8005562:	2201      	moveq	r2, #1
 8005564:	2200      	movne	r2, #0
 8005566:	0092      	lsls	r2, r2, #2
 8005568:	f082 0204 	eor.w	r2, r2, #4
 800556c:	4313      	orrs	r3, r2
 800556e:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 8005572:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005574:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 8005576:	2b05      	cmp	r3, #5
 8005578:	f200 8174 	bhi.w	8005864 <HALL_TIMx_CC_IRQHandler+0x344>
 800557c:	e8df f003 	tbb	[pc, r3]
 8005580:	4d5c6e80 	.word	0x4d5c6e80
 8005584:	1e3b      	.short	0x1e3b
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005586:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 800558a:	6912      	ldr	r2, [r2, #16]
 800558c:	4393      	bics	r3, r2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 800558e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005590:	691c      	ldr	r4, [r3, #16]
 8005592:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005594:	bf0c      	ite	eq
 8005596:	2201      	moveq	r2, #1
 8005598:	2200      	movne	r2, #0
 800559a:	43a3      	bics	r3, r4
 800559c:	bf0c      	ite	eq
 800559e:	2301      	moveq	r3, #1
 80055a0:	2300      	movne	r3, #0
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80055a8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80055aa:	6914      	ldr	r4, [r2, #16]
 80055ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80055ae:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80055b0:	bf08      	it	eq
 80055b2:	f043 0301 	orreq.w	r3, r3, #1
 80055b6:	e7da      	b.n	800556e <HALL_TIMx_CC_IRQHandler+0x4e>
}
 80055b8:	2000      	movs	r0, #0
 80055ba:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 80055bc:	f1bc 0f02 	cmp.w	ip, #2
 80055c0:	f000 808b 	beq.w	80056da <HALL_TIMx_CC_IRQHandler+0x1ba>
        else if ( bPrevHallState == STATE_4 )
 80055c4:	f1bc 0f04 	cmp.w	ip, #4
 80055c8:	f000 80ac 	beq.w	8005724 <HALL_TIMx_CC_IRQHandler+0x204>
    PrevDirection = pHandle->Direction;
 80055cc:	460b      	mov	r3, r1
    if (pHandle->HallMtpa == true)
 80055ce:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 80055d2:	b112      	cbz	r2, 80055da <HALL_TIMx_CC_IRQHandler+0xba>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 80055d4:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 80055d8:	8082      	strh	r2, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 80055da:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 80055de:	2a00      	cmp	r2, #0
 80055e0:	f040 80ac 	bne.w	800573c <HALL_TIMx_CC_IRQHandler+0x21c>
      pHandle->FirstCapt++;
 80055e4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80055e8:	3301      	adds	r3, #1
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80055f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 80055f2:	2000      	movs	r0, #0
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
        if ( bPrevHallState == STATE_4 )
 80055f6:	f1bc 0f04 	cmp.w	ip, #4
 80055fa:	d078      	beq.n	80056ee <HALL_TIMx_CC_IRQHandler+0x1ce>
        else if ( bPrevHallState == STATE_1 )
 80055fc:	f1bc 0f01 	cmp.w	ip, #1
 8005600:	d1e4      	bne.n	80055cc <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005602:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005604:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8005608:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800560a:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 800560c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005610:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005614:	f04f 33ff 	mov.w	r3, #4294967295
 8005618:	e04d      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_6 )
 800561a:	f1bc 0f06 	cmp.w	ip, #6
 800561e:	d077      	beq.n	8005710 <HALL_TIMx_CC_IRQHandler+0x1f0>
        else if ( bPrevHallState == STATE_5 )
 8005620:	f1bc 0f05 	cmp.w	ip, #5
 8005624:	d1d2      	bne.n	80055cc <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005626:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005628:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800562c:	22ff      	movs	r2, #255	; 0xff
 800562e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
 8005636:	e03e      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_1 )
 8005638:	f1bc 0f01 	cmp.w	ip, #1
 800563c:	d05e      	beq.n	80056fc <HALL_TIMx_CC_IRQHandler+0x1dc>
        else if ( bPrevHallState == STATE_2 )
 800563e:	f1bc 0f02 	cmp.w	ip, #2
 8005642:	d1c3      	bne.n	80055cc <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005644:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005646:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800564a:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 800564c:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800564e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005652:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	e02c      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_3 )
 800565c:	f1bc 0f03 	cmp.w	ip, #3
 8005660:	d031      	beq.n	80056c6 <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if ( bPrevHallState == STATE_6 )
 8005662:	f1bc 0f06 	cmp.w	ip, #6
 8005666:	d1b1      	bne.n	80055cc <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005668:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800566a:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 800566e:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8005670:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005672:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005676:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800567a:	f04f 33ff 	mov.w	r3, #4294967295
 800567e:	e01a      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_5 )
 8005680:	f1bc 0f05 	cmp.w	ip, #5
 8005684:	d00e      	beq.n	80056a4 <HALL_TIMx_CC_IRQHandler+0x184>
        else if ( bPrevHallState == STATE_3 )
 8005686:	f1bc 0f03 	cmp.w	ip, #3
 800568a:	d19f      	bne.n	80055cc <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800568c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800568e:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8005692:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8005694:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005696:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800569a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800569e:	f04f 33ff 	mov.w	r3, #4294967295
 80056a2:	e008      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80056a4:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80056a6:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 80056aa:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80056ac:	322a      	adds	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 80056ae:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80056b2:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    if (pHandle->Direction != PrevDirection)
 80056b6:	4299      	cmp	r1, r3
 80056b8:	d089      	beq.n	80055ce <HALL_TIMx_CC_IRQHandler+0xae>
      pHandle->BufferFilled = 0 ;
 80056ba:	2200      	movs	r2, #0
 80056bc:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 80056c0:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 80056c4:	e783      	b.n	80055ce <HALL_TIMx_CC_IRQHandler+0xae>
                                                  + S16_60_PHASE_SHIFT );
 80056c6:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80056c8:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 80056cc:	2301      	movs	r3, #1
                                                  + S16_60_PHASE_SHIFT );
 80056ce:	327f      	adds	r2, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 80056d0:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 80056d4:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80056d8:	e7ed      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80056da:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80056dc:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 80056e0:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80056e2:	3a55      	subs	r2, #85	; 0x55
          pHandle->Direction = POSITIVE;
 80056e4:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80056e8:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80056ec:	e7e3      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80056ee:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80056f0:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80056fa:	e7dc      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80056fc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80056fe:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005702:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8005706:	3355      	adds	r3, #85	; 0x55
 8005708:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 800570c:	4663      	mov	r3, ip
 800570e:	e7d2      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005710:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8005712:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 8005716:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005718:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 800571a:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800571e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8005722:	e7c8      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005724:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005726:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 800572a:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800572c:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800572e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005732:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
 800573a:	e7bc      	b.n	80056b6 <HALL_TIMx_CC_IRQHandler+0x196>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800573c:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8005740:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 8005744:	4562      	cmp	r2, ip
 8005746:	d205      	bcs.n	8005754 <HALL_TIMx_CC_IRQHandler+0x234>
        pHandle->BufferFilled++;
 8005748:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 800574c:	3201      	adds	r2, #1
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
 8005754:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005756:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005758:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 800575c:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005760:	0412      	lsls	r2, r2, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8005762:	b289      	uxth	r1, r1
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005764:	fa12 f286 	uxtah	r2, r2, r6
      if ( pHandle->OVFCounter != 0u )
 8005768:	f005 0eff 	and.w	lr, r5, #255	; 0xff
 800576c:	2d00      	cmp	r5, #0
 800576e:	d043      	beq.n	80057f8 <HALL_TIMx_CC_IRQHandler+0x2d8>
        hAux = hPrscBuf + 1u;
 8005770:	3101      	adds	r1, #1
        wCaptBuf *= hAux;
 8005772:	b289      	uxth	r1, r1
 8005774:	fb01 f202 	mul.w	r2, r1, r2
        if ( pHandle->RatioInc )
 8005778:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 800577c:	2900      	cmp	r1, #0
 800577e:	d045      	beq.n	800580c <HALL_TIMx_CC_IRQHandler+0x2ec>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8005780:	2100      	movs	r1, #0
 8005782:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 8005786:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 800578a:	4291      	cmp	r1, r2
 800578c:	d82f      	bhi.n	80057ee <HALL_TIMx_CC_IRQHandler+0x2ce>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800578e:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8005792:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005796:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 800579a:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 800579e:	4295      	cmp	r5, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80057a0:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80057a4:	bf88      	it	hi
 80057a6:	fb03 f502 	mulhi.w	r5, r3, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80057aa:	eba4 0406 	sub.w	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 80057ae:	f101 0101 	add.w	r1, r1, #1
 80057b2:	b2c9      	uxtb	r1, r1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80057b4:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80057b8:	bf8a      	itet	hi
 80057ba:	1964      	addhi	r4, r4, r5
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 80057bc:	435d      	mulls	r5, r3
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80057be:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 80057c2:	458c      	cmp	ip, r1
 80057c4:	f8ce 5050 	str.w	r5, [lr, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 80057c8:	bf08      	it	eq
 80057ca:	2100      	moveq	r1, #0
 80057cc:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 80057d0:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 80057d4:	b331      	cbz	r1, 8005824 <HALL_TIMx_CC_IRQHandler+0x304>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80057d6:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 80057da:	458c      	cmp	ip, r1
 80057dc:	d937      	bls.n	800584e <HALL_TIMx_CC_IRQHandler+0x32e>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80057de:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 80057e2:	fbb1 f2f2 	udiv	r2, r1, r2
 80057e6:	fb12 f303 	smulbb	r3, r2, r3
 80057ea:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 80057ee:	2300      	movs	r3, #0
 80057f0:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 80057f4:	2000      	movs	r0, #0
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80057f8:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 80057fc:	b1ad      	cbz	r5, 800582a <HALL_TIMx_CC_IRQHandler+0x30a>
          hAux = hPrscBuf + 2u;
 80057fe:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 8005800:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 8005802:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 8005806:	fb01 f202 	mul.w	r2, r1, r2
          pHandle->RatioDec = false;
 800580a:	e7bc      	b.n	8005786 <HALL_TIMx_CC_IRQHandler+0x266>
 800580c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 800580e:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 8005812:	428d      	cmp	r5, r1
 8005814:	d9b7      	bls.n	8005786 <HALL_TIMx_CC_IRQHandler+0x266>
 8005816:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8005818:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800581a:	62a1      	str	r1, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 800581c:	2101      	movs	r1, #1
 800581e:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
 8005822:	e7b0      	b.n	8005786 <HALL_TIMx_CC_IRQHandler+0x266>
            pHandle->AvrElSpeedDpp = 0;
 8005824:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8005828:	e7e1      	b.n	80057ee <HALL_TIMx_CC_IRQHandler+0x2ce>
          uint16_t hAux = hPrscBuf + 1u;
 800582a:	3101      	adds	r1, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 800582c:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 800582e:	b289      	uxth	r1, r1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005830:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 8005834:	fb01 f202 	mul.w	r2, r1, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005838:	d2a5      	bcs.n	8005786 <HALL_TIMx_CC_IRQHandler+0x266>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800583a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 800583c:	2900      	cmp	r1, #0
 800583e:	d0a2      	beq.n	8005786 <HALL_TIMx_CC_IRQHandler+0x266>
 8005840:	6aa1      	ldr	r1, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8005842:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8005844:	62a1      	str	r1, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 8005846:	2101      	movs	r1, #1
 8005848:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
 800584c:	e79b      	b.n	8005786 <HALL_TIMx_CC_IRQHandler+0x266>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 800584e:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8005852:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8005856:	fb92 fcfc 	sdiv	ip, r2, ip
 800585a:	fb93 f3fc 	sdiv	r3, r3, ip
 800585e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8005862:	e7c4      	b.n	80057ee <HALL_TIMx_CC_IRQHandler+0x2ce>
        pHandle->SensorIsReliable = false;
 8005864:	2300      	movs	r3, #0
 8005866:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 800586a:	e6af      	b.n	80055cc <HALL_TIMx_CC_IRQHandler+0xac>

0800586c <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 800586c:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8005870:	b1e3      	cbz	r3, 80058ac <HALL_TIMx_UP_IRQHandler+0x40>
{
 8005872:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 8005874:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005878:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 800587a:	3301      	adds	r3, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005882:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005884:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 8005888:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 800588c:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005890:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8005894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005898:	fb04 2202 	mla	r2, r4, r2, r2
 800589c:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	4299      	cmp	r1, r3
 80058a4:	d204      	bcs.n	80058b0 <HALL_TIMx_UP_IRQHandler+0x44>
}
 80058a6:	2000      	movs	r0, #0
 80058a8:	bc30      	pop	{r4, r5}
 80058aa:	4770      	bx	lr
 80058ac:	2000      	movs	r0, #0
 80058ae:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80058b0:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 80058b4:	2200      	movs	r2, #0
 80058b6:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80058b8:	bb0b      	cbnz	r3, 80058fe <HALL_TIMx_UP_IRQHandler+0x92>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80058ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80058bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80058be:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80058c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80058c2:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80058c4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80058c6:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80058c8:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 80058cc:	bf0c      	ite	eq
 80058ce:	2401      	moveq	r4, #1
 80058d0:	2400      	movne	r4, #0
 80058d2:	43ab      	bics	r3, r5
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80058e2:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80058e4:	bf08      	it	eq
 80058e6:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 80058ea:	1e5a      	subs	r2, r3, #1
 80058ec:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 80058f0:	2a05      	cmp	r2, #5
 80058f2:	d86f      	bhi.n	80059d4 <HALL_TIMx_UP_IRQHandler+0x168>
 80058f4:	e8df f002 	tbb	[pc, r2]
 80058f8:	52596067 	.word	0x52596067
 80058fc:	1f4b      	.short	0x1f4b
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80058fe:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005900:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005902:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005904:	6914      	ldr	r4, [r2, #16]
 8005906:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800590a:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800590c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800590e:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005910:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005912:	bf0c      	ite	eq
 8005914:	2101      	moveq	r1, #1
 8005916:	2100      	movne	r1, #0
 8005918:	43ab      	bics	r3, r5
 800591a:	bf0c      	ite	eq
 800591c:	2301      	moveq	r3, #1
 800591e:	2300      	movne	r3, #0
 8005920:	43a2      	bics	r2, r4
 8005922:	bf0c      	ite	eq
 8005924:	2201      	moveq	r2, #1
 8005926:	2200      	movne	r2, #0
 8005928:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800592a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800592e:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005932:	4313      	orrs	r3, r2
 8005934:	e7d9      	b.n	80058ea <HALL_TIMx_UP_IRQHandler+0x7e>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8005936:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005938:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 800593c:	3b3f      	subs	r3, #63	; 0x3f
 800593e:	b21b      	sxth	r3, r3
 8005940:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005942:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005946:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 800594a:	2200      	movs	r2, #0
 800594c:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 8005950:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005954:	b17c      	cbz	r4, 8005976 <HALL_TIMx_UP_IRQHandler+0x10a>
 8005956:	1e62      	subs	r2, r4, #1
 8005958:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800595a:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 800595e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8005962:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005966:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 800596a:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800596e:	429a      	cmp	r2, r3
 8005970:	d1fb      	bne.n	800596a <HALL_TIMx_UP_IRQHandler+0xfe>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005972:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 8005976:	2300      	movs	r3, #0
 8005978:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 800597c:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005980:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8005984:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8005988:	bc30      	pop	{r4, r5}
 800598a:	2000      	movs	r0, #0
 800598c:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800598e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005990:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8005994:	3315      	adds	r3, #21
 8005996:	b21b      	sxth	r3, r3
 8005998:	8083      	strh	r3, [r0, #4]
      break;
 800599a:	e7d2      	b.n	8005942 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 800599c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800599e:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80059a2:	3b15      	subs	r3, #21
 80059a4:	b21b      	sxth	r3, r3
 80059a6:	8083      	strh	r3, [r0, #4]
      break;
 80059a8:	e7cb      	b.n	8005942 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80059aa:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059ac:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80059b0:	332a      	adds	r3, #42	; 0x2a
 80059b2:	b21b      	sxth	r3, r3
 80059b4:	8083      	strh	r3, [r0, #4]
      break;
 80059b6:	e7c4      	b.n	8005942 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80059b8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059ba:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80059be:	3b2a      	subs	r3, #42	; 0x2a
 80059c0:	b21b      	sxth	r3, r3
 80059c2:	8083      	strh	r3, [r0, #4]
      break;
 80059c4:	e7bd      	b.n	8005942 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80059c6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059c8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80059cc:	333f      	adds	r3, #63	; 0x3f
 80059ce:	b21b      	sxth	r3, r3
 80059d0:	8083      	strh	r3, [r0, #4]
      break;
 80059d2:	e7b6      	b.n	8005942 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->SensorIsReliable = false;
 80059d4:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80059d6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 80059da:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 80059de:	e7b0      	b.n	8005942 <HALL_TIMx_UP_IRQHandler+0xd6>

080059e0 <MCP_ReceivedPacket>:
#include "register_interface.h"
#include "mc_config.h"
#include "mcp_config.h"

void MCP_ReceivedPacket(MCP_Handle_t * pHandle)
{
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4604      	mov	r4, r0
  uint8_t motorID;
  uint8_t MCPResponse;
  uint8_t userCommand=0;
  int16_t txSyncFreeSpace;
  
  if (pHandle->rxLength != 0)
 80059e4:	8980      	ldrh	r0, [r0, #12]
{
 80059e6:	b082      	sub	sp, #8
  if (pHandle->rxLength != 0)
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d05c      	beq.n	8005aa6 <MCP_ReceivedPacket+0xc6>
  {
    packetHeader = (uint16_t *) pHandle->rxBuffer;  
 80059ec:	6865      	ldr	r5, [r4, #4]
    command = *packetHeader & CMD_MASK;
 80059ee:	882b      	ldrh	r3, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80059f0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
    command = *packetHeader & CMD_MASK;
 80059f4:	f023 0207 	bic.w	r2, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80059f8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    command = *packetHeader & CMD_MASK;
 80059fc:	b292      	uxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80059fe:	d05c      	beq.n	8005aba <MCP_ReceivedPacket+0xda>
    MCI_Handle_t * pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005a00:	6821      	ldr	r1, [r4, #0]
    MCI_Handle_t * pMCI = &Mci[motorID];
 8005a02:	4e5f      	ldr	r6, [pc, #380]	; (8005b80 <MCP_ReceivedPacket+0x1a0>)
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005a04:	8989      	ldrh	r1, [r1, #12]
    motorID = (*packetHeader & MOTOR_MASK)-1;
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	3b01      	subs	r3, #1
    MCI_Handle_t * pMCI = &Mci[motorID];
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005a12:	3802      	subs	r0, #2
 8005a14:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005a16:	3502      	adds	r5, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005a18:	3901      	subs	r1, #1
    MCI_Handle_t * pMCI = &Mci[motorID];
 8005a1a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    /* Initialization of the tx length, command which send back data has to set the txLength (case of Read register)*/
    pHandle->txLength = 0;
    
    switch (command) 
 8005a1e:	2a60      	cmp	r2, #96	; 0x60
    pHandle->txLength = 0;
 8005a20:	f04f 0300 	mov.w	r3, #0
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005a24:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005a26:	6065      	str	r5, [r4, #4]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005a28:	b289      	uxth	r1, r1
    pHandle->txLength = 0;
 8005a2a:	81e3      	strh	r3, [r4, #14]
    switch (command) 
 8005a2c:	d83d      	bhi.n	8005aaa <MCP_ReceivedPacket+0xca>
 8005a2e:	2a60      	cmp	r2, #96	; 0x60
 8005a30:	d832      	bhi.n	8005a98 <MCP_ReceivedPacket+0xb8>
 8005a32:	e8df f002 	tbb	[pc, r2]
 8005a36:	3187      	.short	0x3187
 8005a38:	31313131 	.word	0x31313131
 8005a3c:	318f3131 	.word	0x318f3131
 8005a40:	31313131 	.word	0x31313131
 8005a44:	31a03131 	.word	0x31a03131
 8005a48:	31313131 	.word	0x31313131
 8005a4c:	315d3131 	.word	0x315d3131
 8005a50:	31313131 	.word	0x31313131
 8005a54:	31573131 	.word	0x31573131
 8005a58:	31313131 	.word	0x31313131
 8005a5c:	317c3131 	.word	0x317c3131
 8005a60:	31313131 	.word	0x31313131
 8005a64:	31533131 	.word	0x31533131
 8005a68:	31313131 	.word	0x31313131
 8005a6c:	31763131 	.word	0x31763131
 8005a70:	31313131 	.word	0x31313131
 8005a74:	31943131 	.word	0x31943131
 8005a78:	31313131 	.word	0x31313131
 8005a7c:	319a3131 	.word	0x319a3131
 8005a80:	31313131 	.word	0x31313131
 8005a84:	313f3131 	.word	0x313f3131
 8005a88:	31313131 	.word	0x31313131
 8005a8c:	313f3131 	.word	0x313f3131
 8005a90:	31313131 	.word	0x31313131
 8005a94:	3131      	.short	0x3131
 8005a96:	3f          	.byte	0x3f
 8005a97:	00          	.byte	0x00
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2002      	movs	r0, #2
    	  }
        break;
      default :
        MCPResponse = MCP_CMD_UNKNOWN;
      }
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a9c:	68a2      	ldr	r2, [r4, #8]
 8005a9e:	54d0      	strb	r0, [r2, r3]
      pHandle->txLength++;
 8005aa0:	89e3      	ldrh	r3, [r4, #14]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	81e3      	strh	r3, [r4, #14]
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
    /* Nothing to do, txBuffer and txLength have not been modified */
  } 
}
 8005aa6:	b002      	add	sp, #8
 8005aa8:	bd70      	pop	{r4, r5, r6, pc}
    switch (command) 
 8005aaa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005aae:	bf18      	it	ne
 8005ab0:	2002      	movne	r0, #2
 8005ab2:	d1f3      	bne.n	8005a9c <MCP_ReceivedPacket+0xbc>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005ab4:	b20a      	sxth	r2, r1
  uint8_t userCommand=0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e026      	b.n	8005b08 <MCP_ReceivedPacket+0x128>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005aba:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005abc:	3802      	subs	r0, #2
        userCommand = (command >> 3) & 0x1f;
 8005abe:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005ac2:	8999      	ldrh	r1, [r3, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005ac4:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005ac6:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 8005ac8:	2300      	movs	r3, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005aca:	f012 0f1e 	tst.w	r2, #30
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005ace:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005ad0:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 8005ad2:	81e3      	strh	r3, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005ad4:	d014      	beq.n	8005b00 <MCP_ReceivedPacket+0x120>
        MCPResponse = MCP_CMD_OK;
 8005ad6:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8005ad8:	200d      	movs	r0, #13
 8005ada:	e7df      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
          if (MCI_GetSTMState(pMCI) == IDLE)
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7fb fbb9 	bl	8001254 <MCI_GetSTMState>
 8005ae2:	b128      	cbz	r0, 8005af0 <MCP_ReceivedPacket+0x110>
            MCI_StopMotor(pMCI);
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f7fb fb6d 	bl	80011c4 <MCI_StopMotor>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005aea:	89e3      	ldrh	r3, [r4, #14]
            MCPResponse = MCP_CMD_OK;
 8005aec:	2000      	movs	r0, #0
 8005aee:	e7d5      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
            MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7fb fb5d 	bl	80011b0 <MCI_StartMotor>
 8005af6:	f080 0001 	eor.w	r0, r0, #1
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005afa:	89e3      	ldrh	r3, [r4, #14]
            MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005afc:	b2c0      	uxtb	r0, r0
 8005afe:	e7cd      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005b00:	3901      	subs	r1, #1
        userCommand = (command >> 3) & 0x1f;
 8005b02:	f002 031f 	and.w	r3, r2, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005b06:	b20a      	sxth	r2, r1
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005b08:	491e      	ldr	r1, [pc, #120]	; (8005b84 <MCP_ReceivedPacket+0x1a4>)
 8005b0a:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8005b0e:	2e00      	cmp	r6, #0
 8005b10:	d0e1      	beq.n	8005ad6 <MCP_ReceivedPacket+0xf6>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8005b12:	68a3      	ldr	r3, [r4, #8]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	4629      	mov	r1, r5
 8005b18:	f104 030e 	add.w	r3, r4, #14
 8005b1c:	47b0      	blx	r6
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b1e:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8005b20:	e7bc      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
          MCI_FaultAcknowledged(pMCI);
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7fb fb52 	bl	80011cc <MCI_FaultAcknowledged>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b28:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8005b2a:	2000      	movs	r0, #0
        break;
 8005b2c:	e7b6      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
          if (MCI_GetSTMState(pMCI) == RUN)
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f7fb fb90 	bl	8001254 <MCI_GetSTMState>
 8005b34:	2806      	cmp	r0, #6
 8005b36:	d1d8      	bne.n	8005aea <MCP_ReceivedPacket+0x10a>
            MCI_StopRamp(pMCI);
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f7fb fb9b 	bl	8001274 <MCI_StopRamp>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b3e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005b40:	2000      	movs	r0, #0
 8005b42:	e7ab      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005b44:	68a3      	ldr	r3, [r4, #8]
    	pHandle->txLength = 4;
 8005b46:	2104      	movs	r1, #4
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005b48:	2201      	movs	r2, #1
    	pHandle->txLength = 4;
 8005b4a:	81e1      	strh	r1, [r4, #14]
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005b4c:	701a      	strb	r2, [r3, #0]
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b4e:	89e3      	ldrh	r3, [r4, #14]
    	MCPResponse = MCP_CMD_OK;
 8005b50:	2000      	movs	r0, #0
      break;
 8005b52:	e7a3      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
        MCPResponse = RI_SetRegCommandParser (pHandle,txSyncFreeSpace); 
 8005b54:	4620      	mov	r0, r4
 8005b56:	f7fc fa31 	bl	8001fbc <RI_SetRegCommandParser>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b5a:	89e3      	ldrh	r3, [r4, #14]
      break;
 8005b5c:	e79e      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
        MCI_EncoderAlign(pMCI);
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f7fb fb38 	bl	80011d4 <MCI_EncoderAlign>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b64:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005b66:	2000      	movs	r0, #0
        break;
 8005b68:	e798      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
        MCI_Clear_Iqdref(pMCI);
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7fb fbea 	bl	8001344 <MCI_Clear_Iqdref>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b70:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005b72:	2000      	movs	r0, #0
        break;
 8005b74:	e792      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
        MCPResponse = RI_GetRegCommandParser (pHandle,txSyncFreeSpace); 
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7fc fd32 	bl	80025e0 <RI_GetRegCommandParser>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b7c:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005b7e:	e78d      	b.n	8005a9c <MCP_ReceivedPacket+0xbc>
 8005b80:	20000770 	.word	0x20000770
 8005b84:	20001a00 	.word	0x20001a00

08005b88 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog (MCPA_Handle_t *pHandle)
{
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005b8a:	7fc3      	ldrb	r3, [r0, #31]
 8005b8c:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8005b90:	429a      	cmp	r2, r3
{
 8005b92:	4604      	mov	r4, r0
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005b94:	d002      	beq.n	8005b9c <MCPA_dataLog+0x14>
    }     
  }
  else 
  {
    /* nothing to log just waiting next call to MCPA_datalog*/
    pHandle->HFIndex++;
 8005b96:	3301      	adds	r3, #1
 8005b98:	77c3      	strb	r3, [r0, #31]
  }
}  
 8005b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pHandle->bufferIndex == 0)
 8005b9c:	8b05      	ldrh	r5, [r0, #24]
    pHandle->HFIndex = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	77c3      	strb	r3, [r0, #31]
    if (pHandle->bufferIndex == 0)
 8005ba2:	b1a5      	cbz	r5, 8005bce <MCPA_dataLog+0x46>
 8005ba4:	6961      	ldr	r1, [r4, #20]
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8005ba6:	8ba2      	ldrh	r2, [r4, #28]
 8005ba8:	42aa      	cmp	r2, r5
 8005baa:	d24e      	bcs.n	8005c4a <MCPA_dataLog+0xc2>
 8005bac:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->MFRateBuff == 254) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8005bb0:	2bfe      	cmp	r3, #254	; 0xfe
 8005bb2:	d066      	beq.n	8005c82 <MCPA_dataLog+0xfa>
       *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005bb4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005bb8:	534b      	strh	r3, [r1, r5]
       pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8005bba:	8b22      	ldrh	r2, [r4, #24]
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	3202      	adds	r2, #2
 8005bc0:	2309      	movs	r3, #9
 8005bc2:	6845      	ldr	r5, [r0, #4]
 8005bc4:	b292      	uxth	r2, r2
 8005bc6:	47a8      	blx	r5
       pHandle->bufferIndex = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	8323      	strh	r3, [r4, #24]
}  
 8005bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer, (void **) &pHandle->currentBuffer, MCTL_ASYNC))
 8005bce:	4601      	mov	r1, r0
 8005bd0:	2209      	movs	r2, #9
 8005bd2:	f851 0b14 	ldr.w	r0, [r1], #20
 8005bd6:	6803      	ldr	r3, [r0, #0]
 8005bd8:	4798      	blx	r3
 8005bda:	b390      	cbz	r0, 8005c42 <MCPA_dataLog+0xba>
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8005bdc:	4b4b      	ldr	r3, [pc, #300]	; (8005d0c <MCPA_dataLog+0x184>)
 8005bde:	6961      	ldr	r1, [r4, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	600b      	str	r3, [r1, #0]
        if (pHandle->Mark != pHandle->MarkBuff)
 8005be4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8005be8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
        pHandle->MFIndex = 0; /* Restart the motif from scratch at each buffer*/
 8005bec:	f884 5020 	strb.w	r5, [r4, #32]
        pHandle->bufferIndex = 4; 
 8005bf0:	2304      	movs	r3, #4
        if (pHandle->Mark != pHandle->MarkBuff)
 8005bf2:	4290      	cmp	r0, r2
        pHandle->bufferIndex = 4; 
 8005bf4:	8323      	strh	r3, [r4, #24]
        if (pHandle->Mark != pHandle->MarkBuff)
 8005bf6:	d101      	bne.n	8005bfc <MCPA_dataLog+0x74>
 8005bf8:	461d      	mov	r5, r3
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8005bfa:	e7d4      	b.n	8005ba6 <MCPA_dataLog+0x1e>
          pHandle->HFNumBuff = pHandle->HFNum;
 8005bfc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
          pHandle->MFNumBuff = pHandle->MFNum;
 8005c00:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
          pHandle->HFRateBuff = pHandle->HFRate;
 8005c04:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
          pHandle->MarkBuff = pHandle->Mark;
 8005c08:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
          pHandle->HFNumBuff = pHandle->HFNum;
 8005c0c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8005c10:	185a      	adds	r2, r3, r1
          pHandle->MFNumBuff = pHandle->MFNum;
 8005c12:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005c16:	8b63      	ldrh	r3, [r4, #26]
          pHandle->MFRateBuff = pHandle->MFRate;
 8005c18:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
          pHandle->HFRateBuff = pHandle->HFRate;
 8005c1c:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8005c20:	0092      	lsls	r2, r2, #2
          pHandle->MFRateBuff = pHandle->MFRate;
 8005c22:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005c26:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8005c28:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8005c2c:	f001 fa5c 	bl	80070e8 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8005c30:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8005c34:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8005c38:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8005c3c:	441a      	add	r2, r3
 8005c3e:	f001 fa53 	bl	80070e8 <memcpy>
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8005c42:	8b25      	ldrh	r5, [r4, #24]
 8005c44:	2d00      	cmp	r5, #0
 8005c46:	d1ad      	bne.n	8005ba4 <MCPA_dataLog+0x1c>
}  
 8005c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (i=0; i<pHandle->HFNumBuff; i++)
 8005c4a:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
      logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005c4e:	194b      	adds	r3, r1, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8005c50:	b36e      	cbz	r6, 8005cae <MCPA_dataLog+0x126>
 8005c52:	68a2      	ldr	r2, [r4, #8]
 8005c54:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8005c58:	3a04      	subs	r2, #4
        *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]);
 8005c5a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8005c5e:	8800      	ldrh	r0, [r0, #0]
 8005c60:	f823 0b02 	strh.w	r0, [r3], #2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8005c64:	8b25      	ldrh	r5, [r4, #24]
 8005c66:	3502      	adds	r5, #2
 8005c68:	b2ad      	uxth	r5, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8005c6a:	4563      	cmp	r3, ip
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8005c6c:	8325      	strh	r5, [r4, #24]
      for (i=0; i<pHandle->HFNumBuff; i++)
 8005c6e:	d1f4      	bne.n	8005c5a <MCPA_dataLog+0xd2>
      if (pHandle->MFRateBuff < 254) 
 8005c70:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005c74:	8ba2      	ldrh	r2, [r4, #28]
      if (pHandle->MFRateBuff < 254) 
 8005c76:	2bfd      	cmp	r3, #253	; 0xfd
 8005c78:	4618      	mov	r0, r3
 8005c7a:	d91d      	bls.n	8005cb8 <MCPA_dataLog+0x130>
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005c7c:	4295      	cmp	r5, r2
 8005c7e:	d897      	bhi.n	8005bb0 <MCPA_dataLog+0x28>
}  
 8005c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005c82:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005c86:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8005c8a:	4418      	add	r0, r3
 8005c8c:	4298      	cmp	r0, r3
 8005c8e:	dd91      	ble.n	8005bb4 <MCPA_dataLog+0x2c>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005c90:	68a7      	ldr	r7, [r4, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005c92:	6926      	ldr	r6, [r4, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005c94:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	514a      	str	r2, [r1, r5]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005c9c:	1c5a      	adds	r2, r3, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005c9e:	5cf3      	ldrb	r3, [r6, r3]
 8005ca0:	441d      	add	r5, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005ca2:	b2d3      	uxtb	r3, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ca4:	b2ad      	uxth	r5, r5
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005ca6:	4283      	cmp	r3, r0
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ca8:	8325      	strh	r5, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005caa:	dbf3      	blt.n	8005c94 <MCPA_dataLog+0x10c>
 8005cac:	e782      	b.n	8005bb4 <MCPA_dataLog+0x2c>
      if (pHandle->MFRateBuff < 254) 
 8005cae:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8005cb2:	28fd      	cmp	r0, #253	; 0xfd
 8005cb4:	f63f af71 	bhi.w	8005b9a <MCPA_dataLog+0x12>
        if (pHandle->MFIndex == pHandle->MFRateBuff)  
 8005cb8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005cbc:	4283      	cmp	r3, r0
 8005cbe:	d007      	beq.n	8005cd0 <MCPA_dataLog+0x148>
          pHandle->MFIndex ++;
 8005cc0:	3301      	adds	r3, #1
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005cc2:	8b25      	ldrh	r5, [r4, #24]
          pHandle->MFIndex ++;
 8005cc4:	f884 3020 	strb.w	r3, [r4, #32]
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005cc8:	42aa      	cmp	r2, r5
 8005cca:	f4ff af73 	bcc.w	8005bb4 <MCPA_dataLog+0x2c>
}  
 8005cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005cd0:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8005cd4:	4437      	add	r7, r6
          pHandle->MFIndex = 0;
 8005cd6:	2300      	movs	r3, #0
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005cd8:	42b7      	cmp	r7, r6
          pHandle->MFIndex = 0;
 8005cda:	f884 3020 	strb.w	r3, [r4, #32]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005cde:	dd12      	ble.n	8005d06 <MCPA_dataLog+0x17e>
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005ce0:	f8d4 e008 	ldr.w	lr, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ce4:	f8d4 c010 	ldr.w	ip, [r4, #16]
            logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005ce8:	8b25      	ldrh	r5, [r4, #24]
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005cea:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	514b      	str	r3, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005cf2:	f81c 3006 	ldrb.w	r3, [ip, r6]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005cf6:	1c70      	adds	r0, r6, #1
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005cf8:	441d      	add	r5, r3
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005cfa:	b2c6      	uxtb	r6, r0
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005cfc:	b2ad      	uxth	r5, r5
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005cfe:	42be      	cmp	r6, r7
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d00:	8325      	strh	r5, [r4, #24]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d02:	dbf2      	blt.n	8005cea <MCPA_dataLog+0x162>
 8005d04:	e7e0      	b.n	8005cc8 <MCPA_dataLog+0x140>
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005d06:	8b25      	ldrh	r5, [r4, #24]
 8005d08:	e7de      	b.n	8005cc8 <MCPA_dataLog+0x140>
 8005d0a:	bf00      	nop
 8005d0c:	20001ab0 	.word	0x20001ab0

08005d10 <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8005d10:	8b03      	ldrh	r3, [r0, #24]
 8005d12:	b19b      	cbz	r3, 8005d3c <MCPA_flushDataLog+0x2c>
{
 8005d14:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8005d16:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8005d1a:	2afe      	cmp	r2, #254	; 0xfe
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	d00e      	beq.n	8005d3e <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005d20:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005d22:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005d26:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8005d28:	8b22      	ldrh	r2, [r4, #24]
 8005d2a:	6820      	ldr	r0, [r4, #0]
 8005d2c:	3202      	adds	r2, #2
 8005d2e:	2309      	movs	r3, #9
 8005d30:	6845      	ldr	r5, [r0, #4]
 8005d32:	b292      	uxth	r2, r2
 8005d34:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	8323      	strh	r3, [r4, #24]
  }   
}
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d3e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8005d42:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005d46:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d48:	4494      	add	ip, r2
 8005d4a:	4562      	cmp	r2, ip
 8005d4c:	dae9      	bge.n	8005d22 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005d4e:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d50:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005d52:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8005d56:	6800      	ldr	r0, [r0, #0]
 8005d58:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d5a:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d5c:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d5e:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d60:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d62:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d64:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d66:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d68:	dbf3      	blt.n	8005d52 <MCPA_flushDataLog+0x42>
 8005d6a:	e7da      	b.n	8005d22 <MCPA_flushDataLog+0x12>

08005d6c <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}
  
uint8_t MCPA_cfgLog (MCPA_Handle_t *pHandle, uint8_t * cfgdata)
{
 8005d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t newID, buffSize;
  uint8_t i;
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
  uint8_t result = MCP_CMD_OK;
  
  buffSize = *((uint16_t *) cfgdata);
 8005d70:	880f      	ldrh	r7, [r1, #0]
{
 8005d72:	4604      	mov	r4, r0
  if (buffSize == 0)
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	d044      	beq.n	8005e02 <MCPA_cfgLog+0x96>
  { 
    /* Switch Off condition */
    MCPA_stopDataLog(pHandle);
  }
  else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8005d78:	6803      	ldr	r3, [r0, #0]
 8005d7a:	89db      	ldrh	r3, [r3, #14]
 8005d7c:	42bb      	cmp	r3, r7
 8005d7e:	d33d      	bcc.n	8005dfc <MCPA_cfgLog+0x90>
  {
    result = MCP_ERROR_NO_TXASYNC_SPACE;
  }  
  else
  {
     pHandle->HFRate = *((uint8_t *) &cfgdata[2]);
 8005d80:	788b      	ldrb	r3, [r1, #2]
 8005d82:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     pHandle->HFNum  = *((uint8_t *) &cfgdata[3]);
 8005d86:	78ca      	ldrb	r2, [r1, #3]
 8005d88:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
     pHandle->MFRate = *((uint8_t *) &cfgdata[4]);
 8005d8c:	790b      	ldrb	r3, [r1, #4]
 8005d8e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8005d92:	794e      	ldrb	r6, [r1, #5]
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8005d94:	7f83      	ldrb	r3, [r0, #30]
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8005d96:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8005d9a:	4416      	add	r6, r2
 8005d9c:	429e      	cmp	r6, r3
 8005d9e:	dc52      	bgt.n	8005e46 <MCPA_cfgLog+0xda>
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
 8005da0:	3106      	adds	r1, #6
     {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005da2:	2e00      	cmp	r6, #0
 8005da4:	d056      	beq.n	8005e54 <MCPA_cfgLog+0xe8>
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
 8005da6:	2600      	movs	r6, #0
 8005da8:	4688      	mov	r8, r1
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005daa:	4635      	mov	r5, r6
 8005dac:	e011      	b.n	8005dd2 <MCPA_cfgLog+0x66>
       {
         newID = *((uint16_t *) cfgdata);
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8005dae:	68e3      	ldr	r3, [r4, #12]
 8005db0:	5558      	strb	r0, [r3, r5]
         logSize = logSize+pHandle->dataSizeTable[i];
 8005db2:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005db4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005db8:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 8005dbc:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005dbe:	f105 0c01 	add.w	ip, r5, #1
 8005dc2:	fa5f f58c 	uxtb.w	r5, ip
 8005dc6:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 8005dc8:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005dca:	429d      	cmp	r5, r3
         cfgdata = cfgdata+2; /* Point to the next UID */
 8005dcc:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 8005dce:	b2d6      	uxtb	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005dd0:	da11      	bge.n	8005df6 <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) cfgdata);
 8005dd2:	f838 9b02 	ldrh.w	r9, [r8], #2
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8005dd6:	6861      	ldr	r1, [r4, #4]
 8005dd8:	4648      	mov	r0, r9
 8005dda:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8005dde:	f7fc ff83 	bl	8002ce8 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8005de2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005de6:	42ab      	cmp	r3, r5
 8005de8:	f04f 0002 	mov.w	r0, #2
 8005dec:	d8df      	bhi.n	8005dae <MCPA_cfgLog+0x42>
 8005dee:	4648      	mov	r0, r9
 8005df0:	f7fc ff6e 	bl	8002cd0 <RI_GetIDSize>
 8005df4:	e7db      	b.n	8005dae <MCPA_cfgLog+0x42>
       }
       if (buffSize < (logSize+2+4) ) /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
 8005df6:	1d73      	adds	r3, r6, #5
 8005df8:	429f      	cmp	r7, r3
 8005dfa:	dc1a      	bgt.n	8005e32 <MCPA_cfgLog+0xc6>
    result = MCP_ERROR_NO_TXASYNC_SPACE;
 8005dfc:	2009      	movs	r0, #9
     {
       result = MCP_ERROR_BAD_RAW_FORMAT;
     }
  }
  return result;
}
 8005dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005e02:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8005e04:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005e08:	b153      	cbz	r3, 8005e20 <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005e0a:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005e0c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005e10:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8005e12:	8b22      	ldrh	r2, [r4, #24]
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	3202      	adds	r2, #2
 8005e18:	6845      	ldr	r5, [r0, #4]
 8005e1a:	b292      	uxth	r2, r2
 8005e1c:	2309      	movs	r3, #9
 8005e1e:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8005e20:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8005e22:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8005e26:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8005e28:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8005e2c:	8320      	strh	r0, [r4, #24]
}
 8005e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
         pHandle->bufferTxTrigger = buffSize-logSize-2; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8005e32:	1eba      	subs	r2, r7, #2
 8005e34:	1b92      	subs	r2, r2, r6
 8005e36:	8362      	strh	r2, [r4, #26]
         pHandle->Mark =   *((uint8_t *) cfgdata);
 8005e38:	780b      	ldrb	r3, [r1, #0]
 8005e3a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
         if (pHandle->Mark == 0)
 8005e3e:	b12b      	cbz	r3, 8005e4c <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8005e40:	2000      	movs	r0, #0
}
 8005e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8005e46:	200a      	movs	r0, #10
}
 8005e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005e4c:	8b23      	ldrh	r3, [r4, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0e6      	beq.n	8005e20 <MCPA_cfgLog+0xb4>
 8005e52:	e7da      	b.n	8005e0a <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005e54:	2305      	movs	r3, #5
 8005e56:	e7cf      	b.n	8005df8 <MCPA_cfgLog+0x8c>

08005e58 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8005e58:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8005e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8005e5e:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8005e60:	2100      	movs	r1, #0
 8005e62:	f001 f94f 	bl	8007104 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	bf00      	nop

08005e70 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005e70:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8005e74:	1c53      	adds	r3, r2, #1
 8005e76:	b29b      	uxth	r3, r3
{
 8005e78:	b510      	push	{r4, lr}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8005e7a:	2b7f      	cmp	r3, #127	; 0x7f
{
 8005e7c:	4604      	mov	r4, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8005e7e:	bf88      	it	hi
 8005e80:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005e82:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
{
 8005e86:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8005e88:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8005e8c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005e90:	f104 0efe 	add.w	lr, r4, #254	; 0xfe
 8005e94:	1ea3      	subs	r3, r4, #2
  int32_t wAux = 0;
 8005e96:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005e98:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005e9c:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005e9e:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005ea0:	d1fa      	bne.n	8005e98 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	bfb8      	it	lt
 8005ea6:	327f      	addlt	r2, #127	; 0x7f
 8005ea8:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8005eaa:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8005eae:	bd10      	pop	{r4, pc}

08005eb0 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8005eb0:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop

08005eb8 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8005eb8:	8a03      	ldrh	r3, [r0, #16]
 8005eba:	8b42      	ldrh	r2, [r0, #26]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d306      	bcc.n	8005ece <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8005ec0:	8b82      	ldrh	r2, [r0, #28]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d901      	bls.n	8005eca <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8005ec6:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8005ec8:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8005eca:	8ac0      	ldrh	r0, [r0, #22]
 8005ecc:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8005ece:	2008      	movs	r0, #8
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop

08005ed4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	8203      	strh	r3, [r0, #16]
}
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop

08005edc <NTC_Init>:
{
 8005edc:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005ede:	7803      	ldrb	r3, [r0, #0]
{
 8005ee0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005ee2:	b123      	cbz	r3, 8005eee <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005ee4:	8a43      	ldrh	r3, [r0, #18]
 8005ee6:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8005ee8:	2200      	movs	r2, #0
 8005eea:	82c2      	strh	r2, [r0, #22]
}
 8005eec:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005eee:	3004      	adds	r0, #4
 8005ef0:	f7fc ffc4 	bl	8002e7c <RCM_RegisterRegConv>
 8005ef4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7ff ffeb 	bl	8005ed4 <NTC_Clear>
}
 8005efe:	bd10      	pop	{r4, pc}

08005f00 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8005f00:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005f02:	7803      	ldrb	r3, [r0, #0]
{
 8005f04:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005f06:	b113      	cbz	r3, 8005f0e <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8005f08:	2000      	movs	r0, #0
 8005f0a:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8005f0c:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005f0e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005f12:	f7fd f88f 	bl	8003034 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8005f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f1a:	4298      	cmp	r0, r3
 8005f1c:	d007      	beq.n	8005f2e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005f1e:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8005f20:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005f22:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8005f24:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8005f28:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8005f2c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f7ff ffc2 	bl	8005eb8 <NTC_SetFaultState>
 8005f34:	82e0      	strh	r0, [r4, #22]
}
 8005f36:	bd10      	pop	{r4, pc}

08005f38 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005f38:	7803      	ldrb	r3, [r0, #0]
 8005f3a:	b983      	cbnz	r3, 8005f5e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8005f3c:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005f3e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8005f40:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005f44:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005f46:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8005f48:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bfbc      	itt	lt
 8005f50:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005f54:	33ff      	addlt	r3, #255	; 0xff
 8005f56:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8005f5a:	b200      	sxth	r0, r0
 8005f5c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8005f5e:	8a80      	ldrh	r0, [r0, #20]
}
 8005f60:	b200      	sxth	r0, r0
 8005f62:	4770      	bx	lr

08005f64 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8005f64:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005f66:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005f68:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005f6a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005f6c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8005f6e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8005f70:	6283      	str	r3, [r0, #40]	; 0x28
}
 8005f72:	4770      	bx	lr

08005f74 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8005f74:	8081      	strh	r1, [r0, #4]
}
 8005f76:	4770      	bx	lr

08005f78 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8005f78:	80c1      	strh	r1, [r0, #6]
}
 8005f7a:	4770      	bx	lr

08005f7c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8005f7c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop

08005f84 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8005f84:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop

08005f8c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8005f8c:	6081      	str	r1, [r0, #8]

  return;
}
 8005f8e:	4770      	bx	lr

08005f90 <PID_GetKPDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKpDivisorPOW2: Kp divisor expressed as power of 2
 */
__weak uint16_t PID_GetKPDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
 8005f90:	b100      	cbz	r0, 8005f94 <PID_GetKPDivisorPOW2+0x4>
 8005f92:	8b80      	ldrh	r0, [r0, #28]
}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop

08005f98 <PID_SetKPDivisorPOW2>:
 * @retval None
 */
__weak void PID_SetKPDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKpDivisorPOW2 )
{
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8005f98:	2301      	movs	r3, #1
 8005f9a:	408b      	lsls	r3, r1
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8005f9c:	8381      	strh	r1, [r0, #28]
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8005f9e:	8303      	strh	r3, [r0, #24]
}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop

08005fa4 <PID_GetKIDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKiDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKIDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
 8005fa4:	b100      	cbz	r0, 8005fa8 <PID_GetKIDivisorPOW2+0x4>
 8005fa6:	8bc0      	ldrh	r0, [r0, #30]
}
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop

08005fac <PID_SetLowerIntegralTermLimit>:
 * @param  wLowerLimit: new lower integral term limit value
 * @retval None
 */
__weak void PID_SetLowerIntegralTermLimit( PID_Handle_t * pHandle, int32_t wLowerLimit )
{
  pHandle->wLowerIntegralLimit = wLowerLimit;
 8005fac:	6101      	str	r1, [r0, #16]
}
 8005fae:	4770      	bx	lr

08005fb0 <PID_SetUpperIntegralTermLimit>:
 * @param  wUpperLimit: new upper integral term limit value
 * @retval None
 */
__weak void PID_SetUpperIntegralTermLimit( PID_Handle_t * pHandle, int32_t wUpperLimit )
{
  pHandle->wUpperIntegralLimit = wUpperLimit;
 8005fb0:	60c1      	str	r1, [r0, #12]
}
 8005fb2:	4770      	bx	lr

08005fb4 <PID_SetKIDivisorPOW2>:
{
 8005fb4:	b538      	push	{r3, r4, r5, lr}
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8005fb6:	2301      	movs	r3, #1
{
 8005fb8:	460c      	mov	r4, r1
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8005fba:	408b      	lsls	r3, r1
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8005fbc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005fc0:	40a1      	lsls	r1, r4
  pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8005fc2:	83c4      	strh	r4, [r0, #30]
  pHandle->hKiDivisor = ( uint16_t )( wKiDiv );
 8005fc4:	8343      	strh	r3, [r0, #26]
{
 8005fc6:	4605      	mov	r5, r0
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8005fc8:	f7ff fff2 	bl	8005fb0 <PID_SetUpperIntegralTermLimit>
  PID_SetLowerIntegralTermLimit( pHandle, ( int32_t ) - INT16_MAX * wKiDiv );
 8005fcc:	4902      	ldr	r1, [pc, #8]	; (8005fd8 <PID_SetKIDivisorPOW2+0x24>)
 8005fce:	4628      	mov	r0, r5
 8005fd0:	40a1      	lsls	r1, r4
 8005fd2:	f7ff ffeb 	bl	8005fac <PID_SetLowerIntegralTermLimit>
}
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	ffff8001 	.word	0xffff8001

08005fdc <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8005fdc:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8005fde:	4770      	bx	lr

08005fe0 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8005fe0:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop

08005fe8 <PID_GetKDDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKdDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKDDivisorPOW2(PID_Handle_t * pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
 8005fe8:	b100      	cbz	r0, 8005fec <PID_GetKDDivisorPOW2+0x4>
 8005fea:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop

08005ff0 <PID_SetKDDivisorPOW2>:
 * @param hKdDivisorPOW2
 */
__weak void PID_SetKDDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKdDivisorPOW2 )
{
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	408b      	lsls	r3, r1
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8005ff4:	84c1      	strh	r1, [r0, #38]	; 0x26
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8005ff6:	8483      	strh	r3, [r0, #36]	; 0x24
}
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop

08005ffc <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005ffc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8006000:	4603      	mov	r3, r0
 8006002:	b510      	push	{r4, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006004:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006008:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800600c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006010:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 8006014:	b17c      	cbz	r4, 8006036 <PI_Controller+0x3a>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006016:	fb04 f101 	mul.w	r1, r4, r1
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800601a:	689c      	ldr	r4, [r3, #8]

    if ( wIntegral_sum_temp < 0 )
 800601c:	eb14 0e01 	adds.w	lr, r4, r1
 8006020:	d41f      	bmi.n	8006062 <PI_Controller+0x66>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8006022:	2c00      	cmp	r4, #0
 8006024:	db29      	blt.n	800607a <PI_Controller+0x7e>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006026:	68d9      	ldr	r1, [r3, #12]
 8006028:	4571      	cmp	r1, lr
 800602a:	db05      	blt.n	8006038 <PI_Controller+0x3c>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800602c:	6919      	ldr	r1, [r3, #16]
 800602e:	4571      	cmp	r1, lr
 8006030:	dc02      	bgt.n	8006038 <PI_Controller+0x3c>
          wIntegral_sum_temp = INT32_MAX;
 8006032:	4671      	mov	r1, lr
 8006034:	e000      	b.n	8006038 <PI_Controller+0x3c>
 8006036:	4621      	mov	r1, r4
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8006038:	8b9c      	ldrh	r4, [r3, #28]
 800603a:	4122      	asrs	r2, r4
 800603c:	8bdc      	ldrh	r4, [r3, #30]
 800603e:	fa41 f404 	asr.w	r4, r1, r4
 8006042:	4422      	add	r2, r4
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006044:	4290      	cmp	r0, r2
 8006046:	da03      	bge.n	8006050 <PI_Controller+0x54>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8006048:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800604a:	4411      	add	r1, r2
 800604c:	6099      	str	r1, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 800604e:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8006050:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006052:	bfc5      	ittet	gt
 8006054:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 8006058:	1889      	addgt	r1, r1, r2
  return ( ( int16_t )( wOutput_32 ) );
 800605a:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 800605c:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 800605e:	6099      	str	r1, [r3, #8]
}
 8006060:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8006062:	2c00      	cmp	r4, #0
 8006064:	dddf      	ble.n	8006026 <PI_Controller+0x2a>
        if ( wIntegral_Term > 0 )
 8006066:	2900      	cmp	r1, #0
 8006068:	dddd      	ble.n	8006026 <PI_Controller+0x2a>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800606a:	68d9      	ldr	r1, [r3, #12]
 800606c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8006070:	42a1      	cmp	r1, r4
 8006072:	d1e1      	bne.n	8006038 <PI_Controller+0x3c>
          wIntegral_sum_temp = INT32_MAX;
 8006074:	468e      	mov	lr, r1
 8006076:	4671      	mov	r1, lr
 8006078:	e7de      	b.n	8006038 <PI_Controller+0x3c>
          wIntegral_sum_temp = -INT32_MAX;
 800607a:	4c03      	ldr	r4, [pc, #12]	; (8006088 <PI_Controller+0x8c>)
 800607c:	ea3e 0e21 	bics.w	lr, lr, r1, asr #32
 8006080:	bf28      	it	cs
 8006082:	46a6      	movcs	lr, r4
 8006084:	e7cf      	b.n	8006026 <PI_Controller+0x2a>
 8006086:	bf00      	nop
 8006088:	80000001 	.word	0x80000001

0800608c <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800608c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8006090:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006092:	8b11      	ldrh	r1, [r2, #24]
 8006094:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006096:	8993      	ldrh	r3, [r2, #12]
 8006098:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800609a:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 800609e:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80060a0:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80060a4:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80060a8:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80060ac:	f7ff f862 	bl	8005174 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 80060b0:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80060b2:	490f      	ldr	r1, [pc, #60]	; (80060f0 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80060b4:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 80060b8:	bfb8      	it	lt
 80060ba:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80060be:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 80060c2:	bfb8      	it	lt
 80060c4:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80060c6:	fb81 1000 	smull	r1, r0, r1, r0
 80060ca:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 80060ce:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 80060d0:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 80060d4:	4907      	ldr	r1, [pc, #28]	; (80060f4 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 80060d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80060da:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 80060dc:	fb81 2103 	smull	r2, r1, r1, r3
 80060e0:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80060e2:	4628      	mov	r0, r5
 80060e4:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 80060e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80060ec:	f7ff bec0 	b.w	8005e70 <MPM_CalcElMotorPower>
 80060f0:	1b4e81b5 	.word	0x1b4e81b5
 80060f4:	66666667 	.word	0x66666667

080060f8 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80060f8:	4b17      	ldr	r3, [pc, #92]	; (8006158 <startTimers+0x60>)
 80060fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#ifdef TIM2
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 80060fc:	07d2      	lsls	r2, r2, #31
 80060fe:	d415      	bmi.n	800612c <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8006100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800610a:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800610c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006110:	f002 0201 	and.w	r2, r2, #1
 8006114:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006116:	9a01      	ldr	r2, [sp, #4]
 8006118:	694a      	ldr	r2, [r1, #20]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8006120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006122:	f022 0201 	bic.w	r2, r2, #1
 8006126:	641a      	str	r2, [r3, #64]	; 0x40
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
#endif
}
 8006128:	b002      	add	sp, #8
 800612a:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800612c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006130:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006132:	6859      	ldr	r1, [r3, #4]
 8006134:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006138:	f041 0120 	orr.w	r1, r1, #32
 800613c:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800613e:	6959      	ldr	r1, [r3, #20]
 8006140:	f041 0101 	orr.w	r1, r1, #1
 8006144:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006146:	6859      	ldr	r1, [r3, #4]
 8006148:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800614c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40023800 	.word	0x40023800

0800615c <waitForPolarizationEnd>:
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800615c:	3201      	adds	r2, #1
{
 800615e:	b570      	push	{r4, r5, r6, lr}
  hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006160:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006162:	f06f 0602 	mvn.w	r6, #2
 8006166:	0155      	lsls	r5, r2, #5
 8006168:	6106      	str	r6, [r0, #16]

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 800616a:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 800616c:	f893 c000 	ldrb.w	ip, [r3]
 8006170:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006174:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006178:	d80c      	bhi.n	8006194 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800617a:	6904      	ldr	r4, [r0, #16]
 800617c:	07a4      	lsls	r4, r4, #30
 800617e:	d5f5      	bpl.n	800616c <waitForPolarizationEnd+0x10>
      hCalibrationPeriodCounter++;
 8006180:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006184:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006186:	6106      	str	r6, [r0, #16]
 8006188:	d8f0      	bhi.n	800616c <waitForPolarizationEnd+0x10>
      {
        if (*cnt < NB_CONVERSIONS)
 800618a:	781c      	ldrb	r4, [r3, #0]
 800618c:	2c0f      	cmp	r4, #15
 800618e:	d8ed      	bhi.n	800616c <waitForPolarizationEnd+0x10>
        {
          *SWerror = 1u;
 8006190:	2301      	movs	r3, #1
 8006192:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006194:	bd70      	pop	{r4, r5, r6, pc}
 8006196:	bf00      	nop

08006198 <R3_2_GetPhaseCurrents>:
  */
__weak void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t* pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006198:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 800619c:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800619e:	689c      	ldr	r4, [r3, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 80061a0:	6a22      	ldr	r2, [r4, #32]
 80061a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061a6:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = pHandle->_Super.Sector;
 80061a8:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 80061ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 80061b0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 80061b2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80061b4:	682b      	ldr	r3, [r5, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 80061b6:	6824      	ldr	r4, [r4, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 80061b8:	005b      	lsls	r3, r3, #1
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 80061ba:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 80061be:	b29b      	uxth	r3, r3
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 80061c0:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 80061c4:	2a05      	cmp	r2, #5
 80061c6:	f200 80a6 	bhi.w	8006316 <R3_2_GetPhaseCurrents+0x17e>
 80061ca:	e8df f002 	tbb	[pc, r2]
 80061ce:	1c36      	.short	0x1c36
 80061d0:	3603031c 	.word	0x3603031c
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80061d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80061d6:	1ad3      	subs	r3, r2, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 80061d8:	4a52      	ldr	r2, [pc, #328]	; (8006324 <R3_2_GetPhaseCurrents+0x18c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	db5a      	blt.n	8006294 <R3_2_GetPhaseCurrents+0xfc>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80061de:	6f42      	ldr	r2, [r0, #116]	; 0x74

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 80061e0:	4d50      	ldr	r5, [pc, #320]	; (8006324 <R3_2_GetPhaseCurrents+0x18c>)
      else  if ( wAux > INT16_MAX )
 80061e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80061e6:	eba2 0c0c 	sub.w	ip, r2, ip
        pStator_Currents->a = INT16_MAX;
 80061ea:	bfa8      	it	ge
 80061ec:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      if ( wAux < -INT16_MAX )
 80061f0:	45ac      	cmp	ip, r5
        pStator_Currents->a = ( int16_t )wAux;
 80061f2:	800b      	strh	r3, [r1, #0]
      if ( wAux < -INT16_MAX )
 80061f4:	da55      	bge.n	80062a2 <R3_2_GetPhaseCurrents+0x10a>

    default:
      break;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
 80061f6:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = -INT16_MAX;
 80061fa:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80061fc:	fa1f f38e 	uxth.w	r3, lr
 8006200:	f248 0201 	movw	r2, #32769	; 0x8001
 8006204:	e031      	b.n	800626a <R3_2_GetPhaseCurrents+0xd2>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006206:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8006208:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 800620a:	4b46      	ldr	r3, [pc, #280]	; (8006324 <R3_2_GetPhaseCurrents+0x18c>)
 800620c:	429c      	cmp	r4, r3
 800620e:	db3b      	blt.n	8006288 <R3_2_GetPhaseCurrents+0xf0>
      else  if ( wAux > INT16_MAX )
 8006210:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006214:	db6f      	blt.n	80062f6 <R3_2_GetPhaseCurrents+0x15e>
        pStator_Currents->a = INT16_MAX;
 8006216:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800621a:	4613      	mov	r3, r2
 800621c:	800a      	strh	r2, [r1, #0]
 800621e:	4614      	mov	r4, r2
 8006220:	4696      	mov	lr, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8006222:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006224:	ebac 0202 	sub.w	r2, ip, r2
 8006228:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 800622a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800622e:	db4d      	blt.n	80062cc <R3_2_GetPhaseCurrents+0x134>
        pStator_Currents->b = INT16_MAX;
 8006230:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006234:	804a      	strh	r2, [r1, #2]
 8006236:	4615      	mov	r5, r2
 8006238:	e017      	b.n	800626a <R3_2_GetPhaseCurrents+0xd2>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 800623a:	6f44      	ldr	r4, [r0, #116]	; 0x74
      if ( wAux < -INT16_MAX )
 800623c:	4a39      	ldr	r2, [pc, #228]	; (8006324 <R3_2_GetPhaseCurrents+0x18c>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 800623e:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 8006240:	4293      	cmp	r3, r2
 8006242:	db1b      	blt.n	800627c <R3_2_GetPhaseCurrents+0xe4>
      else  if ( wAux > INT16_MAX )
 8006244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006248:	db47      	blt.n	80062da <R3_2_GetPhaseCurrents+0x142>
        pStator_Currents->b = INT16_MAX;
 800624a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800624e:	461a      	mov	r2, r3
 8006250:	804b      	strh	r3, [r1, #2]
 8006252:	461d      	mov	r5, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8006254:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8006256:	ebac 0404 	sub.w	r4, ip, r4
 800625a:	1ae3      	subs	r3, r4, r3
      if ( wAux > INT16_MAX )
 800625c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006260:	db2c      	blt.n	80062bc <R3_2_GetPhaseCurrents+0x124>
        pStator_Currents->a = INT16_MAX;
 8006262:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006266:	800b      	strh	r3, [r1, #0]
 8006268:	469e      	mov	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800626a:	4413      	add	r3, r2
 800626c:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 800626e:	f8a0 e04c 	strh.w	lr, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = pStator_Currents->b;
 8006272:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006276:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800627a:	bd30      	pop	{r4, r5, pc}
        pStator_Currents->b = -INT16_MAX;
 800627c:	4613      	mov	r3, r2
 800627e:	804a      	strh	r2, [r1, #2]
 8006280:	461d      	mov	r5, r3
 8006282:	f248 0201 	movw	r2, #32769	; 0x8001
 8006286:	e7e5      	b.n	8006254 <R3_2_GetPhaseCurrents+0xbc>
        pStator_Currents->a = -INT16_MAX;
 8006288:	461c      	mov	r4, r3
 800628a:	800b      	strh	r3, [r1, #0]
 800628c:	46a6      	mov	lr, r4
 800628e:	f248 0301 	movw	r3, #32769	; 0x8001
 8006292:	e7c6      	b.n	8006222 <R3_2_GetPhaseCurrents+0x8a>
        pStator_Currents->a = -INT16_MAX;
 8006294:	800a      	strh	r2, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006296:	6f42      	ldr	r2, [r0, #116]	; 0x74
      if ( wAux < -INT16_MAX )
 8006298:	4d22      	ldr	r5, [pc, #136]	; (8006324 <R3_2_GetPhaseCurrents+0x18c>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800629a:	eba2 0c0c 	sub.w	ip, r2, ip
      if ( wAux < -INT16_MAX )
 800629e:	45ac      	cmp	ip, r5
 80062a0:	dba9      	blt.n	80061f6 <R3_2_GetPhaseCurrents+0x5e>
      else  if ( wAux > INT16_MAX )
 80062a2:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 80062a6:	db1c      	blt.n	80062e2 <R3_2_GetPhaseCurrents+0x14a>
        pStator_Currents->b = INT16_MAX;
 80062a8:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = pStator_Currents->a;
 80062ac:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = INT16_MAX;
 80062b0:	804b      	strh	r3, [r1, #2]
 80062b2:	461a      	mov	r2, r3
 80062b4:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062b6:	fa1f f38e 	uxth.w	r3, lr
 80062ba:	e7d6      	b.n	800626a <R3_2_GetPhaseCurrents+0xd2>
      else  if ( wAux < -INT16_MAX )
 80062bc:	4c19      	ldr	r4, [pc, #100]	; (8006324 <R3_2_GetPhaseCurrents+0x18c>)
 80062be:	42a3      	cmp	r3, r4
 80062c0:	da1f      	bge.n	8006302 <R3_2_GetPhaseCurrents+0x16a>
        pStator_Currents->a = -INT16_MAX;
 80062c2:	800c      	strh	r4, [r1, #0]
 80062c4:	f248 0301 	movw	r3, #32769	; 0x8001
 80062c8:	46a6      	mov	lr, r4
 80062ca:	e7ce      	b.n	800626a <R3_2_GetPhaseCurrents+0xd2>
      else  if ( wAux < -INT16_MAX )
 80062cc:	4d15      	ldr	r5, [pc, #84]	; (8006324 <R3_2_GetPhaseCurrents+0x18c>)
 80062ce:	42aa      	cmp	r2, r5
 80062d0:	da1d      	bge.n	800630e <R3_2_GetPhaseCurrents+0x176>
        pStator_Currents->b = -INT16_MAX;
 80062d2:	804d      	strh	r5, [r1, #2]
 80062d4:	f248 0201 	movw	r2, #32769	; 0x8001
 80062d8:	e7c7      	b.n	800626a <R3_2_GetPhaseCurrents+0xd2>
        pStator_Currents->b = ( int16_t )wAux;
 80062da:	b21d      	sxth	r5, r3
 80062dc:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062de:	b29a      	uxth	r2, r3
 80062e0:	e7b8      	b.n	8006254 <R3_2_GetPhaseCurrents+0xbc>
  pHandle->_Super.Ia = pStator_Currents->a;
 80062e2:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = ( int16_t )wAux;
 80062e6:	fa0f f58c 	sxth.w	r5, ip
 80062ea:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062ec:	fa1f f38e 	uxth.w	r3, lr
 80062f0:	fa1f f28c 	uxth.w	r2, ip
 80062f4:	e7b9      	b.n	800626a <R3_2_GetPhaseCurrents+0xd2>
        pStator_Currents->a = ( int16_t )wAux;
 80062f6:	fa0f fe84 	sxth.w	lr, r4
 80062fa:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062fe:	b2a3      	uxth	r3, r4
 8006300:	e78f      	b.n	8006222 <R3_2_GetPhaseCurrents+0x8a>
        pStator_Currents->a = ( int16_t )wAux;
 8006302:	fa0f fe83 	sxth.w	lr, r3
 8006306:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800630a:	b29b      	uxth	r3, r3
 800630c:	e7ad      	b.n	800626a <R3_2_GetPhaseCurrents+0xd2>
        pStator_Currents->b = ( int16_t )wAux;
 800630e:	b215      	sxth	r5, r2
 8006310:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006312:	b292      	uxth	r2, r2
 8006314:	e7a9      	b.n	800626a <R3_2_GetPhaseCurrents+0xd2>
  pHandle->_Super.Ia = pStator_Currents->a;
 8006316:	f9b1 e000 	ldrsh.w	lr, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 800631a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800631e:	880b      	ldrh	r3, [r1, #0]
 8006320:	884a      	ldrh	r2, [r1, #2]
 8006322:	e7a2      	b.n	800626a <R3_2_GetPhaseCurrents+0xd2>
 8006324:	ffff8001 	.word	0xffff8001

08006328 <R3_2_HFCurrentsCalibrationAB>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_2_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006328:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 800632c:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800632e:	689c      	ldr	r4, [r3, #8]
 8006330:	6a22      	ldr	r2, [r4, #32]
 8006332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006336:	6222      	str	r2, [r4, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006338:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
 800633c:	2a0f      	cmp	r2, #15
 800633e:	d813      	bhi.n	8006368 <R3_2_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8006340:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
 8006344:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8006346:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800634a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800634c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 800634e:	6824      	ldr	r4, [r4, #0]
 8006350:	4422      	add	r2, r4
 8006352:	6702      	str	r2, [r0, #112]	; 0x70
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006354:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 8006356:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800635a:	6f42      	ldr	r2, [r0, #116]	; 0x74
    pHandle->PolarizationCounter++;
 800635c:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800635e:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006360:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006362:	6742      	str	r2, [r0, #116]	; 0x74
    pHandle->PolarizationCounter++;
 8006364:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8006368:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800636a:	bc10      	pop	{r4}
  pStator_Currents->a = 0;
 800636c:	600b      	str	r3, [r1, #0]
}
 800636e:	4770      	bx	lr

08006370 <R3_2_HFCurrentsCalibrationC>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_2_HFCurrentsCalibrationC( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;  
 8006370:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
{
 8006374:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;  
 8006376:	6894      	ldr	r4, [r2, #8]
 8006378:	6a23      	ldr	r3, [r4, #32]
 800637a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800637e:	6223      	str	r3, [r4, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006380:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 8006384:	2b0f      	cmp	r3, #15
 8006386:	d80e      	bhi.n	80063a6 <R3_2_HFCurrentsCalibrationC+0x36>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006388:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
 800638c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800638e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006392:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 8006398:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800639c:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 800639e:	3301      	adds	r3, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80063a6:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80063a8:	bc10      	pop	{r4}
  pStator_Currents->a = 0;
 80063aa:	600b      	str	r3, [r1, #0]
}
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop

080063b0 <R3_2_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_2_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80063b0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = true;
 80063b4:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80063b8:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80063ba:	f880 c069 	strb.w	ip, [r0, #105]	; 0x69
  WRITE_REG(TIMx->CCR1, CompareValue);
 80063be:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80063c0:	f06f 0001 	mvn.w	r0, #1
 80063c4:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80063c6:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80063c8:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80063ca:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80063cc:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1(TIMx,0);
  LL_TIM_OC_SetCompareCH2(TIMx,0);
  LL_TIM_OC_SetCompareCH3(TIMx,0);

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == RESET)
 80063ce:	07db      	lsls	r3, r3, #31
 80063d0:	d5fc      	bpl.n	80063cc <R3_2_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80063d2:	f06f 0301 	mvn.w	r3, #1
 80063d6:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80063d8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80063da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063de:	6453      	str	r3, [r2, #68]	; 0x44
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 80063e0:	f891 3097 	ldrb.w	r3, [r1, #151]	; 0x97
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d000      	beq.n	80063ea <R3_2_TurnOnLowSides+0x3a>
 80063e8:	4770      	bx	lr
{
 80063ea:	b410      	push	{r4}
  {
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80063ec:	e9d1 2003 	ldrd	r2, r0, [r1, #12]
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80063f0:	e9d1 3405 	ldrd	r3, r4, [r1, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80063f4:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80063f6:	e9d1 4207 	ldrd	r4, r2, [r1, #28]
 80063fa:	6184      	str	r4, [r0, #24]
  }
  return;
}
 80063fc:	bc10      	pop	{r4}
 80063fe:	619a      	str	r2, [r3, #24]
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop

08006404 <R3_2_SwitchOnPWM>:
  * @retval none
  */
__weak void R3_2_SwitchOnPWM( PWMC_Handle_t * pHdl )
{  
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 8006404:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006408:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 800640c:	688b      	ldr	r3, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800640e:	f04f 0c00 	mov.w	ip, #0
{  
 8006412:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006414:	f880 c069 	strb.w	ip, [r0, #105]	; 0x69
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006418:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800641a:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800641c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 800641e:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006420:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006422:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006426:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006428:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800642a:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800642c:	07d2      	lsls	r2, r2, #31
 800642e:	d5fc      	bpl.n	800642a <R3_2_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006430:	f06f 0201 	mvn.w	r2, #1
 8006434:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800643c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800643e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006440:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006446:	f891 2097 	ldrb.w	r2, [r1, #151]	; 0x97
 800644a:	2a02      	cmp	r2, #2
 800644c:	d008      	beq.n	8006460 <R3_2_SwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800644e:	f06f 0201 	mvn.w	r2, #1
 8006452:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);

  return;
}
 800645a:	bc30      	pop	{r4, r5}
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006460:	6a18      	ldr	r0, [r3, #32]
 8006462:	f240 5255 	movw	r2, #1365	; 0x555
 8006466:	4382      	bics	r2, r0
 8006468:	d00c      	beq.n	8006484 <R3_2_SwitchOnPWM+0x80>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800646a:	e9d1 4006 	ldrd	r4, r0, [r1, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800646e:	68cd      	ldr	r5, [r1, #12]
 8006470:	6a0a      	ldr	r2, [r1, #32]
 8006472:	0424      	lsls	r4, r4, #16
 8006474:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006476:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800647a:	0400      	lsls	r0, r0, #16
 800647c:	0412      	lsls	r2, r2, #16
 800647e:	61a8      	str	r0, [r5, #24]
 8006480:	61a2      	str	r2, [r4, #24]
}
 8006482:	e7e4      	b.n	800644e <R3_2_SwitchOnPWM+0x4a>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006484:	e9d1 4003 	ldrd	r4, r0, [r1, #12]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006488:	e9d1 2505 	ldrd	r2, r5, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800648c:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800648e:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
 8006492:	6184      	str	r4, [r0, #24]
 8006494:	6191      	str	r1, [r2, #24]
}
 8006496:	e7da      	b.n	800644e <R3_2_SwitchOnPWM+0x4a>

08006498 <R3_2_SwitchOffPWM>:
  * @retval none
  */
__weak void R3_2_SwitchOffPWM( PWMC_Handle_t * pHdl )
{ 
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 8006498:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800649c:	689a      	ldr	r2, [r3, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800649e:	68d1      	ldr	r1, [r2, #12]
 80064a0:	f021 0101 	bic.w	r1, r1, #1
 80064a4:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80064a6:	6c51      	ldr	r1, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 80064a8:	f04f 0c00 	mov.w	ip, #0
 80064ac:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80064b0:	f880 c069 	strb.w	ip, [r0, #105]	; 0x69
 80064b4:	6451      	str	r1, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 80064b6:	f893 1097 	ldrb.w	r1, [r3, #151]	; 0x97
 80064ba:	2902      	cmp	r1, #2
 80064bc:	d009      	beq.n	80064d2 <R3_2_SwitchOffPWM+0x3a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064be:	f06f 0301 	mvn.w	r3, #1
 80064c2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80064c4:	6913      	ldr	r3, [r2, #16]
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
  }
  
  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80064c6:	07db      	lsls	r3, r3, #31
 80064c8:	d5fc      	bpl.n	80064c4 <R3_2_SwitchOffPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064ca:	f06f 0301 	mvn.w	r3, #1
 80064ce:	6113      	str	r3, [r2, #16]
 80064d0:	4770      	bx	lr
{ 
 80064d2:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80064d4:	e9d3 4006 	ldrd	r4, r0, [r3, #24]
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80064d8:	68dd      	ldr	r5, [r3, #12]
 80064da:	6a19      	ldr	r1, [r3, #32]
 80064dc:	0424      	lsls	r4, r4, #16
 80064de:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80064e0:	e9d3 5404 	ldrd	r5, r4, [r3, #16]
 80064e4:	0400      	lsls	r0, r0, #16
 80064e6:	0409      	lsls	r1, r1, #16
 80064e8:	f06f 0301 	mvn.w	r3, #1
 80064ec:	61a8      	str	r0, [r5, #24]
 80064ee:	61a1      	str	r1, [r4, #24]
 80064f0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80064f2:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80064f4:	07d9      	lsls	r1, r3, #31
 80064f6:	d5fc      	bpl.n	80064f2 <R3_2_SwitchOffPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064f8:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 80064fc:	bc30      	pop	{r4, r5}
 80064fe:	6113      	str	r3, [r2, #16]
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <R3_2_SetADCSampPointCalibration>:
 *         And call the WriteTIMRegisters method.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
__weak uint16_t R3_2_SetADCSampPointCalibration( PWMC_Handle_t * pHdl)
{
 8006504:	b410      	push	{r4}
 8006506:	4603      	mov	r3, r0
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;

  /* Set rising edge trigger (default) */
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006508:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  pHandle->_Super.Sector = pHandle->CalibSector;
 800650c:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006510:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  pHandle->_Super.Sector = pHandle->CalibSector;
 8006514:	f883 4068 	strb.w	r4, [r3, #104]	; 0x68

  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 8006518:	f8b3 1084 	ldrh.w	r1, [r3, #132]	; 0x84
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800651c:	6892      	ldr	r2, [r2, #8]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800651e:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006520:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 8006524:	3901      	subs	r1, #1
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8006526:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006528:	6354      	str	r4, [r2, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 800652a:	b289      	uxth	r1, r1
  WRITE_REG(TIMx->CCR2, CompareValue);
 800652c:	6390      	str	r0, [r2, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 800652e:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e
  if ( pHandle->_Super.SWerror == 1u )
 8006530:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006534:	63d4      	str	r4, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006536:	6411      	str	r1, [r2, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006538:	6a12      	ldr	r2, [r2, #32]
}
 800653a:	bc10      	pop	{r4}
  if ( pHandle->_Super.SWerror == 1u )
 800653c:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 800653e:	bf0a      	itet	eq
 8006540:	2200      	moveq	r2, #0
    hAux = MC_FOC_DURATION;
 8006542:	f3c2 3000 	ubfxne	r0, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8006546:	f8a3 2040 	strheq.w	r2, [r3, #64]	; 0x40
}
 800654a:	4770      	bx	lr

0800654c <R3_2_RLGetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800654c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
{
 8006550:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006552:	6894      	ldr	r4, [r2, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006554:	6a23      	ldr	r3, [r4, #32]
 8006556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800655a:	6223      	str	r3, [r4, #32]
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800655c:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
 8006560:	6f43      	ldr	r3, [r0, #116]	; 0x74

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8006562:	480d      	ldr	r0, [pc, #52]	; (8006598 <R3_2_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8006564:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006568:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if ( wAux > -INT16_MAX )
 8006570:	4283      	cmp	r3, r0
 8006572:	db05      	blt.n	8006580 <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 8006574:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006578:	4293      	cmp	r3, r2
 800657a:	dc0a      	bgt.n	8006592 <R3_2_RLGetPhaseCurrents+0x46>
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 800657c:	b21b      	sxth	r3, r3
 800657e:	e000      	b.n	8006582 <R3_2_RLGetPhaseCurrents+0x36>
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <R3_2_RLGetPhaseCurrents+0x50>)
  pStator_Currents->b = (int16_t)wAux;
}
 8006582:	bc10      	pop	{r4}
  pStator_Currents->a = (int16_t)wAux;
 8006584:	2200      	movs	r2, #0
 8006586:	f363 020f 	bfi	r2, r3, #0, #16
 800658a:	f363 421f 	bfi	r2, r3, #16, #16
 800658e:	600a      	str	r2, [r1, #0]
}
 8006590:	4770      	bx	lr
 8006592:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006596:	e7f4      	b.n	8006582 <R3_2_RLGetPhaseCurrents+0x36>
 8006598:	ffff8002 	.word	0xffff8002
 800659c:	ffff8001 	.word	0xffff8001

080065a0 <R3_2_RLTurnOnLowSides>:
  * @retval none
  */
static void R3_2_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80065a0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80065a4:	688a      	ldr	r2, [r1, #8]
{
 80065a6:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065a8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065ac:	2400      	movs	r4, #0
 80065ae:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065b0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80065b2:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80065b4:	07db      	lsls	r3, r3, #31
 80065b6:	d5fc      	bpl.n	80065b2 <R3_2_RLTurnOnLowSides+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065b8:	f06f 0301 	mvn.w	r3, #1
 80065bc:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80065be:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80065c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c4:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80065c6:	f891 3097 	ldrb.w	r3, [r1, #151]	; 0x97
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d10a      	bne.n	80065e4 <R3_2_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80065ce:	68c8      	ldr	r0, [r1, #12]
 80065d0:	698c      	ldr	r4, [r1, #24]
 80065d2:	e9d1 2307 	ldrd	r2, r3, [r1, #28]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80065d6:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80065d8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80065dc:	0412      	lsls	r2, r2, #16
 80065de:	041b      	lsls	r3, r3, #16
 80065e0:	6182      	str	r2, [r0, #24]
 80065e2:	618b      	str	r3, [r1, #24]
  }
  return;
}
 80065e4:	bc10      	pop	{r4}
 80065e6:	4770      	bx	lr

080065e8 <R3_2_RLSwitchOnPWM>:
  * @retval none
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80065e8:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80065ec:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065ee:	f06f 0201 	mvn.w	r2, #1
{
 80065f2:	b430      	push	{r4, r5}
 80065f4:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80065f6:	691a      	ldr	r2, [r3, #16]


  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80065f8:	07d4      	lsls	r4, r2, #31
 80065fa:	d5fc      	bpl.n	80065f6 <R3_2_RLSwitchOnPWM+0xe>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 80065fc:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006600:	f06f 0401 	mvn.w	r4, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006604:	2001      	movs	r0, #1
 8006606:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006608:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800660a:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800660c:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800660e:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006610:	07d2      	lsls	r2, r2, #31
 8006612:	d5fc      	bpl.n	800660e <R3_2_RLSwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006614:	f06f 0201 	mvn.w	r2, #1
 8006618:	611a      	str	r2, [r3, #16]
  LL_TIM_ClearFlag_UPDATE( TIMx );
  

  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800661a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800661c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006628:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800662a:	f891 2097 	ldrb.w	r2, [r1, #151]	; 0x97
 800662e:	2a02      	cmp	r2, #2
 8006630:	d008      	beq.n	8006644 <R3_2_RLSwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006632:	f06f 0201 	mvn.w	r2, #1
 8006636:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return;
}
 800663e:	bc30      	pop	{r4, r5}
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006644:	6a18      	ldr	r0, [r3, #32]
 8006646:	f240 5255 	movw	r2, #1365	; 0x555
 800664a:	4210      	tst	r0, r2
 800664c:	d00a      	beq.n	8006664 <R3_2_RLSwitchOnPWM+0x7c>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800664e:	68c8      	ldr	r0, [r1, #12]
 8006650:	698c      	ldr	r4, [r1, #24]
 8006652:	6a0a      	ldr	r2, [r1, #32]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006654:	6184      	str	r4, [r0, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006656:	6908      	ldr	r0, [r1, #16]
 8006658:	69cc      	ldr	r4, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800665a:	6949      	ldr	r1, [r1, #20]
 800665c:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800665e:	0412      	lsls	r2, r2, #16
 8006660:	618a      	str	r2, [r1, #24]
}
 8006662:	e7e6      	b.n	8006632 <R3_2_RLSwitchOnPWM+0x4a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006664:	e9d1 4006 	ldrd	r4, r0, [r1, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006668:	68cd      	ldr	r5, [r1, #12]
 800666a:	6a0a      	ldr	r2, [r1, #32]
 800666c:	0424      	lsls	r4, r4, #16
 800666e:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006670:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 8006674:	0400      	lsls	r0, r0, #16
 8006676:	0412      	lsls	r2, r2, #16
 8006678:	61a8      	str	r0, [r5, #24]
 800667a:	61a2      	str	r2, [r4, #24]
}
 800667c:	e7d9      	b.n	8006632 <R3_2_RLSwitchOnPWM+0x4a>
 800667e:	bf00      	nop

08006680 <R3_2_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006680:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8006684:	688b      	ldr	r3, [r1, #8]
{
 8006686:	b430      	push	{r4, r5}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006688:	681d      	ldr	r5, [r3, #0]
 800668a:	f025 0501 	bic.w	r5, r5, #1
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800668e:	e9d1 2400 	ldrd	r2, r4, [r1]
 8006692:	601d      	str	r5, [r3, #0]
  if ( (pHandle->pParams_str->EmergencyStop) != DISABLE )
 8006694:	f891 5098 	ldrb.w	r5, [r1, #152]	; 0x98
 8006698:	b135      	cbz	r5, 80066a8 <R3_2_Init+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800669a:	f06f 0580 	mvn.w	r5, #128	; 0x80
 800669e:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80066a0:	68dd      	ldr	r5, [r3, #12]
 80066a2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80066a6:	60dd      	str	r5, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80066a8:	695d      	ldr	r5, [r3, #20]
 80066aa:	f045 0501 	orr.w	r5, r5, #1
 80066ae:	615d      	str	r5, [r3, #20]
  if ( pHandle->pParams_str->bFreqRatio == 2u )
 80066b0:	f891 5094 	ldrb.w	r5, [r1, #148]	; 0x94
 80066b4:	2d02      	cmp	r5, #2
 80066b6:	d038      	beq.n	800672a <R3_2_Init+0xaa>
    if ( pHandle->_Super.Motor == M1 )
 80066b8:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
 80066bc:	2900      	cmp	r1, #0
 80066be:	d038      	beq.n	8006732 <R3_2_Init+0xb2>
  SET_BIT(TIMx->CCER, Channels);
 80066c0:	6a19      	ldr	r1, [r3, #32]
 80066c2:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 80066c6:	f041 0105 	orr.w	r1, r1, #5
 80066ca:	6219      	str	r1, [r3, #32]
  if ( TIMx == TIM1 )
 80066cc:	4924      	ldr	r1, [pc, #144]	; (8006760 <R3_2_Init+0xe0>)
 80066ce:	428b      	cmp	r3, r1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80066d0:	4924      	ldr	r1, [pc, #144]	; (8006764 <R3_2_Init+0xe4>)
 80066d2:	68cb      	ldr	r3, [r1, #12]
 80066d4:	d032      	beq.n	800673c <R3_2_Init+0xbc>
 80066d6:	f043 0302 	orr.w	r3, r3, #2
 80066da:	60cb      	str	r3, [r1, #12]
    pHandle->ADC_ExternalTriggerInjected = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 80066dc:	f44f 13f0 	mov.w	r3, #1966080	; 0x1e0000
 80066e0:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80066e2:	6893      	ldr	r3, [r2, #8]
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	6093      	str	r3, [r2, #8]
 80066ea:	68a3      	ldr	r3, [r4, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80066ec:	f06f 0104 	mvn.w	r1, #4
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	60a3      	str	r3, [r4, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80066f6:	6011      	str	r1, [r2, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80066f8:	6853      	ldr	r3, [r2, #4]
 80066fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fe:	6053      	str	r3, [r2, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006700:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006702:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006706:	62d3      	str	r3, [r2, #44]	; 0x2c
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8006708:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800670a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800670e:	6393      	str	r3, [r2, #56]	; 0x38
 8006710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006712:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  pHandle->_Super.DTTest = 0u;
 8006716:	2200      	movs	r2, #0
 8006718:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800671c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800671e:	bc30      	pop	{r4, r5}
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006720:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  pHandle->_Super.DTTest = 0u;
 8006724:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
}
 8006728:	4770      	bx	lr
    if ( pHandle->pParams_str->bIsHigherFreqTim == HIGHER_FREQ )
 800672a:	f891 5095 	ldrb.w	r5, [r1, #149]	; 0x95
 800672e:	2d01      	cmp	r5, #1
 8006730:	d00b      	beq.n	800674a <R3_2_Init+0xca>
      LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8006732:	f8b0 1084 	ldrh.w	r1, [r0, #132]	; 0x84
 8006736:	3901      	subs	r1, #1
  WRITE_REG(TIMx->CNT, Counter);
 8006738:	6259      	str	r1, [r3, #36]	; 0x24
}
 800673a:	e7c1      	b.n	80066c0 <R3_2_Init+0x40>
 800673c:	f043 0301 	orr.w	r3, r3, #1
 8006740:	60cb      	str	r3, [r1, #12]
    pHandle->ADC_ExternalTriggerInjected = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8006742:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006746:	67c3      	str	r3, [r0, #124]	; 0x7c
 8006748:	e7cb      	b.n	80066e2 <R3_2_Init+0x62>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800674a:	f891 1096 	ldrb.w	r1, [r1, #150]	; 0x96
 800674e:	2903      	cmp	r1, #3
 8006750:	d1ef      	bne.n	8006732 <R3_2_Init+0xb2>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006752:	631d      	str	r5, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006754:	695d      	ldr	r5, [r3, #20]
 8006756:	f045 0501 	orr.w	r5, r5, #1
 800675a:	615d      	str	r5, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800675c:	6319      	str	r1, [r3, #48]	; 0x30
}
 800675e:	e7e8      	b.n	8006732 <R3_2_Init+0xb2>
 8006760:	40010000 	.word	0x40010000
 8006764:	e0042000 	.word	0xe0042000

08006768 <R3_2_CurrentReadingCalibration>:
{
 8006768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800676c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8006770:	6843      	ldr	r3, [r0, #4]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006772:	6895      	ldr	r5, [r2, #8]
{
 8006774:	b083      	sub	sp, #12
  pHandle->PhaseAOffset = 0u;
 8006776:	2600      	movs	r6, #0
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8006778:	9300      	str	r3, [sp, #0]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800677a:	6983      	ldr	r3, [r0, #24]
 800677c:	9301      	str	r3, [sp, #4]
  pHandle->PolarizationCounter = 0u;
 800677e:	f880 6087 	strb.w	r6, [r0, #135]	; 0x87
  CLEAR_BIT(TIMx->CCER, Channels);
 8006782:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8006784:	6706      	str	r6, [r0, #112]	; 0x70
 8006786:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800678a:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 800678e:	e9c0 661d 	strd	r6, r6, [r0, #116]	; 0x74
 8006792:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsCalibrationAB;
 8006794:	4b33      	ldr	r3, [pc, #204]	; (8006864 <R3_2_CurrentReadingCalibration+0xfc>)
 8006796:	6043      	str	r3, [r0, #4]
{
 8006798:	4604      	mov	r4, r0
  pHandle->CalibSector = SECTOR_4;
 800679a:	2703      	movs	r7, #3
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointCalibration;
 800679c:	4b32      	ldr	r3, [pc, #200]	; (8006868 <R3_2_CurrentReadingCalibration+0x100>)
 800679e:	6183      	str	r3, [r0, #24]
  pHandle->CalibSector = SECTOR_4;
 80067a0:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
  pHandle->_Super.Sector = SECTOR_4;   
 80067a4:	f880 7068 	strb.w	r7, [r0, #104]	; 0x68
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80067a8:	f7ff fe2c 	bl	8006404 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80067ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80067b0:	f104 0840 	add.w	r8, r4, #64	; 0x40
 80067b4:	f104 0987 	add.w	r9, r4, #135	; 0x87
 80067b8:	f893 2096 	ldrb.w	r2, [r3, #150]	; 0x96
 80067bc:	4641      	mov	r1, r8
 80067be:	464b      	mov	r3, r9
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7ff fccb 	bl	800615c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80067c6:	4620      	mov	r0, r4
 80067c8:	f7ff fe66 	bl	8006498 <R3_2_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsCalibrationC;
 80067cc:	4b27      	ldr	r3, [pc, #156]	; (800686c <R3_2_CurrentReadingCalibration+0x104>)
 80067ce:	6063      	str	r3, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80067d0:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 80067d2:	f884 6087 	strb.w	r6, [r4, #135]	; 0x87
  pHandle->CalibSector = SECTOR_1;
 80067d6:	f884 6086 	strb.w	r6, [r4, #134]	; 0x86
  pHandle->_Super.Sector = SECTOR_1;   
 80067da:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80067de:	f7ff fe11 	bl	8006404 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80067e2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80067e6:	464b      	mov	r3, r9
 80067e8:	f892 2096 	ldrb.w	r2, [r2, #150]	; 0x96
 80067ec:	4641      	mov	r1, r8
 80067ee:	4628      	mov	r0, r5
 80067f0:	f7ff fcb4 	bl	800615c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7ff fe4f 	bl	8006498 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80067fa:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
  pHandle->PhaseAOffset >>= 3;
 80067fe:	40fa      	lsrs	r2, r7
  pHandle->PhaseBOffset >>= 3;
 8006800:	40fb      	lsrs	r3, r7
 8006802:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  pHandle->PhaseCOffset >>= 3;
 8006806:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8006808:	9a00      	ldr	r2, [sp, #0]
 800680a:	6062      	str	r2, [r4, #4]
  pHandle->PhaseCOffset >>= 3;
 800680c:	40fb      	lsrs	r3, r7
 800680e:	67a3      	str	r3, [r4, #120]	; 0x78
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8006810:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006812:	69ab      	ldr	r3, [r5, #24]
 8006814:	61a2      	str	r2, [r4, #24]
 8006816:	f023 0308 	bic.w	r3, r3, #8
 800681a:	61ab      	str	r3, [r5, #24]
 800681c:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1(TIMx,pHandle->Half_PWMPeriod);
 800681e:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8006822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006826:	61aa      	str	r2, [r5, #24]
 8006828:	69ea      	ldr	r2, [r5, #28]
 800682a:	f022 0208 	bic.w	r2, r2, #8
 800682e:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006830:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006832:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006834:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006836:	69ab      	ldr	r3, [r5, #24]
 8006838:	f043 0308 	orr.w	r3, r3, #8
 800683c:	61ab      	str	r3, [r5, #24]
 800683e:	69ab      	ldr	r3, [r5, #24]
 8006840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006844:	61ab      	str	r3, [r5, #24]
 8006846:	69eb      	ldr	r3, [r5, #28]
 8006848:	f043 0308 	orr.w	r3, r3, #8
 800684c:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_4;
 800684e:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
  SET_BIT(TIMx->CCER, Channels);
 8006852:	6a2b      	ldr	r3, [r5, #32]
 8006854:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8006858:	f043 0305 	orr.w	r3, r3, #5
 800685c:	622b      	str	r3, [r5, #32]
}
 800685e:	b003      	add	sp, #12
 8006860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006864:	08006329 	.word	0x08006329
 8006868:	08006505 	.word	0x08006505
 800686c:	08006371 	.word	0x08006371

08006870 <R3_2_SetADCSampPointSectX>:
{
 8006870:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8006872:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006876:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 800687a:	f8b0 e084 	ldrh.w	lr, [r0, #132]	; 0x84
 800687e:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
{
 8006882:	4603      	mov	r3, r0
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006884:	ebae 0002 	sub.w	r0, lr, r2
 8006888:	b280      	uxth	r0, r0
 800688a:	4288      	cmp	r0, r1
 800688c:	d918      	bls.n	80068c0 <R3_2_SetADCSampPointSectX+0x50>
    pHandle->_Super.Sector = SECTOR_4;
 800688e:	2103      	movs	r1, #3
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006890:	f10e 32ff 	add.w	r2, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_4;
 8006894:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006898:	b292      	uxth	r2, r2
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800689a:	68a1      	ldr	r1, [r4, #8]
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 800689c:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800689e:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
  WRITE_REG(TIMx->CCR1, CompareValue);
 80068a0:	634c      	str	r4, [r1, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80068a2:	6388      	str	r0, [r1, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 80068a4:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e
  if ( pHandle->_Super.SWerror == 1u )
 80068a6:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 80068aa:	63cc      	str	r4, [r1, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80068ac:	640a      	str	r2, [r1, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80068ae:	6a0a      	ldr	r2, [r1, #32]
 80068b0:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 80068b2:	bf0a      	itet	eq
 80068b4:	2200      	moveq	r2, #0
    hAux = MC_FOC_DURATION;
 80068b6:	f3c2 3000 	ubfxne	r0, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 80068ba:	f8a3 2040 	strheq.w	r2, [r3, #64]	; 0x40
}
 80068be:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80068c0:	f8b3 c044 	ldrh.w	ip, [r3, #68]	; 0x44
 80068c4:	eba2 0c0c 	sub.w	ip, r2, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80068c8:	fa1f fc8c 	uxth.w	ip, ip
 80068cc:	ebbc 0f40 	cmp.w	ip, r0, lsl #1
 80068d0:	d904      	bls.n	80068dc <R3_2_SetADCSampPointSectX+0x6c>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80068d2:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
 80068d6:	1a52      	subs	r2, r2, r1
 80068d8:	b292      	uxth	r2, r2
 80068da:	e7de      	b.n	800689a <R3_2_SetADCSampPointSectX+0x2a>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80068dc:	4411      	add	r1, r2
 80068de:	b28a      	uxth	r2, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80068e0:	4596      	cmp	lr, r2
 80068e2:	d8da      	bhi.n	800689a <R3_2_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80068e4:	43d2      	mvns	r2, r2
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80068e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80068ea:	eb02 024e 	add.w	r2, r2, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80068ee:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80068f2:	b292      	uxth	r2, r2
 80068f4:	e7d1      	b.n	800689a <R3_2_SetADCSampPointSectX+0x2a>
 80068f6:	bf00      	nop

080068f8 <R3_2_TIMx_UP_IRQHandler>:
{
 80068f8:	4601      	mov	r1, r0
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80068fa:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
{
 80068fe:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8006900:	e890 0038 	ldmia.w	r0, {r3, r4, r5}
  ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	f002 020c 	and.w	r2, r2, #12
  if ( ADCInjFlags == LL_ADC_FLAG_JSTRT )
 800690a:	2a08      	cmp	r2, #8
 800690c:	d03d      	beq.n	800698a <R3_2_TIMx_UP_IRQHandler+0x92>
  else if ( ADCInjFlags == 0 )
 800690e:	b94a      	cbnz	r2, 8006924 <R3_2_TIMx_UP_IRQHandler+0x2c>
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8006910:	f8b0 c084 	ldrh.w	ip, [r0, #132]	; 0x84
 8006914:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006916:	4562      	cmp	r2, ip
 8006918:	d3fc      	bcc.n	8006914 <R3_2_TIMx_UP_IRQHandler+0x1c>
    ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f002 020c 	and.w	r2, r2, #12
    if ( ADCInjFlags == LL_ADC_FLAG_JSTRT )
 8006920:	2a08      	cmp	r2, #8
 8006922:	d03d      	beq.n	80069a0 <R3_2_TIMx_UP_IRQHandler+0xa8>
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800692a:	609a      	str	r2, [r3, #8]
 800692c:	68a2      	ldr	r2, [r4, #8]
 800692e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006932:	60a2      	str	r2, [r4, #8]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector];
 8006934:	f891 2068 	ldrb.w	r2, [r1, #104]	; 0x68
 8006938:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 800693c:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 800693e:	f402 2c70 	and.w	ip, r2, #983040	; 0xf0000
 8006942:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006944:	639a      	str	r2, [r3, #56]	; 0x38
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector];
 8006946:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006948:	63a2      	str	r2, [r4, #56]	; 0x38
 800694a:	6898      	ldr	r0, [r3, #8]
 800694c:	f420 2070 	bic.w	r0, r0, #983040	; 0xf0000
 8006950:	ea40 000c 	orr.w	r0, r0, ip
 8006954:	6098      	str	r0, [r3, #8]
 8006956:	68a2      	ldr	r2, [r4, #8]
 8006958:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800695c:	ea42 020c 	orr.w	r2, r2, ip
 8006960:	60a2      	str	r2, [r4, #8]
  SET_BIT(TIMx->CCER, Channels);
 8006962:	6a2a      	ldr	r2, [r5, #32]
 8006964:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006968:	622a      	str	r2, [r5, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800696a:	6898      	ldr	r0, [r3, #8]
  LL_ADC_INJ_StartConversionExtTrig(ADCx_1, pHandle->ADCTriggerEdge);
 800696c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8006970:	4310      	orrs	r0, r2
 8006972:	6098      	str	r0, [r3, #8]
 8006974:	68a0      	ldr	r0, [r4, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006976:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800697a:	4302      	orrs	r2, r0
 800697c:	60a2      	str	r2, [r4, #8]
}
 800697e:	f101 0066 	add.w	r0, r1, #102	; 0x66
 8006982:	bc30      	pop	{r4, r5}
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006984:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006988:	4770      	bx	lr
      ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f002 020c 	and.w	r2, r2, #12
    while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 8006990:	2a0c      	cmp	r2, #12
 8006992:	d0c7      	beq.n	8006924 <R3_2_TIMx_UP_IRQHandler+0x2c>
      ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	f002 020c 	and.w	r2, r2, #12
    while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 800699a:	2a0c      	cmp	r2, #12
 800699c:	d1f5      	bne.n	800698a <R3_2_TIMx_UP_IRQHandler+0x92>
 800699e:	e7c1      	b.n	8006924 <R3_2_TIMx_UP_IRQHandler+0x2c>
        ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	f002 020c 	and.w	r2, r2, #12
      while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 80069a6:	2a0c      	cmp	r2, #12
 80069a8:	d0bc      	beq.n	8006924 <R3_2_TIMx_UP_IRQHandler+0x2c>
        ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	f002 020c 	and.w	r2, r2, #12
      while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 80069b0:	2a0c      	cmp	r2, #12
 80069b2:	d1f5      	bne.n	80069a0 <R3_2_TIMx_UP_IRQHandler+0xa8>
 80069b4:	e7b6      	b.n	8006924 <R3_2_TIMx_UP_IRQHandler+0x2c>
 80069b6:	bf00      	nop

080069b8 <R3_2_BRK_IRQHandler>:
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80069b8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80069bc:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 80069c0:	2a02      	cmp	r2, #2
 80069c2:	d004      	beq.n	80069ce <R3_2_BRK_IRQHandler+0x16>
  pHandle->OverCurrentFlag = true;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
}
 80069ca:	3066      	adds	r0, #102	; 0x66
 80069cc:	4770      	bx	lr
{
 80069ce:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80069d0:	e9d3 4106 	ldrd	r4, r1, [r3, #24]
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80069d4:	68dd      	ldr	r5, [r3, #12]
 80069d6:	6a1a      	ldr	r2, [r3, #32]
 80069d8:	0424      	lsls	r4, r4, #16
 80069da:	61ac      	str	r4, [r5, #24]
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80069dc:	e9d3 5404 	ldrd	r5, r4, [r3, #16]
 80069e0:	0409      	lsls	r1, r1, #16
 80069e2:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 80069e4:	2301      	movs	r3, #1
 80069e6:	61a9      	str	r1, [r5, #24]
}
 80069e8:	3066      	adds	r0, #102	; 0x66
 80069ea:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 80069ec:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 80069f0:	bc30      	pop	{r4, r5}
 80069f2:	4770      	bx	lr

080069f4 <R3_2_IsOverCurrentOccurred>:
{
 80069f4:	4603      	mov	r3, r0
  if (pHandle->OverCurrentFlag == true )
 80069f6:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
 80069fa:	b118      	cbz	r0, 8006a04 <R3_2_IsOverCurrentOccurred+0x10>
    pHandle->OverCurrentFlag = false;
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    retVal = MC_BREAK_IN;
 8006a02:	2040      	movs	r0, #64	; 0x40
}
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop

08006a08 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8006a08:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
{
 8006a0c:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 8006a0e:	2900      	cmp	r1, #0
 8006a10:	d135      	bne.n	8006a7e <R3_2_RLDetectionModeEnable+0x76>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006a12:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
 8006a16:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006a1e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006a22:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a2c:	6a1a      	ldr	r2, [r3, #32]
 8006a2e:	f022 0204 	bic.w	r2, r2, #4
 8006a32:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006a34:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8006a36:	f895 2097 	ldrb.w	r2, [r5, #151]	; 0x97
 8006a3a:	2a01      	cmp	r2, #1
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006a3c:	f103 0418 	add.w	r4, r3, #24
 8006a40:	d02a      	beq.n	8006a98 <R3_2_RLDetectionModeEnable+0x90>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006a42:	2a02      	cmp	r2, #2
 8006a44:	d10d      	bne.n	8006a62 <R3_2_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a46:	699a      	ldr	r2, [r3, #24]
 8006a48:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a50:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	f042 0210 	orr.w	r2, r2, #16
 8006a58:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a5a:	6a1a      	ldr	r2, [r3, #32]
 8006a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a60:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a62:	6862      	ldr	r2, [r4, #4]
 8006a64:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006a68:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8006a6c:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a6e:	6a1a      	ldr	r2, [r3, #32]
 8006a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a74:	621a      	str	r2, [r3, #32]
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a7c:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <R3_2_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8006a80:	490e      	ldr	r1, [pc, #56]	; (8006abc <R3_2_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8006a82:	4a0f      	ldr	r2, [pc, #60]	; (8006ac0 <R3_2_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8006a84:	4c0f      	ldr	r4, [pc, #60]	; (8006ac4 <R3_2_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8006a86:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8006a88:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8006a8a:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8006a8c:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006a90:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8006a92:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8006a96:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006a9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aa2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006aa4:	6a1a      	ldr	r2, [r3, #32]
 8006aa6:	f022 0210 	bic.w	r2, r2, #16
 8006aaa:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006aac:	6a1a      	ldr	r2, [r3, #32]
 8006aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab2:	621a      	str	r2, [r3, #32]
}
 8006ab4:	e7d5      	b.n	8006a62 <R3_2_RLDetectionModeEnable+0x5a>
 8006ab6:	bf00      	nop
 8006ab8:	080065a1 	.word	0x080065a1
 8006abc:	080065e9 	.word	0x080065e9
 8006ac0:	08006499 	.word	0x08006499
 8006ac4:	0800654d 	.word	0x0800654d

08006ac8 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8006ac8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d03a      	beq.n	8006b46 <R3_2_RLDetectionModeDisable+0x7e>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ad0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8006ad4:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006ad6:	699a      	ldr	r2, [r3, #24]
 8006ad8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006adc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
{
 8006ae0:	b410      	push	{r4}
 8006ae2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8006aec:	f891 2097 	ldrb.w	r2, [r1, #151]	; 0x97
 8006af0:	2a01      	cmp	r2, #1
 8006af2:	d029      	beq.n	8006b48 <R3_2_RLDetectionModeDisable+0x80>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006af4:	2a02      	cmp	r2, #2
 8006af6:	d04d      	beq.n	8006b94 <R3_2_RLDetectionModeDisable+0xcc>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8006af8:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8006afc:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006afe:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b00:	6999      	ldr	r1, [r3, #24]
 8006b02:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8006b06:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8006b0a:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b0c:	6a19      	ldr	r1, [r3, #32]
 8006b0e:	f041 0110 	orr.w	r1, r1, #16
 8006b12:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b16:	69d9      	ldr	r1, [r3, #28]
 8006b18:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8006b1c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8006b20:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006b22:	6a19      	ldr	r1, [r3, #32]
 8006b24:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b28:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8006b2a:	492d      	ldr	r1, [pc, #180]	; (8006be0 <R3_2_RLDetectionModeDisable+0x118>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006b2c:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8006b2e:	4a2d      	ldr	r2, [pc, #180]	; (8006be4 <R3_2_RLDetectionModeDisable+0x11c>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8006b30:	6041      	str	r1, [r0, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8006b32:	492d      	ldr	r1, [pc, #180]	; (8006be8 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8006b34:	4c2d      	ldr	r4, [pc, #180]	; (8006bec <R3_2_RLDetectionModeDisable+0x124>)
 8006b36:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8006b38:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8006b3a:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006b3e:	bc10      	pop	{r4}
    pHandle->_Super.RLDetectionMode = false;
 8006b40:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8006b44:	4770      	bx	lr
 8006b46:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8006b48:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8006b4a:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8006b4e:	f041 0104 	orr.w	r1, r1, #4
 8006b52:	0852      	lsrs	r2, r2, #1
 8006b54:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b56:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b58:	6999      	ldr	r1, [r3, #24]
 8006b5a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8006b5e:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8006b62:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b64:	6a19      	ldr	r1, [r3, #32]
 8006b66:	f041 0110 	orr.w	r1, r1, #16
 8006b6a:	6219      	str	r1, [r3, #32]
 8006b6c:	6a19      	ldr	r1, [r3, #32]
 8006b6e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006b72:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006b74:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b76:	69d9      	ldr	r1, [r3, #28]
 8006b78:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8006b7c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8006b80:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006b82:	6a19      	ldr	r1, [r3, #32]
 8006b84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b88:	6219      	str	r1, [r3, #32]
 8006b8a:	6a19      	ldr	r1, [r3, #32]
 8006b8c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006b90:	6219      	str	r1, [r3, #32]
}
 8006b92:	e7ca      	b.n	8006b2a <R3_2_RLDetectionModeDisable+0x62>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b94:	6a19      	ldr	r1, [r3, #32]
 8006b96:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8006b9a:	f021 0104 	bic.w	r1, r1, #4
 8006b9e:	0852      	lsrs	r2, r2, #1
 8006ba0:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006ba2:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006ba4:	6999      	ldr	r1, [r3, #24]
 8006ba6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8006baa:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8006bae:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006bb0:	6a19      	ldr	r1, [r3, #32]
 8006bb2:	f041 0110 	orr.w	r1, r1, #16
 8006bb6:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bb8:	6a19      	ldr	r1, [r3, #32]
 8006bba:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006bbe:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006bc0:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bc2:	69d9      	ldr	r1, [r3, #28]
 8006bc4:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8006bc8:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8006bcc:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006bce:	6a19      	ldr	r1, [r3, #32]
 8006bd0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006bd4:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bd6:	6a19      	ldr	r1, [r3, #32]
 8006bd8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006bdc:	6219      	str	r1, [r3, #32]
}
 8006bde:	e7a4      	b.n	8006b2a <R3_2_RLDetectionModeDisable+0x62>
 8006be0:	08006199 	.word	0x08006199
 8006be4:	08006499 	.word	0x08006499
 8006be8:	08006405 	.word	0x08006405
 8006bec:	080063b1 	.word	0x080063b1

08006bf0 <R3_2_RLDetectionModeSetDuty>:
{
 8006bf0:	4603      	mov	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006bf2:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006bf6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
{
 8006bfa:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006bfc:	fb02 f101 	mul.w	r1, r2, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c00:	6884      	ldr	r4, [r0, #8]
  if ( pHandle->_Super.SWerror == 1u )
 8006c02:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006c06:	0c09      	lsrs	r1, r1, #16
  pHdl->Sector = SECTOR_4;
 8006c08:	2203      	movs	r2, #3
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8006c0a:	8759      	strh	r1, [r3, #58]	; 0x3a
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c0c:	6361      	str	r1, [r4, #52]	; 0x34
  pHdl->Sector = SECTOR_4;
 8006c0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006c12:	6a22      	ldr	r2, [r4, #32]
}
 8006c14:	bc10      	pop	{r4}
  if ( pHandle->_Super.SWerror == 1u )
 8006c16:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006c18:	bf0a      	itet	eq
 8006c1a:	2200      	moveq	r2, #0
    hAux = MC_FOC_DURATION;
 8006c1c:	f3c2 3000 	ubfxne	r0, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8006c20:	f8a3 2040 	strheq.w	r2, [r3, #64]	; 0x40
}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006c28:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8006c2c:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006c2e:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006c30:	4494      	add	ip, r2
{
 8006c32:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006c34:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006c38:	b14b      	cbz	r3, 8006c4e <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 8006c3a:	6a04      	ldr	r4, [r0, #32]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006c40:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8006c42:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006c46:	8b01      	ldrh	r1, [r0, #24]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	4291      	cmp	r1, r2
 8006c4c:	d8f7      	bhi.n	8006c3e <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f36c 030f 	bfi	r3, ip, #0, #16
 8006c54:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8006c58:	2200      	movs	r2, #0
}
 8006c5a:	bc10      	pop	{r4}
  pHandle->_Super.LatestConv = aux;
 8006c5c:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8006c5e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8006c62:	4770      	bx	lr

08006c64 <RVBS_Init>:
{
 8006c64:	b510      	push	{r4, lr}
 8006c66:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006c68:	300c      	adds	r0, #12
 8006c6a:	f7fc f907 	bl	8002e7c <RCM_RegisterRegConv>
 8006c6e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff ffd8 	bl	8006c28 <RVBS_Clear>
}
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	bf00      	nop

08006c7c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8006c7c:	88c3      	ldrh	r3, [r0, #6]
 8006c7e:	8b42      	ldrh	r2, [r0, #26]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d305      	bcc.n	8006c90 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8006c84:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8006c86:	4298      	cmp	r0, r3
 8006c88:	bf8c      	ite	hi
 8006c8a:	2004      	movhi	r0, #4
 8006c8c:	2000      	movls	r0, #0
 8006c8e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8006c90:	2002      	movs	r0, #2
  }
  return fault;
}
 8006c92:	4770      	bx	lr

08006c94 <RVBS_CalcAvVbus>:
{
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006c98:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006c9c:	f7fc f9ca 	bl	8003034 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8006ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ca4:	4298      	cmp	r0, r3
 8006ca6:	d01b      	beq.n	8006ce0 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8006ca8:	6a26      	ldr	r6, [r4, #32]
 8006caa:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 8006cae:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006cb2:	8b25      	ldrh	r5, [r4, #24]
 8006cb4:	b1cd      	cbz	r5, 8006cea <RVBS_CalcAvVbus+0x56>
 8006cb6:	2300      	movs	r3, #0
    wtemp = 0;
 8006cb8:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8006cba:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	b2d9      	uxtb	r1, r3
 8006cc2:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 8006cc4:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	d3f7      	bcc.n	8006cba <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8006cca:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006cce:	1e6b      	subs	r3, r5, #1
 8006cd0:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8006cd2:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006cd4:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006cd6:	da0a      	bge.n	8006cee <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8006cd8:	f10e 0e01 	add.w	lr, lr, #1
 8006cdc:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f7ff ffcb 	bl	8006c7c <RVBS_CheckFaultState>
 8006ce6:	8120      	strh	r0, [r4, #8]
}
 8006ce8:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006cea:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8006cec:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f7ff ffc1 	bl	8006c7c <RVBS_CheckFaultState>
 8006cfa:	8120      	strh	r0, [r4, #8]
}
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
 8006cfe:	bf00      	nop

08006d00 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8006d00:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8006d02:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8006d04:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8006d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8006d0c:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8006d0e:	4770      	bx	lr

08006d10 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006d10:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop

08006d18 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006d18:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop

08006d20 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006d20:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop

08006d28 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006d28:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006d2c:	8a81      	ldrh	r1, [r0, #20]
{
 8006d2e:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 8006d30:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8006d32:	bfb8      	it	lt
 8006d34:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006d36:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006d3a:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006d3e:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8006d40:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006d42:	459e      	cmp	lr, r3
 8006d44:	d819      	bhi.n	8006d7a <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006d46:	4299      	cmp	r1, r3
 8006d48:	bf2c      	ite	cs
 8006d4a:	2300      	movcs	r3, #0
 8006d4c:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8006d4e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006d52:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8006d56:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8006d58:	bfb8      	it	lt
 8006d5a:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8006d5c:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006d5e:	458e      	cmp	lr, r1
 8006d60:	d300      	bcc.n	8006d64 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006d62:	b163      	cbz	r3, 8006d7e <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006d64:	4594      	cmp	ip, r2
 8006d66:	d901      	bls.n	8006d6c <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 8006d68:	3201      	adds	r2, #1
 8006d6a:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006d6c:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8006d6e:	ebb2 000c 	subs.w	r0, r2, ip
 8006d72:	bf18      	it	ne
 8006d74:	2001      	movne	r0, #1
 8006d76:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e7e7      	b.n	8006d4e <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 8006d7e:	4594      	cmp	ip, r2
 8006d80:	bf88      	it	hi
 8006d82:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006d84:	7002      	strb	r2, [r0, #0]
}
 8006d86:	ebb2 000c 	subs.w	r0, r2, ip
 8006d8a:	bf18      	it	ne
 8006d8c:	2001      	movne	r0, #1
 8006d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d92:	bf00      	nop

08006d94 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8006d94:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006d98:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8006d9c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006da0:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8006da4:	b200      	sxth	r0, r0
 8006da6:	4770      	bx	lr

08006da8 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006da8:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 8006dac:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006dae:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 8006db2:	6142      	str	r2, [r0, #20]
{
 8006db4:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8006db6:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8006dba:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8006dbc:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006dbe:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006dc2:	0409      	lsls	r1, r1, #16
 8006dc4:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8006dc8:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8006dca:	bc10      	pop	{r4}
  pHandle->RampRemainingStep = 0u;
 8006dcc:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006dce:	6183      	str	r3, [r0, #24]
}
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop

08006dd4 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8006dd4:	6940      	ldr	r0, [r0, #20]
 8006dd6:	4770      	bx	lr

08006dd8 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006dd8:	7803      	ldrb	r3, [r0, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d000      	beq.n	8006de0 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8006dde:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8006de0:	6900      	ldr	r0, [r0, #16]
 8006de2:	2100      	movs	r1, #0
 8006de4:	f7ff b8d2 	b.w	8005f8c <PID_SetIntegralTerm>

08006de8 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8006de8:	6840      	ldr	r0, [r0, #4]
 8006dea:	2800      	cmp	r0, #0
 8006dec:	bfbc      	itt	lt
 8006dee:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006df2:	30ff      	addlt	r0, #255	; 0xff
}
 8006df4:	1400      	asrs	r0, r0, #16
 8006df6:	4770      	bx	lr

08006df8 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006df8:	6880      	ldr	r0, [r0, #8]
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	bfbc      	itt	lt
 8006dfe:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006e02:	30ff      	addlt	r0, #255	; 0xff
}
 8006e04:	1400      	asrs	r0, r0, #16
 8006e06:	4770      	bx	lr

08006e08 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006e08:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8006e0a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006e0c:	60c3      	str	r3, [r0, #12]
}
 8006e0e:	4770      	bx	lr

08006e10 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8006e10:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006e12:	7803      	ldrb	r3, [r0, #0]
{
 8006e14:	4604      	mov	r4, r0
 8006e16:	460d      	mov	r5, r1
 8006e18:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006e1a:	b323      	cbz	r3, 8006e66 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006e1c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006e1e:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006e20:	2800      	cmp	r0, #0
 8006e22:	bfbc      	itt	lt
 8006e24:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006e28:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006e2a:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006e2c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006e30:	dd01      	ble.n	8006e36 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8006e32:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006e34:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8006e36:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8006e3a:	428b      	cmp	r3, r1
 8006e3c:	dcf9      	bgt.n	8006e32 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8006e3e:	8c23      	ldrh	r3, [r4, #32]
 8006e40:	4299      	cmp	r1, r3
 8006e42:	da03      	bge.n	8006e4c <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006e44:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006e48:	428b      	cmp	r3, r1
 8006e4a:	dbf2      	blt.n	8006e32 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8006e4c:	b9ae      	cbnz	r6, 8006e7a <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006e4e:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006e50:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006e52:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8006e54:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006e58:	bf0c      	ite	eq
 8006e5a:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006e5c:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8006e5e:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8006e60:	61a3      	str	r3, [r4, #24]
 8006e62:	2001      	movs	r0, #1
}
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8006e66:	f7ff ffc7 	bl	8006df8 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006e6a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006e6c:	429d      	cmp	r5, r3
 8006e6e:	dce0      	bgt.n	8006e32 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006e70:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8006e74:	42ab      	cmp	r3, r5
 8006e76:	dcdc      	bgt.n	8006e32 <STC_ExecRamp+0x22>
 8006e78:	e7e8      	b.n	8006e4c <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006e7a:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 8006e7c:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006e7e:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8006e82:	4e06      	ldr	r6, [pc, #24]	; (8006e9c <STC_ExecRamp+0x8c>)
 8006e84:	fba6 2303 	umull	r2, r3, r6, r3
 8006e88:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8006e8a:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006e8c:	1a28      	subs	r0, r5, r0
 8006e8e:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8006e90:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006e92:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 8006e96:	61a0      	str	r0, [r4, #24]
 8006e98:	2001      	movs	r0, #1
}
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	10624dd3 	.word	0x10624dd3

08006ea0 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006ea4:	6183      	str	r3, [r0, #24]
}
 8006ea6:	4770      	bx	lr

08006ea8 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006ea8:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8006eaa:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006eae:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006eb0:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	bf08      	it	eq
 8006eb6:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8006eb8:	2b01      	cmp	r3, #1
{
 8006eba:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8006ebc:	d90c      	bls.n	8006ed8 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006ebe:	6981      	ldr	r1, [r0, #24]
 8006ec0:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006ec2:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006ec4:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8006ec6:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006ec8:	4630      	mov	r0, r6
 8006eca:	db09      	blt.n	8006ee0 <STC_CalcTorqueReference+0x38>
 8006ecc:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006ece:	2a01      	cmp	r2, #1
 8006ed0:	d00a      	beq.n	8006ee8 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8006ed2:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006ed4:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006ed8:	d012      	beq.n	8006f00 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	4630      	mov	r0, r6
 8006ede:	daf5      	bge.n	8006ecc <STC_CalcTorqueReference+0x24>
 8006ee0:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8006ee4:	30ff      	adds	r0, #255	; 0xff
 8006ee6:	e7f1      	b.n	8006ecc <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8006ee8:	6960      	ldr	r0, [r4, #20]
 8006eea:	f7ff ff15 	bl	8006d18 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8006eee:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006ef0:	b209      	sxth	r1, r1
 8006ef2:	6920      	ldr	r0, [r4, #16]
 8006ef4:	f7ff f882 	bl	8005ffc <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006ef8:	0403      	lsls	r3, r0, #16
 8006efa:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006f00:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006f04:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006f06:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006f08:	60c3      	str	r3, [r0, #12]
 8006f0a:	e7e0      	b.n	8006ece <STC_CalcTorqueReference+0x26>

08006f0c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8006f0c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop

08006f14 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006f14:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8006f18:	2200      	movs	r2, #0
 8006f1a:	b299      	uxth	r1, r3
 8006f1c:	f361 020f 	bfi	r2, r1, #0, #16
 8006f20:	0c1b      	lsrs	r3, r3, #16
 8006f22:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006f26:	b082      	sub	sp, #8
}
 8006f28:	4610      	mov	r0, r2
 8006f2a:	b002      	add	sp, #8
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop

08006f30 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006f34:	6940      	ldr	r0, [r0, #20]
 8006f36:	f7ff feef 	bl	8006d18 <SPD_GetAvrgMecSpeedUnit>
 8006f3a:	0400      	lsls	r0, r0, #16
 8006f3c:	6060      	str	r0, [r4, #4]
}
 8006f3e:	bd10      	pop	{r4, pc}

08006f40 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006f40:	2300      	movs	r3, #0
 8006f42:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006f44:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop

08006f4c <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8006f4c:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006f4e:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006f50:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 8006f54:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006f56:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 8006f58:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006f5a:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8006f5e:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006f62:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8006f64:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006f66:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006f6a:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 8006f6e:	d007      	beq.n	8006f80 <STM_FaultProcessing+0x34>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8006f70:	b90a      	cbnz	r2, 8006f76 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8006f72:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 8006f76:	200a      	movs	r0, #10
 8006f78:	f88c 0000 	strb.w	r0, [ip]
}
 8006f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	d1f6      	bne.n	8006f72 <STM_FaultProcessing+0x26>
      pHandle->bState = FAULT_OVER;
 8006f84:	200b      	movs	r0, #11
 8006f86:	f88c 0000 	strb.w	r0, [ip]
}
 8006f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f8e:	bf00      	nop

08006f90 <STM_NextState>:
{
 8006f90:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8006f92:	7803      	ldrb	r3, [r0, #0]
 8006f94:	2b14      	cmp	r3, #20
 8006f96:	d810      	bhi.n	8006fba <STM_NextState+0x2a>
 8006f98:	e8df f003 	tbb	[pc, r3]
 8006f9c:	200d3457 	.word	0x200d3457
 8006fa0:	500d532a 	.word	0x500d532a
 8006fa4:	0f0f484d 	.word	0x0f0f484d
 8006fa8:	455e0b1b 	.word	0x455e0b1b
 8006fac:	3b3f6342 	.word	0x3b3f6342
 8006fb0:	31          	.byte	0x31
 8006fb1:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006fb2:	290e      	cmp	r1, #14
 8006fb4:	d00f      	beq.n	8006fd6 <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 8006fb6:	2907      	cmp	r1, #7
 8006fb8:	d00d      	beq.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006fba:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d014      	beq.n	8006fec <STM_NextState+0x5c>
 8006fc2:	2907      	cmp	r1, #7
 8006fc4:	d012      	beq.n	8006fec <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2180      	movs	r1, #128	; 0x80
 8006fca:	f7ff ffbf 	bl	8006f4c <STM_FaultProcessing>
 8006fce:	2000      	movs	r0, #0
}
 8006fd0:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8006fd2:	2900      	cmp	r1, #0
 8006fd4:	d1f1      	bne.n	8006fba <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8006fd6:	7001      	strb	r1, [r0, #0]
 8006fd8:	2001      	movs	r0, #1
}
 8006fda:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8006fdc:	2911      	cmp	r1, #17
 8006fde:	d8f2      	bhi.n	8006fc6 <STM_NextState+0x36>
 8006fe0:	4b23      	ldr	r3, [pc, #140]	; (8007070 <STM_NextState+0xe0>)
 8006fe2:	40cb      	lsrs	r3, r1
 8006fe4:	07da      	lsls	r2, r3, #31
 8006fe6:	d4f6      	bmi.n	8006fd6 <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006fe8:	2903      	cmp	r1, #3
 8006fea:	d1ec      	bne.n	8006fc6 <STM_NextState+0x36>
 8006fec:	2000      	movs	r0, #0
}
 8006fee:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006ff0:	2913      	cmp	r1, #19
 8006ff2:	d0f0      	beq.n	8006fd6 <STM_NextState+0x46>
 8006ff4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8006ff8:	2b05      	cmp	r3, #5
 8006ffa:	d1e0      	bne.n	8006fbe <STM_NextState+0x2e>
 8006ffc:	e7eb      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8006ffe:	2912      	cmp	r1, #18
 8007000:	d1d9      	bne.n	8006fb6 <STM_NextState+0x26>
 8007002:	e7e8      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8007004:	2907      	cmp	r1, #7
 8007006:	d0e6      	beq.n	8006fd6 <STM_NextState+0x46>
 8007008:	f1a1 030d 	sub.w	r3, r1, #13
 800700c:	2b01      	cmp	r3, #1
 800700e:	d8d4      	bhi.n	8006fba <STM_NextState+0x2a>
 8007010:	e7e1      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8007012:	1f0b      	subs	r3, r1, #4
 8007014:	2b01      	cmp	r3, #1
 8007016:	d8ce      	bhi.n	8006fb6 <STM_NextState+0x26>
 8007018:	e7dd      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800701a:	2904      	cmp	r1, #4
 800701c:	d1cb      	bne.n	8006fb6 <STM_NextState+0x26>
 800701e:	e7da      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8007020:	2911      	cmp	r1, #17
 8007022:	d1c8      	bne.n	8006fb6 <STM_NextState+0x26>
 8007024:	e7d7      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8007026:	2902      	cmp	r1, #2
 8007028:	d1c5      	bne.n	8006fb6 <STM_NextState+0x26>
 800702a:	e7d4      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800702c:	2900      	cmp	r1, #0
 800702e:	d0d2      	beq.n	8006fd6 <STM_NextState+0x46>
 8007030:	290c      	cmp	r1, #12
 8007032:	d1c2      	bne.n	8006fba <STM_NextState+0x2a>
 8007034:	e7cf      	b.n	8006fd6 <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 8007036:	2909      	cmp	r1, #9
 8007038:	d1bf      	bne.n	8006fba <STM_NextState+0x2a>
 800703a:	e7cc      	b.n	8006fd6 <STM_NextState+0x46>
      if ( bState == STOP )
 800703c:	2908      	cmp	r1, #8
 800703e:	d1bc      	bne.n	8006fba <STM_NextState+0x2a>
 8007040:	e7c9      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8007042:	1f8b      	subs	r3, r1, #6
 8007044:	2b01      	cmp	r3, #1
 8007046:	d8b8      	bhi.n	8006fba <STM_NextState+0x2a>
 8007048:	e7c5      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800704a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800704e:	2b01      	cmp	r3, #1
 8007050:	d0c1      	beq.n	8006fd6 <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 8007052:	290c      	cmp	r1, #12
 8007054:	d1b5      	bne.n	8006fc2 <STM_NextState+0x32>
 8007056:	e7be      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8007058:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800705c:	2b07      	cmp	r3, #7
 800705e:	d1ac      	bne.n	8006fba <STM_NextState+0x2a>
 8007060:	e7b9      	b.n	8006fd6 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8007062:	2914      	cmp	r1, #20
 8007064:	d8a9      	bhi.n	8006fba <STM_NextState+0x2a>
 8007066:	4b03      	ldr	r3, [pc, #12]	; (8007074 <STM_NextState+0xe4>)
 8007068:	40cb      	lsrs	r3, r1
 800706a:	07db      	lsls	r3, r3, #31
 800706c:	d4b3      	bmi.n	8006fd6 <STM_NextState+0x46>
 800706e:	e7a4      	b.n	8006fba <STM_NextState+0x2a>
 8007070:	00030092 	.word	0x00030092
 8007074:	00140080 	.word	0x00140080

08007078 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8007078:	7800      	ldrb	r0, [r0, #0]
 800707a:	4770      	bx	lr

0800707c <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800707c:	7803      	ldrb	r3, [r0, #0]
 800707e:	2b0b      	cmp	r3, #11
 8007080:	d001      	beq.n	8007086 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8007082:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8007084:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8007086:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007088:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800708a:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800708c:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800708e:	2001      	movs	r0, #1
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop

08007094 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8007094:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8007096:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8007098:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop

080070a0 <__libc_init_array>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4d0d      	ldr	r5, [pc, #52]	; (80070d8 <__libc_init_array+0x38>)
 80070a4:	4c0d      	ldr	r4, [pc, #52]	; (80070dc <__libc_init_array+0x3c>)
 80070a6:	1b64      	subs	r4, r4, r5
 80070a8:	10a4      	asrs	r4, r4, #2
 80070aa:	2600      	movs	r6, #0
 80070ac:	42a6      	cmp	r6, r4
 80070ae:	d109      	bne.n	80070c4 <__libc_init_array+0x24>
 80070b0:	4d0b      	ldr	r5, [pc, #44]	; (80070e0 <__libc_init_array+0x40>)
 80070b2:	4c0c      	ldr	r4, [pc, #48]	; (80070e4 <__libc_init_array+0x44>)
 80070b4:	f000 f82e 	bl	8007114 <_init>
 80070b8:	1b64      	subs	r4, r4, r5
 80070ba:	10a4      	asrs	r4, r4, #2
 80070bc:	2600      	movs	r6, #0
 80070be:	42a6      	cmp	r6, r4
 80070c0:	d105      	bne.n	80070ce <__libc_init_array+0x2e>
 80070c2:	bd70      	pop	{r4, r5, r6, pc}
 80070c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c8:	4798      	blx	r3
 80070ca:	3601      	adds	r6, #1
 80070cc:	e7ee      	b.n	80070ac <__libc_init_array+0xc>
 80070ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d2:	4798      	blx	r3
 80070d4:	3601      	adds	r6, #1
 80070d6:	e7f2      	b.n	80070be <__libc_init_array+0x1e>
 80070d8:	080075bc 	.word	0x080075bc
 80070dc:	080075bc 	.word	0x080075bc
 80070e0:	080075bc 	.word	0x080075bc
 80070e4:	080075c0 	.word	0x080075c0

080070e8 <memcpy>:
 80070e8:	440a      	add	r2, r1
 80070ea:	4291      	cmp	r1, r2
 80070ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80070f0:	d100      	bne.n	80070f4 <memcpy+0xc>
 80070f2:	4770      	bx	lr
 80070f4:	b510      	push	{r4, lr}
 80070f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070fe:	4291      	cmp	r1, r2
 8007100:	d1f9      	bne.n	80070f6 <memcpy+0xe>
 8007102:	bd10      	pop	{r4, pc}

08007104 <memset>:
 8007104:	4402      	add	r2, r0
 8007106:	4603      	mov	r3, r0
 8007108:	4293      	cmp	r3, r2
 800710a:	d100      	bne.n	800710e <memset+0xa>
 800710c:	4770      	bx	lr
 800710e:	f803 1b01 	strb.w	r1, [r3], #1
 8007112:	e7f9      	b.n	8007108 <memset+0x4>

08007114 <_init>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	bf00      	nop
 8007118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711a:	bc08      	pop	{r3}
 800711c:	469e      	mov	lr, r3
 800711e:	4770      	bx	lr

08007120 <_fini>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr
