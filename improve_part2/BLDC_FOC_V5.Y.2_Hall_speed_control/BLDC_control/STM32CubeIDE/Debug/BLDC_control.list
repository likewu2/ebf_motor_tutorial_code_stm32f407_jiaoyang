
BLDC_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d0  080080d0  000205a0  2**0
                  CONTENTS
  4 .ARM          00000008  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080d8  080080d8  000205a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a0  20000000  080080e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001588  200005a0  08008680  000205a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b28  08008680  00021b28  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY
 12 .debug_line   000303e4  00000000  00000000  000205ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002df5f  00000000  00000000  000509ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006d4a  00000000  00000000  0007e90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  00085658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ef012  00000000  00000000  00086cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003e80  00000000  00000000  00175cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0001cd2a  00000000  00000000  00179b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b1d8  00000000  00000000  00196882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c1a5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004378  00000000  00000000  001c1aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005a0 	.word	0x200005a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007bb0 	.word	0x08007bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005a4 	.word	0x200005a4
 80001c4:	08007bb0 	.word	0x08007bb0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14d      	bne.n	80002a4 <__udivmoddi4+0xac>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d968      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b152      	cbz	r2, 800022a <__udivmoddi4+0x32>
 8000214:	fa01 f302 	lsl.w	r3, r1, r2
 8000218:	f1c2 0120 	rsb	r1, r2, #32
 800021c:	fa20 f101 	lsr.w	r1, r0, r1
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	ea41 0803 	orr.w	r8, r1, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800022e:	0c21      	lsrs	r1, r4, #16
 8000230:	fbb8 fef5 	udiv	lr, r8, r5
 8000234:	fa1f f78c 	uxth.w	r7, ip
 8000238:	fb05 831e 	mls	r3, r5, lr, r8
 800023c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000240:	fb0e f107 	mul.w	r1, lr, r7
 8000244:	4299      	cmp	r1, r3
 8000246:	d90b      	bls.n	8000260 <__udivmoddi4+0x68>
 8000248:	eb1c 0303 	adds.w	r3, ip, r3
 800024c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000250:	f080 811e 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000254:	4299      	cmp	r1, r3
 8000256:	f240 811b 	bls.w	8000490 <__udivmoddi4+0x298>
 800025a:	f1ae 0e02 	sub.w	lr, lr, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f5 	udiv	r0, r3, r5
 8000268:	fb05 3310 	mls	r3, r5, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x96>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8108 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8105 	bls.w	8000494 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000294:	2100      	movs	r1, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa8>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d908      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a8:	2e00      	cmp	r6, #0
 80002aa:	f000 80ee 	beq.w	800048a <__udivmoddi4+0x292>
 80002ae:	2100      	movs	r1, #0
 80002b0:	e9c6 0500 	strd	r0, r5, [r6]
 80002b4:	4608      	mov	r0, r1
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb65 0303 	sbc.w	r3, r5, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e2      	beq.n	80002a0 <__udivmoddi4+0xa8>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7df      	b.n	80002a0 <__udivmoddi4+0xa8>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8091 	bne.w	8000410 <__udivmoddi4+0x218>
 80002ee:	eba1 050c 	sub.w	r5, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000300:	fb07 5013 	mls	r0, r7, r3, r5
 8000304:	0c25      	lsrs	r5, r4, #16
 8000306:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	42a8      	cmp	r0, r5
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0505 	adds.w	r5, ip, r5
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	42a8      	cmp	r0, r5
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a2d      	subs	r5, r5, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb5 f0f7 	udiv	r0, r5, r7
 800032c:	fb07 5510 	mls	r5, r7, r0, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 35ff 	add.w	r5, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4628      	mov	r0, r5
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x9e>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa05 f301 	lsl.w	r3, r5, r1
 800036e:	431c      	orrs	r4, r3
 8000370:	40fd      	lsrs	r5, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f301 	lsl.w	r3, r0, r1
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 5518 	mls	r5, r9, r8, r5
 8000388:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	42a8      	cmp	r0, r5
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0505 	adds.w	r5, ip, r5
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	42a8      	cmp	r0, r5
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4465      	add	r5, ip
 80003b0:	1a2d      	subs	r5, r5, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003b8:	fb09 5510 	mls	r5, r9, r0, r5
 80003bc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45ae      	cmp	lr, r5
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0505 	adds.w	r5, ip, r5
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	45ae      	cmp	lr, r5
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4465      	add	r5, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba5 050e 	sub.w	r5, r5, lr
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15e      	cbz	r6, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb65 050e 	sbc.w	r5, r5, lr
 80003fa:	fa05 f707 	lsl.w	r7, r5, r7
 80003fe:	fa22 f301 	lsr.w	r3, r2, r1
 8000402:	40cd      	lsrs	r5, r1
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c6 7500 	strd	r7, r5, [r6]
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa25 f303 	lsr.w	r3, r5, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000430:	fb07 3011 	mls	r0, r7, r1, r3
 8000434:	0c2b      	lsrs	r3, r5, #16
 8000436:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800043a:	fb01 f00e 	mul.w	r0, r1, lr
 800043e:	4298      	cmp	r0, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f101 38ff 	add.w	r8, r1, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	4298      	cmp	r0, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3902      	subs	r1, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a1b      	subs	r3, r3, r0
 800045a:	b2ad      	uxth	r5, r5
 800045c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000460:	fb07 3310 	mls	r3, r7, r0, r3
 8000464:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000468:	fb00 f30e 	mul.w	r3, r0, lr
 800046c:	42ab      	cmp	r3, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 38ff 	add.w	r8, r0, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	42ab      	cmp	r3, r5
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	1aed      	subs	r5, r5, r3
 8000484:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e707      	b.n	80002a0 <__udivmoddi4+0xa8>
 8000490:	4686      	mov	lr, r0
 8000492:	e6e5      	b.n	8000260 <__udivmoddi4+0x68>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fa      	b.n	800028e <__udivmoddi4+0x96>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4641      	mov	r1, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4465      	add	r5, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4608      	mov	r0, r1
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000504 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004d2:	e003      	b.n	80004dc <LoopCopyDataInit>

080004d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004da:	3104      	adds	r1, #4

080004dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004e4:	d3f6      	bcc.n	80004d4 <CopyDataInit>
  ldr  r2, =_sbss
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004e8:	e002      	b.n	80004f0 <LoopFillZerobss>

080004ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004ec:	f842 3b04 	str.w	r3, [r2], #4

080004f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004f4:	d3f9      	bcc.n	80004ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004f6:	f003 f969 	bl	80037cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fa:	f006 fe9d 	bl	8007238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fe:	f000 fbbf 	bl	8000c80 <main>
  bx  lr    
 8000502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000504:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000508:	080080e0 	.word	0x080080e0
  ldr  r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000510:	200005a0 	.word	0x200005a0
  ldr  r2, =_sbss
 8000514:	200005a0 	.word	0x200005a0
  ldr  r3, = _ebss
 8000518:	20001b28 	.word	0x20001b28

0800051c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800051c:	e7fe      	b.n	800051c <BusFault_Handler>
	...

08000520 <ASPEP_start>:

    return crc == 0;
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	4604      	mov	r4, r0
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000524:	6940      	ldr	r0, [r0, #20]
 8000526:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000528:	4798      	blx	r3
  pHandle->ASPEP_State = ASPEP_IDLE;
 800052a:	2300      	movs	r3, #0
  pHandle->ASPEP_TL_State = WAITING_PACKET;
  pHandle -> syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

  /* Configure UART to receive first packet*/
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 800052c:	6d65      	ldr	r5, [r4, #84]	; 0x54
  pHandle->ASPEP_State = ASPEP_IDLE;
 800052e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pHandle -> syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000532:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000536:	6960      	ldr	r0, [r4, #20]
 8000538:	f104 011c 	add.w	r1, r4, #28
 800053c:	462b      	mov	r3, r5
 800053e:	2204      	movs	r2, #4
}
 8000540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000544:	4718      	bx	r3
 8000546:	bf00      	nop

08000548 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon (ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000548:	b410      	push	{r4}
  uint32_t * packet = (uint32_t*) pHandle->ctrlBuffer.buffer;
  *packet =( BEACON |
           (capabilities->version <<4) |
           (capabilities->DATA_CRC << 7) |
 800054a:	780a      	ldrb	r2, [r1, #0]
           (capabilities->version <<4) |
 800054c:	790c      	ldrb	r4, [r1, #4]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 800054e:	788b      	ldrb	r3, [r1, #2]
           (capabilities->DATA_CRC << 7) |
 8000550:	01d2      	lsls	r2, r2, #7
           (capabilities->version <<4) |
 8000552:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
           (((uint32_t)capabilities->RX_maxSize) << 8) |
 8000556:	784c      	ldrb	r4, [r1, #1]
           (((uint32_t)capabilities->TXA_maxSize) << 21));
 8000558:	78c9      	ldrb	r1, [r1, #3]
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 800055a:	039b      	lsls	r3, r3, #14
 800055c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
           (capabilities->version <<4) |
 8000560:	f042 0205 	orr.w	r2, r2, #5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000564:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8000568:	4313      	orrs	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 800056a:	4c16      	ldr	r4, [pc, #88]	; (80005c4 <ASPEP_sendBeacon+0x7c>)
 800056c:	f002 02f5 	and.w	r2, r2, #245	; 0xf5
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000570:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8000574:	5ca2      	ldrb	r2, [r4, r2]
 8000576:	404a      	eors	r2, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000578:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800057c:	5ca2      	ldrb	r2, [r4, r2]
 800057e:	4051      	eors	r1, r2
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000580:	f3c3 6c03 	ubfx	ip, r3, #24, #4
 8000584:	5c62      	ldrb	r2, [r4, r1]
 8000586:	4910      	ldr	r1, [pc, #64]	; (80005c8 <ASPEP_sendBeacon+0x80>)
 8000588:	ea82 020c 	eor.w	r2, r2, ip
    *headerPtr |= (uint32_t)crc << 28;
 800058c:	5c8a      	ldrb	r2, [r1, r2]
 800058e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000592:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
uint8_t ASPEP_TXframeProcess (ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
  uint8_t result = ASPEP_OK;
  ASPEP_ComputeHeaderCRC  ((uint32_t*)txBuffer); /* Insert CRC header in the packet to send */
  __disable_irq(); /*TODO: Disable High frequency task is enough */
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000596:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000598:	b143      	cbz	r3, 80005ac <ASPEP_sendBeacon+0x64>
  __ASM volatile ("cpsie i" : : : "memory");
 800059a:	b662      	cpsie	i
        pHandle -> syncBuffer.length = bufferLength;
      }
    }
    else  if ( dataType == ASPEP_CTRL )
    {
     if ( pHandle -> ctrlBuffer.state != free ) {
 800059c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005a0:	b913      	cbnz	r3, 80005a8 <ASPEP_sendBeacon+0x60>
        result = ASPEP_BUFFER_ERROR;
      }
      else {
        pHandle -> ctrlBuffer.state = pending;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005a8:	bc10      	pop	{r4}
 80005aa:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005ac:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80005b6:	6481      	str	r1, [r0, #72]	; 0x48
 80005b8:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80005ba:	2204      	movs	r2, #4
 80005bc:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 80005be:	bc10      	pop	{r4}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80005c0:	6940      	ldr	r0, [r0, #20]
 80005c2:	4718      	bx	r3
 80005c4:	08007bd8 	.word	0x08007bd8
 80005c8:	08007bc8 	.word	0x08007bc8

080005cc <ASPEP_sendPing>:
{
 80005cc:	b510      	push	{r4, lr}
  uint8_t ipID = pHandle->liid &0xF;
 80005ce:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
  uint8_t Nbit = pHandle->syncPacketCount & 0x1; /* Keep only LSB */
 80005d2:	f890 e060 	ldrb.w	lr, [r0, #96]	; 0x60
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 80005d6:	ea4f 1c41 	mov.w	ip, r1, lsl #5
 80005da:	f003 040f 	and.w	r4, r3, #15
 80005de:	ea4c 1301 	orr.w	r3, ip, r1, lsl #4
 80005e2:	f00e 0e01 	and.w	lr, lr, #1
 80005e6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80005ea:	ea43 138e 	orr.w	r3, r3, lr, lsl #6
 80005ee:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
 80005f2:	f043 0306 	orr.w	r3, r3, #6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 80005f6:	4916      	ldr	r1, [pc, #88]	; (8000650 <ASPEP_sendPing+0x84>)
 80005f8:	f003 04f6 	and.w	r4, r3, #246	; 0xf6
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 80005fc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000600:	5d0b      	ldrb	r3, [r1, r4]
 8000602:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000606:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000608:	5ccb      	ldrb	r3, [r1, r3]
 800060a:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 800060e:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	4910      	ldr	r1, [pc, #64]	; (8000654 <ASPEP_sendPing+0x88>)
 8000614:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    *headerPtr |= (uint32_t)crc << 28;
 8000618:	5ccb      	ldrb	r3, [r1, r3]
 800061a:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
 800061e:	6202      	str	r2, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000622:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000624:	b13b      	cbz	r3, 8000636 <ASPEP_sendPing+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000626:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000628:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800062c:	b913      	cbnz	r3, 8000634 <ASPEP_sendPing+0x68>
        pHandle -> ctrlBuffer.state = pending;
 800062e:	2302      	movs	r3, #2
 8000630:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000634:	bd10      	pop	{r4, pc}
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000636:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 800063a:	2303      	movs	r3, #3
 800063c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000640:	6481      	str	r1, [r0, #72]	; 0x48
 8000642:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000644:	2204      	movs	r2, #4
 8000646:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000648:	6940      	ldr	r0, [r0, #20]
}
 800064a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 800064e:	4718      	bx	r3
 8000650:	08007bd8 	.word	0x08007bd8
 8000654:	08007bc8 	.word	0x08007bc8

08000658 <ASPEP_getBuffer>:
  if (syncAsync == MCTL_SYNC)
 8000658:	2a0a      	cmp	r2, #10
{
 800065a:	b410      	push	{r4}
 800065c:	4603      	mov	r3, r0
  if (syncAsync == MCTL_SYNC)
 800065e:	d00a      	beq.n	8000676 <ASPEP_getBuffer+0x1e>
    if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock ))
 8000660:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8000664:	2a01      	cmp	r2, #1
 8000666:	d91e      	bls.n	80006a6 <ASPEP_getBuffer+0x4e>
 8000668:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800066c:	2a01      	cmp	r2, #1
 800066e:	d90f      	bls.n	8000690 <ASPEP_getBuffer+0x38>
      result = false;
 8000670:	2000      	movs	r0, #0
}
 8000672:	bc10      	pop	{r4}
 8000674:	4770      	bx	lr
    if (pHandle->syncBuffer.state <= writeLock ) /* Possible values are free or writeLock*/
 8000676:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 800067a:	2a01      	cmp	r2, #1
 800067c:	d8f8      	bhi.n	8000670 <ASPEP_getBuffer+0x18>
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 800067e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      pHandle->syncBuffer.state = writeLock;
 8000680:	2401      	movs	r4, #1
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000682:	3204      	adds	r2, #4
 8000684:	600a      	str	r2, [r1, #0]
      pHandle->syncBuffer.state = writeLock;
 8000686:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 800068a:	4620      	mov	r0, r4
}
 800068c:	bc10      	pop	{r4}
 800068e:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000690:	6b82      	ldr	r2, [r0, #56]	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 8000692:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000694:	f103 0438 	add.w	r4, r3, #56	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 8000698:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800069c:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 800069e:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006a0:	bc10      	pop	{r4}
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006a2:	600a      	str	r2, [r1, #0]
}
 80006a4:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006a6:	6b02      	ldr	r2, [r0, #48]	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 80006a8:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006aa:	f103 0430 	add.w	r4, r3, #48	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 80006ae:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006b2:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006b4:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006b6:	bc10      	pop	{r4}
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006b8:	600a      	str	r2, [r1, #0]
}
 80006ba:	4770      	bx	lr

080006bc <ASPEP_sendPacket>:
{
 80006bc:	4684      	mov	ip, r0
  if (pHandle-> ASPEP_State == ASPEP_CONNECTED)
 80006be:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 80006c2:	2802      	cmp	r0, #2
 80006c4:	d001      	beq.n	80006ca <ASPEP_sendPacket+0xe>
    result = ASPEP_NOT_CONNECTED;
 80006c6:	2002      	movs	r0, #2
}
 80006c8:	4770      	bx	lr
{
 80006ca:	b570      	push	{r4, r5, r6, lr}
    tmpHeader =  (txDataLength << 4) | syncAsync;
 80006cc:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
    *header = tmpHeader;
 80006d0:	f841 0c04 	str.w	r0, [r1, #-4]
    if (pHandle->Capabilities.DATA_CRC == 1)
 80006d4:	f89c 0067 	ldrb.w	r0, [ip, #103]	; 0x67
 80006d8:	2801      	cmp	r0, #1
    packet = packet - ASPEP_HEADER_SIZE; /* Header ues 4*8 bits on top of txBuffer*/
 80006da:	f1a1 0e04 	sub.w	lr, r1, #4
    if (pHandle->Capabilities.DATA_CRC == 1)
 80006de:	d104      	bne.n	80006ea <ASPEP_sendPacket+0x2e>
      *(packet+ASPEP_HEADER_SIZE+txDataLength) = (uint8_t) 0xCA; /* Dummy CRC */
 80006e0:	f64f 60ca 	movw	r0, #65226	; 0xfeca
 80006e4:	5288      	strh	r0, [r1, r2]
      txDataLength+=ASPEP_DATACRC_SIZE;
 80006e6:	3202      	adds	r2, #2
 80006e8:	b292      	uxth	r2, r2
    if (syncAsync == MCTL_SYNC )
 80006ea:	2b0a      	cmp	r3, #10
 80006ec:	d105      	bne.n	80006fa <ASPEP_sendPacket+0x3e>
      if ( pSupHandle->MCP_PacketAvailable)
 80006ee:	f89c 0010 	ldrb.w	r0, [ip, #16]
 80006f2:	b358      	cbz	r0, 800074c <ASPEP_sendPacket+0x90>
        pSupHandle-> MCP_PacketAvailable = false; /* CMD from master is processed*/
 80006f4:	2000      	movs	r0, #0
 80006f6:	f88c 0010 	strb.w	r0, [ip, #16]
    uint32_t header = *headerPtr;
 80006fa:	f851 0c04 	ldr.w	r0, [r1, #-4]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 80006fe:	4d34      	ldr	r5, [pc, #208]	; (80007d0 <ASPEP_sendPacket+0x114>)
 8000700:	b2c4      	uxtb	r4, r0
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 8000702:	3204      	adds	r2, #4
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000704:	5d2e      	ldrb	r6, [r5, r4]
 8000706:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800070a:	4074      	eors	r4, r6
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 800070c:	b292      	uxth	r2, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 800070e:	5d2e      	ldrb	r6, [r5, r4]
 8000710:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000714:	4074      	eors	r4, r6
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000716:	5d2c      	ldrb	r4, [r5, r4]
 8000718:	f3c0 6503 	ubfx	r5, r0, #24, #4
 800071c:	406c      	eors	r4, r5
 800071e:	4d2d      	ldr	r5, [pc, #180]	; (80007d4 <ASPEP_sendPacket+0x118>)
    *headerPtr |= (uint32_t)crc << 28;
 8000720:	5d2c      	ldrb	r4, [r5, r4]
 8000722:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000726:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800072a:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 800072c:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 8000730:	b1e1      	cbz	r1, 800076c <ASPEP_sendPacket+0xb0>
  __ASM volatile ("cpsie i" : : : "memory");
 8000732:	b662      	cpsie	i
    if ( dataType == MCTL_ASYNC )
 8000734:	2b09      	cmp	r3, #9
 8000736:	d00b      	beq.n	8000750 <ASPEP_sendPacket+0x94>
    else if (dataType == MCTL_SYNC )
 8000738:	2b0a      	cmp	r3, #10
 800073a:	d030      	beq.n	800079e <ASPEP_sendPacket+0xe2>
    else  if ( dataType == ASPEP_CTRL )
 800073c:	bbab      	cbnz	r3, 80007aa <ASPEP_sendPacket+0xee>
     if ( pHandle -> ctrlBuffer.state != free ) {
 800073e:	f89c 0024 	ldrb.w	r0, [ip, #36]	; 0x24
 8000742:	bb80      	cbnz	r0, 80007a6 <ASPEP_sendPacket+0xea>
        pHandle -> ctrlBuffer.state = pending;
 8000744:	2302      	movs	r3, #2
 8000746:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
}
 800074a:	bd70      	pop	{r4, r5, r6, pc}
        result = MCTL_SYNC_NOT_EXPECTED;
 800074c:	2001      	movs	r0, #1
}
 800074e:	bd70      	pop	{r4, r5, r6, pc}
      if ( txBuffer != (uint8_t *) pHandle->lastRequestedAsyncBuff->buffer)
 8000750:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
      if (pHandle->asyncNextBuffer == NULL)
 8000754:	f8dc 1044 	ldr.w	r1, [ip, #68]	; 0x44
      if ( txBuffer != (uint8_t *) pHandle->lastRequestedAsyncBuff->buffer)
 8000758:	6818      	ldr	r0, [r3, #0]
        result = ASPEP_BUFFER_ERROR;
 800075a:	4586      	cmp	lr, r0
 800075c:	bf14      	ite	ne
 800075e:	2003      	movne	r0, #3
 8000760:	2000      	moveq	r0, #0
      if (pHandle->asyncNextBuffer == NULL)
 8000762:	b391      	cbz	r1, 80007ca <ASPEP_sendPacket+0x10e>
      pHandle->lastRequestedAsyncBuff->state = pending;
 8000764:	2102      	movs	r1, #2
 8000766:	7199      	strb	r1, [r3, #6]
      pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000768:	809a      	strh	r2, [r3, #4]
}
 800076a:	bd70      	pop	{r4, r5, r6, pc}
    if (dataType == MCTL_ASYNC )
 800076c:	2b09      	cmp	r3, #9
 800076e:	d025      	beq.n	80007bc <ASPEP_sendPacket+0x100>
    else if (dataType == MCTL_SYNC )
 8000770:	2b0a      	cmp	r3, #10
      pHandle->syncBuffer.state = readLock;
 8000772:	f04f 0103 	mov.w	r1, #3
      pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000776:	bf0b      	itete	eq
 8000778:	f10c 0328 	addeq.w	r3, ip, #40	; 0x28
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 800077c:	f10c 0320 	addne.w	r3, ip, #32
      pHandle->syncBuffer.state = readLock;
 8000780:	f88c 102e 	strbeq.w	r1, [ip, #46]	; 0x2e
      pHandle->ctrlBuffer.state = readLock;
 8000784:	f88c 1024 	strbne.w	r1, [ip, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000788:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 800078c:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 800078e:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
 8000792:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000796:	4671      	mov	r1, lr
 8000798:	4798      	blx	r3
 800079a:	2000      	movs	r0, #0
}
 800079c:	bd70      	pop	{r4, r5, r6, pc}
      if ( pHandle -> syncBuffer.state != writeLock ) {
 800079e:	f89c 302e 	ldrb.w	r3, [ip, #46]	; 0x2e
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d003      	beq.n	80007ae <ASPEP_sendPacket+0xf2>
        result = ASPEP_BUFFER_ERROR;
 80007a6:	2003      	movs	r0, #3
}
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t result = ASPEP_OK;
 80007aa:	2000      	movs	r0, #0
}
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
        pHandle -> syncBuffer.state = pending;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f88c 302e 	strb.w	r3, [ip, #46]	; 0x2e
        pHandle -> syncBuffer.length = bufferLength;
 80007b4:	f8ac 202c 	strh.w	r2, [ip, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 80007b8:	2000      	movs	r0, #0
}
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->lastRequestedAsyncBuff->state = readLock;
 80007bc:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80007c0:	2103      	movs	r1, #3
 80007c2:	7199      	strb	r1, [r3, #6]
      pHandle->lockBuffer = (void *) pHandle->lastRequestedAsyncBuff;
 80007c4:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80007c8:	e7e0      	b.n	800078c <ASPEP_sendPacket+0xd0>
        pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80007ca:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 80007ce:	e7c9      	b.n	8000764 <ASPEP_sendPacket+0xa8>
 80007d0:	08007bd8 	.word	0x08007bd8
 80007d4:	08007bc8 	.word	0x08007bc8

080007d8 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT (ASPEP_Handle_t *pHandle )
{
 80007d8:	b510      	push	{r4, lr}
  /* First free previous readLock buffer */
  if (pHandle->ctrlBuffer.state == readLock)
 80007da:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80007de:	2b03      	cmp	r3, #3
{
 80007e0:	4604      	mov	r4, r0
  if (pHandle->ctrlBuffer.state == readLock)
 80007e2:	d013      	beq.n	800080c <ASPEP_HWDataTransmittedIT+0x34>
    pHandle -> ctrlBuffer.state = free;
  }
  else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
  {
    MCTL_Buff_t * tempBuff = (MCTL_Buff_t *) pHandle -> lockBuffer;
    tempBuff->state = free;
 80007e4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80007e6:	2100      	movs	r1, #0
 80007e8:	7191      	strb	r1, [r2, #6]
  }
  if ( pHandle -> syncBuffer.state == pending )
 80007ea:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80007ee:	2a02      	cmp	r2, #2
 80007f0:	d013      	beq.n	800081a <ASPEP_HWDataTransmittedIT+0x42>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
    pHandle ->syncBuffer.state = readLock;
  }
  /* Second prepare transfer of pending buffer */
  else if ( pHandle -> ctrlBuffer.state == pending )
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d11d      	bne.n	8000832 <ASPEP_HWDataTransmittedIT+0x5a>
  {
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80007f6:	f100 0120 	add.w	r1, r0, #32
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80007fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80007fc:	6481      	str	r1, [r0, #72]	; 0x48
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80007fe:	2204      	movs	r2, #4
 8000800:	6940      	ldr	r0, [r0, #20]
 8000802:	4798      	blx	r3
    pHandle -> ctrlBuffer.state = readLock;
 8000804:	2303      	movs	r3, #3
 8000806:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    {
      pHandle->lockBuffer = NULL;
    }
    __enable_irq();
  }
}
 800080a:	bd10      	pop	{r4, pc}
  if ( pHandle -> syncBuffer.state == pending )
 800080c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    pHandle -> ctrlBuffer.state = free;
 8000810:	2200      	movs	r2, #0
  if ( pHandle -> syncBuffer.state == pending )
 8000812:	2b02      	cmp	r3, #2
    pHandle -> ctrlBuffer.state = free;
 8000814:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if ( pHandle -> syncBuffer.state == pending )
 8000818:	d10b      	bne.n	8000832 <ASPEP_HWDataTransmittedIT+0x5a>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 800081a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800081e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000820:	64a0      	str	r0, [r4, #72]	; 0x48
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000822:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000824:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000826:	6960      	ldr	r0, [r4, #20]
 8000828:	4798      	blx	r3
    pHandle ->syncBuffer.state = readLock;
 800082a:	2303      	movs	r3, #3
 800082c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000830:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000832:	b672      	cpsid	i
    if ( pHandle->asyncNextBuffer != NULL )
 8000834:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000836:	b1cb      	cbz	r3, 800086c <ASPEP_HWDataTransmittedIT+0x94>
      pHandle->asyncNextBuffer->state = readLock;
 8000838:	2203      	movs	r2, #3
      pHandle->lockBuffer = (void *) pHandle->asyncNextBuffer;
 800083a:	64a3      	str	r3, [r4, #72]	; 0x48
      pHandle->asyncNextBuffer->state = readLock;
 800083c:	719a      	strb	r2, [r3, #6]
      pHandle->fASPEP_send (pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	889a      	ldrh	r2, [r3, #4]
 8000842:	6960      	ldr	r0, [r4, #20]
 8000844:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000846:	4798      	blx	r3
      if ( (pHandle->asyncBufferA.state == pending ) || (pHandle->asyncBufferB.state == pending))
 8000848:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800084c:	2b02      	cmp	r3, #2
 800084e:	d007      	beq.n	8000860 <ASPEP_HWDataTransmittedIT+0x88>
 8000850:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000854:	2b02      	cmp	r3, #2
 8000856:	d003      	beq.n	8000860 <ASPEP_HWDataTransmittedIT+0x88>
        pHandle->asyncNextBuffer = NULL;
 8000858:	2300      	movs	r3, #0
 800085a:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 800085c:	b662      	cpsie	i
}
 800085e:	bd10      	pop	{r4, pc}
        uint32_t temp = (uint32_t) &pHandle->asyncBufferA + (uint32_t) &pHandle->asyncBufferB - (uint32_t)  pHandle->asyncNextBuffer;
 8000860:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000862:	0063      	lsls	r3, r4, #1
 8000864:	3368      	adds	r3, #104	; 0x68
 8000866:	1a9b      	subs	r3, r3, r2
        pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp;
 8000868:	6463      	str	r3, [r4, #68]	; 0x44
      {
 800086a:	e7f7      	b.n	800085c <ASPEP_HWDataTransmittedIT+0x84>
      pHandle->lockBuffer = NULL;
 800086c:	64a3      	str	r3, [r4, #72]	; 0x48
 800086e:	e7f5      	b.n	800085c <ASPEP_HWDataTransmittedIT+0x84>

08000870 <ASPEP_RXframeProcess>:

uint8_t* ASPEP_RXframeProcess (MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  bool validCRCData = true;
  uint16_t packetNumber;
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);

  *packetLength = 0;
  if (pHandle->NewPacketAvailable)
 8000874:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);
 8000878:	69c2      	ldr	r2, [r0, #28]
  *packetLength = 0;
 800087a:	2500      	movs	r5, #0
{
 800087c:	4604      	mov	r4, r0
  *packetLength = 0;
 800087e:	800d      	strh	r5, [r1, #0]
  if (pHandle->NewPacketAvailable)
 8000880:	b193      	cbz	r3, 80008a8 <ASPEP_RXframeProcess+0x38>
  {
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
    switch (pHandle->ASPEP_State)
 8000882:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
 8000886:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
    switch (pHandle->ASPEP_State)
 800088a:	2e01      	cmp	r6, #1
 800088c:	d037      	beq.n	80008fe <ASPEP_RXframeProcess+0x8e>
 800088e:	2e02      	cmp	r6, #2
 8000890:	d04e      	beq.n	8000930 <ASPEP_RXframeProcess+0xc0>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d042      	beq.n	800091c <ASPEP_RXframeProcess+0xac>
      }

      break;
    }
    /* The valid received packet is now safely consumes, we are ready to receive a new packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000896:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000898:	6960      	ldr	r0, [r4, #20]
 800089a:	2204      	movs	r2, #4
 800089c:	f104 011c 	add.w	r1, r4, #28
 80008a0:	4798      	blx	r3
  else
  {
    /* Nothing to do, no response is due to the master */
  }
  return result;
}
 80008a2:	4628      	mov	r0, r5
 80008a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  else if (pHandle->badPacketFlag > ASPEP_OK )
 80008a8:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0f8      	beq.n	80008a2 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 80008b0:	042b      	lsls	r3, r5, #16
 80008b2:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80008b6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80008ba:	4997      	ldr	r1, [pc, #604]	; (8000b18 <ASPEP_RXframeProcess+0x2a8>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80008bc:	4897      	ldr	r0, [pc, #604]	; (8000b1c <ASPEP_RXframeProcess+0x2ac>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80008be:	f083 0309 	eor.w	r3, r3, #9
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 80008c2:	5cca      	ldrb	r2, [r1, r3]
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 80008c4:	f045 030f 	orr.w	r3, r5, #15
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 80008c8:	ea82 4515 	eor.w	r5, r2, r5, lsr #16
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80008cc:	5d4a      	ldrb	r2, [r1, r5]
    *headerPtr |= (uint32_t)crc << 28;
 80008ce:	5c82      	ldrb	r2, [r0, r2]
 80008d0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80008d4:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 80008d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d03d      	beq.n	800095a <ASPEP_RXframeProcess+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
 80008de:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 80008e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008e4:	b913      	cbnz	r3, 80008ec <ASPEP_RXframeProcess+0x7c>
        pHandle -> ctrlBuffer.state = pending;
 80008e6:	2302      	movs	r3, #2
 80008e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    pHandle->badPacketFlag = ASPEP_OK;
 80008ec:	2500      	movs	r5, #0
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 80008ee:	6960      	ldr	r0, [r4, #20]
 80008f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    pHandle->badPacketFlag = ASPEP_OK;
 80008f2:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 80008f6:	4798      	blx	r3
}
 80008f8:	4628      	mov	r0, r5
 80008fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pHandle->rxPacketType == beacon )
 80008fe:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000902:	2b05      	cmp	r3, #5
 8000904:	d035      	beq.n	8000972 <ASPEP_RXframeProcess+0x102>
      else if (pHandle->rxPacketType == ping)
 8000906:	2b06      	cmp	r3, #6
 8000908:	d1c5      	bne.n	8000896 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 800090a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800090e:	4631      	mov	r1, r6
 8000910:	f7ff fe5c 	bl	80005cc <ASPEP_sendPing>
        pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000914:	2302      	movs	r3, #2
 8000916:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800091a:	e7bc      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 800091c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000920:	2b05      	cmp	r3, #5
 8000922:	f000 8088 	beq.w	8000a36 <ASPEP_RXframeProcess+0x1c6>
      else if (pHandle->rxPacketType == ping)
 8000926:	2b06      	cmp	r3, #6
 8000928:	f000 80ca 	beq.w	8000ac0 <ASPEP_RXframeProcess+0x250>
  uint8_t* result = NULL;
 800092c:	4635      	mov	r5, r6
 800092e:	e7b2      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 8000930:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000934:	2b05      	cmp	r3, #5
 8000936:	d051      	beq.n	80009dc <ASPEP_RXframeProcess+0x16c>
      else if (pHandle->rxPacketType == ping )
 8000938:	2b06      	cmp	r3, #6
 800093a:	f000 80c8 	beq.w	8000ace <ASPEP_RXframeProcess+0x25e>
      else if (pHandle->rxPacketType == data )
 800093e:	2b09      	cmp	r3, #9
 8000940:	d1a9      	bne.n	8000896 <ASPEP_RXframeProcess+0x26>
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000942:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
          *packetLength = pHandle->rxLength;
 8000946:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
          result = pHandle->rxBuffer;
 800094a:	69a5      	ldr	r5, [r4, #24]
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 800094c:	3301      	adds	r3, #1
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800094e:	2001      	movs	r0, #1
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000950:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000954:	7420      	strb	r0, [r4, #16]
          *packetLength = pHandle->rxLength;
 8000956:	800a      	strh	r2, [r1, #0]
          result = pHandle->rxBuffer;
 8000958:	e79d      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800095a:	f104 0120 	add.w	r1, r4, #32
      pHandle->ctrlBuffer.state = readLock;
 800095e:	2303      	movs	r3, #3
 8000960:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000964:	64a1      	str	r1, [r4, #72]	; 0x48
 8000966:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000968:	2204      	movs	r2, #4
 800096a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800096c:	6960      	ldr	r0, [r4, #20]
 800096e:	4798      	blx	r3
return result;
 8000970:	e7bc      	b.n	80008ec <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000972:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000974:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000976:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800097a:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800097e:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000982:	f894 706a 	ldrb.w	r7, [r4, #106]	; 0x6a
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000986:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 800098a:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800098c:	4281      	cmp	r1, r0
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 800098e:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000992:	bf28      	it	cs
 8000994:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000996:	42ab      	cmp	r3, r5
 8000998:	4698      	mov	r8, r3
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 800099a:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800099e:	bf28      	it	cs
 80009a0:	46a8      	movcs	r8, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009a2:	45b4      	cmp	ip, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009a4:	f884 8067 	strb.w	r8, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009a8:	46e0      	mov	r8, ip
 80009aa:	bf28      	it	cs
 80009ac:	46b0      	movcs	r8, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009ae:	45be      	cmp	lr, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009b0:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009b4:	46f0      	mov	r8, lr
 80009b6:	bf28      	it	cs
 80009b8:	46b8      	movcs	r8, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80009ba:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009bc:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009c0:	f884 806a 	strb.w	r8, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80009c4:	f240 8088 	bls.w	8000ad8 <ASPEP_RXframeProcess+0x268>
          pHandle->ASPEP_State = ASPEP_IDLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        ASPEP_sendBeacon (pHandle, &pHandle->Capabilities);
 80009ce:	f104 0167 	add.w	r1, r4, #103	; 0x67
 80009d2:	4620      	mov	r0, r4
 80009d4:	f7ff fdb8 	bl	8000548 <ASPEP_sendBeacon>
  uint8_t* result = NULL;
 80009d8:	2500      	movs	r5, #0
 80009da:	e75c      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80009dc:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80009de:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009e0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e4:	f894 6067 	ldrb.w	r6, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009e8:	f894 c069 	ldrb.w	ip, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009ec:	f894 706a 	ldrb.w	r7, [r4, #106]	; 0x6a
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80009f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80009f4:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009f6:	4281      	cmp	r1, r0
 80009f8:	bf28      	it	cs
 80009fa:	4601      	movcs	r1, r0
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 80009fc:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a00:	42b3      	cmp	r3, r6
 8000a02:	4699      	mov	r9, r3
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8000a04:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a08:	bf28      	it	cs
 8000a0a:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a0c:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a0e:	f884 9067 	strb.w	r9, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a12:	46f1      	mov	r9, lr
 8000a14:	bf28      	it	cs
 8000a16:	46e1      	movcs	r9, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a18:	45b8      	cmp	r8, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a1a:	f884 9069 	strb.w	r9, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a1e:	46c1      	mov	r9, r8
 8000a20:	bf28      	it	cs
 8000a22:	46b9      	movcs	r9, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a24:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a26:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a2a:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a2e:	d964      	bls.n	8000afa <ASPEP_RXframeProcess+0x28a>
 8000a30:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a34:	e7cb      	b.n	80009ce <ASPEP_RXframeProcess+0x15e>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a36:	7f65      	ldrb	r5, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a38:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a3a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a3e:	f894 c067 	ldrb.w	ip, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a42:	f894 e069 	ldrb.w	lr, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a46:	f894 806a 	ldrb.w	r8, [r4, #106]	; 0x6a
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a4a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a4e:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a50:	42ab      	cmp	r3, r5
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8000a52:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a56:	bf28      	it	cs
 8000a58:	462b      	movcs	r3, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a5a:	4560      	cmp	r0, ip
 8000a5c:	4601      	mov	r1, r0
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8000a5e:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a62:	bf28      	it	cs
 8000a64:	4661      	movcs	r1, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a66:	4577      	cmp	r7, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a68:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a6c:	4639      	mov	r1, r7
 8000a6e:	bf28      	it	cs
 8000a70:	4671      	movcs	r1, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a72:	45c1      	cmp	r9, r8
 8000a74:	464e      	mov	r6, r9
 8000a76:	bf28      	it	cs
 8000a78:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a7a:	4560      	cmp	r0, ip
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a7c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a80:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a84:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a88:	d8a1      	bhi.n	80009ce <ASPEP_RXframeProcess+0x15e>
 8000a8a:	429d      	cmp	r5, r3
 8000a8c:	d89f      	bhi.n	80009ce <ASPEP_RXframeProcess+0x15e>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000a8e:	4577      	cmp	r7, lr
 8000a90:	d89d      	bhi.n	80009ce <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000a92:	45c1      	cmp	r9, r8
 8000a94:	d89b      	bhi.n	80009ce <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000a96:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
 8000a9a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000a9e:	4290      	cmp	r0, r2
 8000aa0:	d195      	bne.n	80009ce <ASPEP_RXframeProcess+0x15e>
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000aa2:	1c4a      	adds	r2, r1, #1
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000aa4:	3301      	adds	r3, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000aa6:	b2d2      	uxtb	r2, r2
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000aa8:	b2db      	uxtb	r3, r3
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000aaa:	0152      	lsls	r2, r2, #5
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8000aac:	01b6      	lsls	r6, r6, #6
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000aae:	015b      	lsls	r3, r3, #5
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000ab0:	2101      	movs	r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000ab2:	81a2      	strh	r2, [r4, #12]
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8000ab4:	81e6      	strh	r6, [r4, #14]
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000ab6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000aba:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000abe:	e786      	b.n	80009ce <ASPEP_RXframeProcess+0x15e>
        ASPEP_sendPing (pHandle,ASPEP_PING_RESET,packetNumber);
 8000ac0:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	f7ff fd81 	bl	80005cc <ASPEP_sendPing>
  uint8_t* result = NULL;
 8000aca:	4635      	mov	r5, r6
 8000acc:	e6e3      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8000ace:	7f42      	ldrb	r2, [r0, #29]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	f7ff fd7b 	bl	80005cc <ASPEP_sendPing>
 8000ad6:	e6de      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	f63f af75 	bhi.w	80009c8 <ASPEP_RXframeProcess+0x158>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000ade:	45b4      	cmp	ip, r6
 8000ae0:	f63f af72 	bhi.w	80009c8 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000ae4:	45be      	cmp	lr, r7
 8000ae6:	f63f af6f 	bhi.w	80009c8 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000aea:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8000aee:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000af2:	4293      	cmp	r3, r2
 8000af4:	f47f af68 	bne.w	80009c8 <ASPEP_RXframeProcess+0x158>
 8000af8:	e769      	b.n	80009ce <ASPEP_RXframeProcess+0x15e>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d898      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x1c0>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000afe:	45e6      	cmp	lr, ip
 8000b00:	d896      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000b02:	45b8      	cmp	r8, r7
 8000b04:	d894      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000b06:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
 8000b0a:	f3c2 1202 	ubfx	r2, r2, #4, #3
          pHandle->ASPEP_State = ASPEP_IDLE;
 8000b0e:	1aab      	subs	r3, r5, r2
 8000b10:	425d      	negs	r5, r3
 8000b12:	415d      	adcs	r5, r3
 8000b14:	e78c      	b.n	8000a30 <ASPEP_RXframeProcess+0x1c0>
 8000b16:	bf00      	nop
 8000b18:	08007bd8 	.word	0x08007bd8
 8000b1c:	08007bc8 	.word	0x08007bc8

08000b20 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT (ASPEP_Handle_t *pHandle)
{
 8000b20:	b510      	push	{r4, lr}
/* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.*/
/* This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_RXframeProcess*/
/* If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.*/
  switch (pHandle->ASPEP_TL_State) {
 8000b22:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b26:	4604      	mov	r4, r0
  switch (pHandle->ASPEP_TL_State) {
 8000b28:	b13b      	cbz	r3, 8000b3a <ASPEP_HWDataReceivedIT+0x1a>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d104      	bne.n	8000b38 <ASPEP_HWDataReceivedIT+0x18>
    {
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
    }
    break;
  case WAITING_PAYLOAD:
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    // Payload received,
    pHandle->NewPacketAvailable = true;
 8000b34:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    /*The receiver is not reconfigure right now on purpose to avoid race condition when the packet will be processed in ASPEP_RXframeProcess */
    break;
  }
}
 8000b38:	bd10      	pop	{r4, pc}
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8000b3a:	69c2      	ldr	r2, [r0, #28]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000b3c:	491f      	ldr	r1, [pc, #124]	; (8000bbc <ASPEP_HWDataReceivedIT+0x9c>)
 8000b3e:	b2d3      	uxtb	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000b40:	5ccb      	ldrb	r3, [r1, r3]
 8000b42:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000b46:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000b48:	5ccb      	ldrb	r3, [r1, r3]
 8000b4a:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000b4e:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 24) & 0xff) ];
 8000b50:	5ccb      	ldrb	r3, [r1, r3]
 8000b52:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8000b56:	5ccb      	ldrb	r3, [r1, r3]
 8000b58:	b963      	cbnz	r3, 8000b74 <ASPEP_HWDataReceivedIT+0x54>
       pHandle->rxPacketType = (ASPEP_packetType_def) (pHandle->rxHeader[0] & ID_MASK);
 8000b5a:	7f03      	ldrb	r3, [r0, #28]
 8000b5c:	f003 030f 	and.w	r3, r3, #15
 8000b60:	2b06      	cmp	r3, #6
 8000b62:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
       switch (pHandle->rxPacketType) {
 8000b66:	d809      	bhi.n	8000b7c <ASPEP_HWDataReceivedIT+0x5c>
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d81e      	bhi.n	8000baa <ASPEP_HWDataReceivedIT+0x8a>
         pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000b72:	bd10      	pop	{r4, pc}
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000b74:	2304      	movs	r3, #4
 8000b76:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000b7a:	bd10      	pop	{r4, pc}
 8000b7c:	2b09      	cmp	r3, #9
 8000b7e:	d1f5      	bne.n	8000b6c <ASPEP_HWDataReceivedIT+0x4c>
         pHandle->rxLength = (*((uint32_t *)pHandle->rxHeader) & 0x0001FFF0) >> 4;
 8000b80:	f3c2 120c 	ubfx	r2, r2, #4, #13
 8000b84:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
         if (pHandle->rxLength == 0) /* data packet with length 0 is a valid packet*/
 8000b88:	b17a      	cbz	r2, 8000baa <ASPEP_HWDataReceivedIT+0x8a>
         else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000b8a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d30f      	bcc.n	8000bb2 <ASPEP_HWDataReceivedIT+0x92>
           pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer , pHandle->rxLength+ASPEP_DATACRC_SIZE*pHandle->Capabilities.DATA_CRC); /* need to read + 2 bytes CRC*/
 8000b92:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
 8000b96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b98:	69a1      	ldr	r1, [r4, #24]
 8000b9a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8000b9e:	6960      	ldr	r0, [r4, #20]
 8000ba0:	4798      	blx	r3
           pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000ba8:	bd10      	pop	{r4, pc}
         pHandle->NewPacketAvailable = true;
 8000baa:	2301      	movs	r3, #1
 8000bac:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000bb0:	bd10      	pop	{r4, pc}
           pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bb8:	bd10      	pop	{r4, pc}
 8000bba:	bf00      	nop
 8000bbc:	08007bd8 	.word	0x08007bd8

08000bc0 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset (ASPEP_Handle_t *pHandle)
{ /* We must reset the RX state machine to be sure to not be in Waiting packet state */
 8000bc0:	4601      	mov	r1, r0
  /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
  /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
  pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000bc8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000bca:	6940      	ldr	r0, [r0, #20]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	311c      	adds	r1, #28
 8000bd0:	4718      	bx	r3
 8000bd2:	bf00      	nop

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	2300      	movs	r3, #0
{
 8000bd8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000bde:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000be6:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4923      	ldr	r1, [pc, #140]	; (8000c78 <SystemClock_Config+0xa4>)
 8000bec:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bee:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf0:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000bf8:	6408      	str	r0, [r1, #64]	; 0x40
 8000bfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bfc:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000c00:	9100      	str	r1, [sp, #0]
 8000c02:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	6813      	ldr	r3, [r2, #0]
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c14:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c16:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c1c:	2319      	movs	r3, #25
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1e:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c20:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c24:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c28:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c2c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c30:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c32:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c36:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3a:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c3c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f003 fa9d 	bl	800417c <HAL_RCC_OscConfig>
 8000c42:	b108      	cbz	r0, 8000c48 <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c52:	240f      	movs	r4, #15
 8000c54:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c5a:	a802      	add	r0, sp, #8
 8000c5c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c62:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c64:	f003 fca0 	bl	80045a8 <HAL_RCC_ClockConfig>
 8000c68:	b108      	cbz	r0, 8000c6e <SystemClock_Config+0x9a>
 8000c6a:	b672      	cpsid	i
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <SystemClock_Config+0x98>
  HAL_RCC_EnableCSS();
 8000c6e:	f003 fc61 	bl	8004534 <HAL_RCC_EnableCSS>
}
 8000c72:	b015      	add	sp, #84	; 0x54
 8000c74:	bd30      	pop	{r4, r5, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40007000 	.word	0x40007000

08000c80 <main>:
{
 8000c80:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  fprintf(stderr, "Standard error message.\n");
 8000c84:	4ba5      	ldr	r3, [pc, #660]	; (8000f1c <main+0x29c>)
 8000c86:	48a6      	ldr	r0, [pc, #664]	; (8000f20 <main+0x2a0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4ca6      	ldr	r4, [pc, #664]	; (8000f24 <main+0x2a4>)
  fprintf(stderr, "Standard error message.\n");
 8000c8c:	68db      	ldr	r3, [r3, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8e:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8000f28 <main+0x2a8>
{
 8000c92:	b09f      	sub	sp, #124	; 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	2500      	movs	r5, #0
  fprintf(stderr, "Standard error message.\n");
 8000c96:	2218      	movs	r2, #24
 8000c98:	2101      	movs	r1, #1
 8000c9a:	f006 fabf 	bl	800721c <fwrite>
  HAL_Init();
 8000c9e:	f002 fdc1 	bl	8003824 <HAL_Init>
  SystemClock_Config();
 8000ca2:	f7ff ff97 	bl	8000bd4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	9501      	str	r5, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	9518      	str	r5, [sp, #96]	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	489e      	ldr	r0, [pc, #632]	; (8000f2c <main+0x2ac>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8000cb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	9301      	str	r3, [sp, #4]
 8000cc0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	9502      	str	r5, [sp, #8]
 8000cc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6323      	str	r3, [r4, #48]	; 0x30
 8000ccc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	9302      	str	r3, [sp, #8]
 8000cd4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	9503      	str	r5, [sp, #12]
 8000cd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cde:	6323      	str	r3, [r4, #48]	; 0x30
 8000ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	9303      	str	r3, [sp, #12]
 8000ce8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	9504      	str	r5, [sp, #16]
 8000cec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8000cf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	9304      	str	r3, [sp, #16]
 8000cfc:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfe:	9505      	str	r5, [sp, #20]
 8000d00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d06:	6323      	str	r3, [r4, #48]	; 0x30
 8000d08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d10:	4b87      	ldr	r3, [pc, #540]	; (8000f30 <main+0x2b0>)
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d12:	9905      	ldr	r1, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d14:	2204      	movs	r2, #4
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d16:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d18:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f003 f8f6 	bl	8003f0c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d20:	9500      	str	r5, [sp, #0]
 8000d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d28:	6323      	str	r3, [r4, #48]	; 0x30
 8000d2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000d2c:	4c81      	ldr	r4, [pc, #516]	; (8000f34 <main+0x2b4>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d32:	9300      	str	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d34:	4629      	mov	r1, r5
 8000d36:	2220      	movs	r2, #32
 8000d38:	a816      	add	r0, sp, #88	; 0x58
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d3a:	9b00      	ldr	r3, [sp, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d3c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d40:	f006 faaf 	bl	80072a2 <memset>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d44:	f04f 0900 	mov.w	r9, #0
  hadc1.Instance = ADC1;
 8000d48:	4b7b      	ldr	r3, [pc, #492]	; (8000f38 <main+0x2b8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	950e      	str	r5, [sp, #56]	; 0x38
  hadc1.Init.ScanConvMode = ENABLE;
 8000d4c:	f04f 0a01 	mov.w	sl, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d50:	e9c4 6501 	strd	r6, r5, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d54:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
  hadc1.Instance = ADC1;
 8000d58:	6023      	str	r3, [r4, #0]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d5a:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5c:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d60:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d64:	9511      	str	r5, [sp, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 2;
 8000d66:	2302      	movs	r3, #2
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d68:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6c:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 8000d72:	f8c4 a010 	str.w	sl, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d76:	f8c4 a014 	str.w	sl, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d7a:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d7c:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7e:	f002 fd7d 	bl	800387c <HAL_ADC_Init>
 8000d82:	b108      	cbz	r0, 8000d88 <main+0x108>
 8000d84:	b672      	cpsid	i
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <main+0x106>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000d88:	2703      	movs	r7, #3
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d8a:	e9cd a017 	strd	sl, r0, [sp, #92]	; 0x5c
  sConfigInjected.InjectedOffset = 0;
 8000d8e:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d96:	a916      	add	r1, sp, #88	; 0x58
 8000d98:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000d9a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8000d9e:	f8ad a06c 	strh.w	sl, [sp, #108]	; 0x6c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000da2:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000da4:	971a      	str	r7, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000da6:	f002 fec5 	bl	8003b34 <HAL_ADCEx_InjectedConfigChannel>
 8000daa:	b108      	cbz	r0, 8000db0 <main+0x130>
 8000dac:	b672      	cpsid	i
  while (1)
 8000dae:	e7fe      	b.n	8000dae <main+0x12e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000db0:	2204      	movs	r2, #4
 8000db2:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000db4:	a916      	add	r1, sp, #88	; 0x58
 8000db6:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000db8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dbc:	f002 feba 	bl	8003b34 <HAL_ADCEx_InjectedConfigChannel>
 8000dc0:	b108      	cbz	r0, 8000dc6 <main+0x146>
 8000dc2:	b672      	cpsid	i
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <main+0x144>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dca:	a916      	add	r1, sp, #88	; 0x58
 8000dcc:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000dce:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dd2:	f002 feaf 	bl	8003b34 <HAL_ADCEx_InjectedConfigChannel>
 8000dd6:	b108      	cbz	r0, 8000ddc <main+0x15c>
 8000dd8:	b672      	cpsid	i
  while (1)
 8000dda:	e7fe      	b.n	8000dda <main+0x15a>
  sConfig.Channel = ADC_CHANNEL_8;
 8000ddc:	2208      	movs	r2, #8
 8000dde:	2301      	movs	r3, #1
 8000de0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de4:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_8;
 8000de6:	2201      	movs	r2, #1
 8000de8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dea:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_8;
 8000dec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df0:	f002 fdf2 	bl	80039d8 <HAL_ADC_ConfigChannel>
 8000df4:	b108      	cbz	r0, 8000dfa <main+0x17a>
 8000df6:	b672      	cpsid	i
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <main+0x178>
  sConfig.Offset = 0;
 8000dfa:	9011      	str	r0, [sp, #68]	; 0x44
  sConfig.Channel = ADC_CHANNEL_9;
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e00:	4620      	mov	r0, r4
 8000e02:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 8000e04:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	f002 fde6 	bl	80039d8 <HAL_ADC_ConfigChannel>
 8000e0c:	4683      	mov	fp, r0
 8000e0e:	b108      	cbz	r0, 8000e14 <main+0x194>
 8000e10:	b672      	cpsid	i
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <main+0x192>
  hadc2.Instance = ADC2;
 8000e14:	4c49      	ldr	r4, [pc, #292]	; (8000f3c <main+0x2bc>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e16:	4601      	mov	r1, r0
 8000e18:	2220      	movs	r2, #32
 8000e1a:	a816      	add	r0, sp, #88	; 0x58
 8000e1c:	f006 fa41 	bl	80072a2 <memset>
  hadc2.Instance = ADC2;
 8000e20:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <main+0x2c0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e22:	6066      	str	r6, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e24:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e28:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	e9cd bb0e 	strd	fp, fp, [sp, #56]	; 0x38
 8000e2e:	e9cd bb10 	strd	fp, fp, [sp, #64]	; 0x40
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e32:	60e5      	str	r5, [r4, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e34:	f8c4 b008 	str.w	fp, [r4, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000e38:	f8c4 a010 	str.w	sl, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e3c:	f884 b018 	strb.w	fp, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e40:	f884 b020 	strb.w	fp, [r4, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e44:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
  hadc2.Init.NbrOfConversion = 1;
 8000e48:	f8c4 a01c 	str.w	sl, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4c:	f8c4 a014 	str.w	sl, [r4, #20]
  hadc2.Instance = ADC2;
 8000e50:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e52:	f002 fd13 	bl	800387c <HAL_ADC_Init>
 8000e56:	b108      	cbz	r0, 8000e5c <main+0x1dc>
 8000e58:	b672      	cpsid	i
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <main+0x1da>
  sConfigInjected.InjectedOffset = 0;
 8000e5c:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e66:	a916      	add	r1, sp, #88	; 0x58
 8000e68:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000e6a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e6e:	9716      	str	r7, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e70:	971a      	str	r7, [sp, #104]	; 0x68
  sConfigInjected.InjectedRank = 1;
 8000e72:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8000e76:	f8ad a06c 	strh.w	sl, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e7a:	f002 fe5b 	bl	8003b34 <HAL_ADCEx_InjectedConfigChannel>
 8000e7e:	b108      	cbz	r0, 8000e84 <main+0x204>
 8000e80:	b672      	cpsid	i
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <main+0x202>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000e84:	2204      	movs	r2, #4
 8000e86:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e88:	a916      	add	r1, sp, #88	; 0x58
 8000e8a:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000e8c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e90:	f002 fe50 	bl	8003b34 <HAL_ADCEx_InjectedConfigChannel>
 8000e94:	b108      	cbz	r0, 8000e9a <main+0x21a>
 8000e96:	b672      	cpsid	i
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <main+0x218>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e9a:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	2403      	movs	r4, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ea0:	a916      	add	r1, sp, #88	; 0x58
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000ea2:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ea6:	f002 fe45 	bl	8003b34 <HAL_ADCEx_InjectedConfigChannel>
 8000eaa:	b108      	cbz	r0, 8000eb0 <main+0x230>
 8000eac:	b672      	cpsid	i
  while (1)
 8000eae:	e7fe      	b.n	8000eae <main+0x22e>
  sConfig.Channel = ADC_CHANNEL_3;
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000eb8:	4820      	ldr	r0, [pc, #128]	; (8000f3c <main+0x2bc>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eba:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ebc:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ebe:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ec0:	f002 fd8a 	bl	80039d8 <HAL_ADC_ConfigChannel>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	b108      	cbz	r0, 8000ecc <main+0x24c>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x24a>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ecc:	2620      	movs	r6, #32
  htim1.Instance = TIM1;
 8000ece:	4d1d      	ldr	r5, [pc, #116]	; (8000f44 <main+0x2c4>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ed0:	9008      	str	r0, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8000ed6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8000eda:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ede:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8000ee2:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee8:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eec:	4601      	mov	r1, r0
 8000eee:	4632      	mov	r2, r6
 8000ef0:	a816      	add	r0, sp, #88	; 0x58
 8000ef2:	f006 f9d6 	bl	80072a2 <memset>
  htim1.Instance = TIM1;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <main+0x2c8>)
 8000ef8:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000efa:	f241 4082 	movw	r0, #5250	; 0x1482
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	e9c5 0303 	strd	r0, r3, [r5, #12]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000f06:	2301      	movs	r3, #1
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f08:	4628      	mov	r0, r5
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000f0a:	e9c5 4601 	strd	r4, r6, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000f10:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f12:	f003 fc0d 	bl	8004730 <HAL_TIM_Base_Init>
 8000f16:	b1c8      	cbz	r0, 8000f4c <main+0x2cc>
 8000f18:	b672      	cpsid	i
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <main+0x29a>
 8000f1c:	2000053c 	.word	0x2000053c
 8000f20:	08007cd8 	.word	0x08007cd8
 8000f24:	40023800 	.word	0x40023800
 8000f28:	0f000001 	.word	0x0f000001
 8000f2c:	40021800 	.word	0x40021800
 8000f30:	10210000 	.word	0x10210000
 8000f34:	200005c0 	.word	0x200005c0
 8000f38:	40012000 	.word	0x40012000
 8000f3c:	20000608 	.word	0x20000608
 8000f40:	40012100 	.word	0x40012100
 8000f44:	20000710 	.word	0x20000710
 8000f48:	40010000 	.word	0x40010000
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f003 fc6d 	bl	800482c <HAL_TIM_PWM_Init>
 8000f52:	b108      	cbz	r0, 8000f58 <main+0x2d8>
 8000f54:	b672      	cpsid	i
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <main+0x2d6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f58:	2206      	movs	r2, #6
 8000f5a:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f5c:	a908      	add	r1, sp, #32
 8000f5e:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f60:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f64:	f003 fe8a 	bl	8004c7c <HAL_TIM_SlaveConfigSynchro>
 8000f68:	b108      	cbz	r0, 8000f6e <main+0x2ee>
 8000f6a:	b672      	cpsid	i
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0x2ec>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f6e:	a906      	add	r1, sp, #24
 8000f70:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f72:	2600      	movs	r6, #0
 8000f74:	2700      	movs	r7, #0
 8000f76:	e9cd 6706 	strd	r6, r7, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f7a:	f004 f831 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	b108      	cbz	r0, 8000f86 <main+0x306>
 8000f82:	b672      	cpsid	i
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <main+0x304>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f86:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f88:	f04f 0860 	mov.w	r8, #96	; 0x60
 8000f8c:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f90:	a90e      	add	r1, sp, #56	; 0x38
 8000f92:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f94:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8000f98:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8000f9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa0:	f003 fcc0 	bl	8004924 <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	b108      	cbz	r0, 8000faa <main+0x32a>
 8000fa6:	b672      	cpsid	i
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <main+0x328>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000faa:	2204      	movs	r2, #4
 8000fac:	a90e      	add	r1, sp, #56	; 0x38
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f003 fcb8 	bl	8004924 <HAL_TIM_PWM_ConfigChannel>
 8000fb4:	b108      	cbz	r0, 8000fba <main+0x33a>
 8000fb6:	b672      	cpsid	i
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <main+0x338>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fba:	2208      	movs	r2, #8
 8000fbc:	a90e      	add	r1, sp, #56	; 0x38
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	f003 fcb0 	bl	8004924 <HAL_TIM_PWM_ConfigChannel>
 8000fc4:	b108      	cbz	r0, 8000fca <main+0x34a>
 8000fc6:	b672      	cpsid	i
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <main+0x348>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	a90e      	add	r1, sp, #56	; 0x38
 8000fce:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000fd0:	f04f 0870 	mov.w	r8, #112	; 0x70
 8000fd4:	f241 4981 	movw	r9, #5249	; 0x1481
 8000fd8:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fdc:	f003 fca2 	bl	8004924 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b108      	cbz	r0, 8000fe8 <main+0x368>
 8000fe4:	b672      	cpsid	i
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <main+0x366>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fec:	931d      	str	r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff6:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffc:	2308      	movs	r3, #8
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ffe:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001000:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8001004:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001008:	f004 f82a 	bl	8005060 <HAL_TIMEx_ConfigBreakDeadTime>
 800100c:	b108      	cbz	r0, 8001012 <main+0x392>
 800100e:	b672      	cpsid	i
  while (1)
 8001010:	e7fe      	b.n	8001010 <main+0x390>
  htim3.Instance = TIM3;
 8001012:	4c48      	ldr	r4, [pc, #288]	; (8001134 <main+0x4b4>)
  HAL_TIM_MspPostInit(&htim1);
 8001014:	4848      	ldr	r0, [pc, #288]	; (8001138 <main+0x4b8>)
 8001016:	f002 f94d 	bl	80032b4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	2300      	movs	r3, #0
 800101c:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8001020:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001024:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8001028:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	61a3      	str	r3, [r4, #24]
  htim3.Instance = TIM3;
 8001038:	4b40      	ldr	r3, [pc, #256]	; (800113c <main+0x4bc>)
 800103a:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800103c:	4620      	mov	r0, r4
  htim3.Init.Period = M1_HALL_TIM_PERIOD;
 800103e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001042:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001044:	f003 fb74 	bl	8004730 <HAL_TIM_Base_Init>
 8001048:	b108      	cbz	r0, 800104e <main+0x3ce>
 800104a:	b672      	cpsid	i
  while (1)
 800104c:	e7fe      	b.n	800104c <main+0x3cc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001052:	a916      	add	r1, sp, #88	; 0x58
 8001054:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001056:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001058:	f003 fd6c 	bl	8004b34 <HAL_TIM_ConfigClockSource>
 800105c:	b108      	cbz	r0, 8001062 <main+0x3e2>
 800105e:	b672      	cpsid	i
  while (1)
 8001060:	e7fe      	b.n	8001060 <main+0x3e0>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001062:	2200      	movs	r2, #0
 8001064:	2300      	movs	r3, #0
 8001066:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800106a:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800106c:	220b      	movs	r2, #11
 800106e:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001070:	4620      	mov	r0, r4
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001072:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001076:	f003 ff59 	bl	8004f2c <HAL_TIMEx_HallSensor_Init>
 800107a:	b108      	cbz	r0, 8001080 <main+0x400>
 800107c:	b672      	cpsid	i
  while (1)
 800107e:	e7fe      	b.n	800107e <main+0x3fe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001080:	2300      	movs	r3, #0
 8001082:	2250      	movs	r2, #80	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001084:	a908      	add	r1, sp, #32
 8001086:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001088:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108c:	f003 ffa8 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001090:	4603      	mov	r3, r0
 8001092:	b108      	cbz	r0, 8001098 <main+0x418>
 8001094:	b672      	cpsid	i
  while (1)
 8001096:	e7fe      	b.n	8001096 <main+0x416>
  huart1.Instance = USART1;
 8001098:	4829      	ldr	r0, [pc, #164]	; (8001140 <main+0x4c0>)
 800109a:	4c2a      	ldr	r4, [pc, #168]	; (8001144 <main+0x4c4>)
  huart1.Init.BaudRate = 115200;
 800109c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a0:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80010a2:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010aa:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ae:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b2:	f003 ffff 	bl	80050b4 <HAL_UART_Init>
 80010b6:	4604      	mov	r4, r0
 80010b8:	b108      	cbz	r0, 80010be <main+0x43e>
 80010ba:	b672      	cpsid	i
  while (1)
 80010bc:	e7fe      	b.n	80010bc <main+0x43c>
  MX_MotorControl_Init();
 80010be:	f000 fe01 	bl	8001cc4 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 80010c2:	4622      	mov	r2, r4
 80010c4:	2102      	movs	r1, #2
 80010c6:	2012      	movs	r0, #18
 80010c8:	f002 fe1e 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010cc:	2012      	movs	r0, #18
 80010ce:	f002 fe59 	bl	8003d84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010d2:	4622      	mov	r2, r4
 80010d4:	4621      	mov	r1, r4
 80010d6:	2019      	movs	r0, #25
 80010d8:	f002 fe16 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010dc:	2019      	movs	r0, #25
 80010de:	f002 fe51 	bl	8003d84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 80010e2:	2104      	movs	r1, #4
 80010e4:	2201      	movs	r2, #1
 80010e6:	2018      	movs	r0, #24
 80010e8:	f002 fe0e 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80010ec:	2018      	movs	r0, #24
 80010ee:	f002 fe49 	bl	8003d84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80010f2:	4622      	mov	r2, r4
 80010f4:	2103      	movs	r1, #3
 80010f6:	201d      	movs	r0, #29
 80010f8:	f002 fe06 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010fc:	201d      	movs	r0, #29
 80010fe:	f002 fe41 	bl	8003d84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 8001102:	2103      	movs	r1, #3
 8001104:	2201      	movs	r2, #1
 8001106:	2025      	movs	r0, #37	; 0x25
 8001108:	f002 fdfe 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800110c:	2025      	movs	r0, #37	; 0x25
 800110e:	f002 fe39 	bl	8003d84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 8001112:	4622      	mov	r2, r4
 8001114:	2103      	movs	r1, #3
 8001116:	2008      	movs	r0, #8
 8001118:	f002 fdf6 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800111c:	2008      	movs	r0, #8
 800111e:	f002 fe31 	bl	8003d84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001122:	203a      	movs	r0, #58	; 0x3a
 8001124:	4622      	mov	r2, r4
 8001126:	4621      	mov	r1, r4
 8001128:	f002 fdee 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800112c:	203a      	movs	r0, #58	; 0x3a
 800112e:	f002 fe29 	bl	8003d84 <HAL_NVIC_EnableIRQ>
  while (1)
 8001132:	e7fe      	b.n	8001132 <main+0x4b2>
 8001134:	20000750 	.word	0x20000750
 8001138:	20000710 	.word	0x20000710
 800113c:	40000400 	.word	0x40000400
 8001140:	20000790 	.word	0x20000790
 8001144:	40011000 	.word	0x40011000

08001148 <Error_Handler>:
 8001148:	b672      	cpsid	i
  while (1)
 800114a:	e7fe      	b.n	800114a <Error_Handler+0x2>

0800114c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 800114c:	4b01      	ldr	r3, [pc, #4]	; (8001154 <MC_StartMotor1+0x8>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	f000 b83a 	b.w	80011c8 <MCI_StartMotor>
 8001154:	20001ad0 	.word	0x20001ad0

08001158 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001158:	4b01      	ldr	r3, [pc, #4]	; (8001160 <MC_StopMotor1+0x8>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	f000 b83e 	b.w	80011dc <MCI_StopMotor>
 8001160:	20001ad0 	.word	0x20001ad0

08001164 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <MC_GetSTMStateMotor1+0x8>)
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	f000 b880 	b.w	800126c <MCI_GetSTMState>
 800116c:	20001ad0 	.word	0x20001ad0

08001170 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001170:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8001174:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8001178:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800117a:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 800117e:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8001182:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001186:	f880 c018 	strb.w	ip, [r0, #24]
}
 800118a:	4770      	bx	lr

0800118c <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800118c:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001190:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001194:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001198:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 800119a:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800119c:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 800119e:	4770      	bx	lr

080011a0 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80011a0:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011a4:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80011a6:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 80011aa:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 80011ac:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011ae:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 80011b4:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80011b6:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011b8:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80011ba:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 80011bc:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011c0:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80011c2:	b002      	add	sp, #8
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80011c8:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80011ca:	2103      	movs	r1, #3
{
 80011cc:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80011ce:	6800      	ldr	r0, [r0, #0]
 80011d0:	f005 ff36 	bl	8007040 <STM_NextState>

  if ( RetVal == true )
 80011d4:	b108      	cbz	r0, 80011da <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011d6:	2301      	movs	r3, #1
 80011d8:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80011da:	bd10      	pop	{r4, pc}

080011dc <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80011dc:	6800      	ldr	r0, [r0, #0]
 80011de:	2107      	movs	r1, #7
 80011e0:	f005 bf2e 	b.w	8007040 <STM_NextState>

080011e4 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80011e4:	6800      	ldr	r0, [r0, #0]
 80011e6:	f005 bfa1 	b.w	800712c <STM_FaultAcknowledged>
 80011ea:	bf00      	nop

080011ec <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80011ec:	6800      	ldr	r0, [r0, #0]
 80011ee:	2101      	movs	r1, #1
 80011f0:	f005 bf26 	b.w	8007040 <STM_NextState>

080011f4 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80011f4:	b178      	cbz	r0, 8001216 <MCI_ExecBufferedCommands+0x22>
{
 80011f6:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80011f8:	7e03      	ldrb	r3, [r0, #24]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	4604      	mov	r4, r0
 80011fe:	d000      	beq.n	8001202 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8001200:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8001202:	7b01      	ldrb	r1, [r0, #12]
 8001204:	2902      	cmp	r1, #2
 8001206:	d020      	beq.n	800124a <MCI_ExecBufferedCommands+0x56>
 8001208:	2903      	cmp	r1, #3
 800120a:	d005      	beq.n	8001218 <MCI_ExecBufferedCommands+0x24>
 800120c:	2901      	cmp	r1, #1
 800120e:	d00c      	beq.n	800122a <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001210:	2303      	movs	r3, #3
 8001212:	7623      	strb	r3, [r4, #24]
}
 8001214:	bd10      	pop	{r4, pc}
 8001216:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001218:	6882      	ldr	r2, [r0, #8]
 800121a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800121e:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001222:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001224:	2302      	movs	r3, #2
 8001226:	7623      	strb	r3, [r4, #24]
}
 8001228:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800122a:	6883      	ldr	r3, [r0, #8]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001232:	6840      	ldr	r0, [r0, #4]
 8001234:	f005 fe40 	bl	8006eb8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001238:	8ae2      	ldrh	r2, [r4, #22]
 800123a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800123e:	6860      	ldr	r0, [r4, #4]
 8001240:	f005 fe3e 	bl	8006ec0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001244:	2800      	cmp	r0, #0
 8001246:	d0e3      	beq.n	8001210 <MCI_ExecBufferedCommands+0x1c>
 8001248:	e7ec      	b.n	8001224 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800124a:	6883      	ldr	r3, [r0, #8]
 800124c:	2100      	movs	r1, #0
 800124e:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001252:	6840      	ldr	r0, [r0, #4]
 8001254:	f005 fe30 	bl	8006eb8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001258:	8ae2      	ldrh	r2, [r4, #22]
 800125a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800125e:	6860      	ldr	r0, [r4, #4]
 8001260:	f005 fe2e 	bl	8006ec0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001264:	2800      	cmp	r0, #0
 8001266:	d0d3      	beq.n	8001210 <MCI_ExecBufferedCommands+0x1c>
 8001268:	e7dc      	b.n	8001224 <MCI_ExecBufferedCommands+0x30>
 800126a:	bf00      	nop

0800126c <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 800126c:	6800      	ldr	r0, [r0, #0]
 800126e:	f005 bf5b 	b.w	8007128 <STM_GetState>
 8001272:	bf00      	nop

08001274 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001274:	7e40      	ldrb	r0, [r0, #25]
 8001276:	4770      	bx	lr

08001278 <MCI_GetLastRampFinalSpeed>:
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
 {
   return  pHandle->hFinalSpeed;
 }
 8001278:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <MCI_GetLastRampFinalTorque>:
  * @retval int16_t last ramp final torque sent by the user expressed in digit
  */
__weak int16_t MCI_GetLastRampFinalTorque( MCI_Handle_t * pHandle )
{
    return pHandle->hFinalTorque;
}
 8001280:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <MCI_GetLastRampFinalDuration>:
  * @retval uint16_t last ramp final torque sent by the user expressed in digit
  */
__weak uint16_t MCI_GetLastRampFinalDuration( MCI_Handle_t * pHandle )
{
    return pHandle->hDurationms;
}
 8001288:	8ac0      	ldrh	r0, [r0, #22]
 800128a:	4770      	bx	lr

0800128c <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 800128c:	6840      	ldr	r0, [r0, #4]
 800128e:	f005 be5f 	b.w	8006f50 <STC_StopRamp>
 8001292:	bf00      	nop

08001294 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8001294:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001296:	6840      	ldr	r0, [r0, #4]
 8001298:	f005 fdf4 	bl	8006e84 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 800129c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80012a0:	f005 bd92 	b.w	8006dc8 <SPD_GetAvrgMecSpeedUnit>

080012a4 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80012a4:	6840      	ldr	r0, [r0, #4]
 80012a6:	f005 bdf7 	b.w	8006e98 <STC_GetMecSpeedRefUnit>
 80012aa:	bf00      	nop

080012ac <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 80012ac:	6882      	ldr	r2, [r0, #8]
 80012ae:	6810      	ldr	r0, [r2, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	b282      	uxth	r2, r0
 80012b4:	f362 030f 	bfi	r3, r2, #0, #16
 80012b8:	0c00      	lsrs	r0, r0, #16
 80012ba:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012be:	b082      	sub	sp, #8
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	b002      	add	sp, #8
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 80012c8:	6882      	ldr	r2, [r0, #8]
 80012ca:	6850      	ldr	r0, [r2, #4]
 80012cc:	2300      	movs	r3, #0
 80012ce:	b282      	uxth	r2, r0
 80012d0:	f362 030f 	bfi	r3, r2, #0, #16
 80012d4:	0c00      	lsrs	r0, r0, #16
 80012d6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012da:	b082      	sub	sp, #8
}
 80012dc:	4618      	mov	r0, r3
 80012de:	b002      	add	sp, #8
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80012e4:	6882      	ldr	r2, [r0, #8]
 80012e6:	68d0      	ldr	r0, [r2, #12]
 80012e8:	2300      	movs	r3, #0
 80012ea:	b282      	uxth	r2, r0
 80012ec:	f362 030f 	bfi	r3, r2, #0, #16
 80012f0:	0c00      	lsrs	r0, r0, #16
 80012f2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012f6:	b082      	sub	sp, #8
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	b002      	add	sp, #8
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8001300:	6882      	ldr	r2, [r0, #8]
 8001302:	6910      	ldr	r0, [r2, #16]
 8001304:	2300      	movs	r3, #0
 8001306:	b282      	uxth	r2, r0
 8001308:	f362 030f 	bfi	r3, r2, #0, #16
 800130c:	0c00      	lsrs	r0, r0, #16
 800130e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001312:	b082      	sub	sp, #8
}
 8001314:	4618      	mov	r0, r3
 8001316:	b002      	add	sp, #8
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 800131c:	6882      	ldr	r2, [r0, #8]
 800131e:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001322:	2300      	movs	r3, #0
 8001324:	b282      	uxth	r2, r0
 8001326:	f362 030f 	bfi	r3, r2, #0, #16
 800132a:	0c00      	lsrs	r0, r0, #16
 800132c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001330:	b082      	sub	sp, #8
}
 8001332:	4618      	mov	r0, r3
 8001334:	b002      	add	sp, #8
 8001336:	4770      	bx	lr

08001338 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001338:	6882      	ldr	r2, [r0, #8]
 800133a:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800133e:	2300      	movs	r3, #0
 8001340:	b282      	uxth	r2, r0
 8001342:	f362 030f 	bfi	r3, r2, #0, #16
 8001346:	0c00      	lsrs	r0, r0, #16
 8001348:	f360 431f 	bfi	r3, r0, #16, #16
{
 800134c:	b082      	sub	sp, #8
}
 800134e:	4618      	mov	r0, r3
 8001350:	b002      	add	sp, #8
 8001352:	4770      	bx	lr

08001354 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8001354:	6883      	ldr	r3, [r0, #8]
}
 8001356:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800135a:	4770      	bx	lr

0800135c <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 800135c:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 800135e:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8001362:	f005 fe2f 	bl	8006fc4 <STC_GetDefaultIqdref>
 8001366:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800136a:	8220      	strh	r0, [r4, #16]
 800136c:	8263      	strh	r3, [r4, #18]
}
 800136e:	bd10      	pop	{r4, pc}

08001370 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001370:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001374:	b203      	sxth	r3, r0
{
 8001376:	f3c0 420f 	ubfx	r2, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 800137a:	fb13 f001 	smulbb	r0, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800137e:	fb12 f201 	smulbb	r2, r2, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001382:	4240      	negs	r0, r0
 8001384:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001388:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800138c:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 800138e:	da05      	bge.n	800139c <MCM_Clarke+0x2c>
 8001390:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001392:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001396:	da0c      	bge.n	80013b2 <MCM_Clarke+0x42>
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <MCM_Clarke+0x50>)
 800139a:	e001      	b.n	80013a0 <MCM_Clarke+0x30>
 800139c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2000      	movs	r0, #0
 80013a4:	f363 000f 	bfi	r0, r3, #0, #16
 80013a8:	b293      	uxth	r3, r2
 80013aa:	f363 401f 	bfi	r0, r3, #16, #16
}
 80013ae:	b004      	add	sp, #16
 80013b0:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <MCM_Clarke+0x50>)
 80013b4:	b20a      	sxth	r2, r1
 80013b6:	4282      	cmp	r2, r0
 80013b8:	bfb8      	it	lt
 80013ba:	4602      	movlt	r2, r0
 80013bc:	e7f0      	b.n	80013a0 <MCM_Clarke+0x30>
 80013be:	bf00      	nop
 80013c0:	ffff8001 	.word	0xffff8001

080013c4 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 80013c4:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 80013c8:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80013cc:	f400 7140 	and.w	r1, r0, #768	; 0x300
 80013d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 80013d4:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80013d6:	d028      	beq.n	800142a <MCM_Trig_Functions+0x66>
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	461a      	mov	r2, r3
 80013de:	d816      	bhi.n	800140e <MCM_Trig_Functions+0x4a>
 80013e0:	b361      	cbz	r1, 800143c <MCM_Trig_Functions+0x78>
 80013e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80013e6:	d109      	bne.n	80013fc <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013e8:	b2c0      	uxtb	r0, r0
 80013ea:	43c2      	mvns	r2, r0
 80013ec:	491a      	ldr	r1, [pc, #104]	; (8001458 <MCM_Trig_Functions+0x94>)
 80013ee:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80013f0:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013f4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013f8:	4252      	negs	r2, r2
 80013fa:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	2000      	movs	r0, #0
 8001400:	f363 000f 	bfi	r0, r3, #0, #16
 8001404:	b292      	uxth	r2, r2
 8001406:	f362 401f 	bfi	r0, r2, #16, #16
}
 800140a:	b002      	add	sp, #8
 800140c:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800140e:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8001412:	d1f3      	bne.n	80013fc <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001414:	4910      	ldr	r1, [pc, #64]	; (8001458 <MCM_Trig_Functions+0x94>)
 8001416:	b2c0      	uxtb	r0, r0
 8001418:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800141a:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800141e:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001420:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001422:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001426:	b21b      	sxth	r3, r3
      break;
 8001428:	e7e8      	b.n	80013fc <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800142a:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800142c:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800142e:	490a      	ldr	r1, [pc, #40]	; (8001458 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001430:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001432:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001436:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 800143a:	e7df      	b.n	80013fc <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800143c:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800143e:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001440:	4905      	ldr	r1, [pc, #20]	; (8001458 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001442:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001444:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001448:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800144c:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800144e:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001450:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001452:	b21b      	sxth	r3, r3
      break;
 8001454:	e7d2      	b.n	80013fc <MCM_Trig_Functions+0x38>
 8001456:	bf00      	nop
 8001458:	08007d94 	.word	0x08007d94

0800145c <MCM_Park>:
{
 800145c:	b530      	push	{r4, r5, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	4603      	mov	r3, r0
 8001462:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001464:	4608      	mov	r0, r1
 8001466:	141c      	asrs	r4, r3, #16
{
 8001468:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800146a:	f7ff ffab 	bl	80013c4 <MCM_Trig_Functions>
 800146e:	b22d      	sxth	r5, r5
 8001470:	fa0f fc80 	sxth.w	ip, r0
 8001474:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001476:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 800147a:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 800147e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8001482:	da05      	bge.n	8001490 <MCM_Park+0x34>
 8001484:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8001486:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800148a:	da22      	bge.n	80014d2 <MCM_Park+0x76>
 800148c:	4914      	ldr	r1, [pc, #80]	; (80014e0 <MCM_Park+0x84>)
 800148e:	e001      	b.n	8001494 <MCM_Park+0x38>
 8001490:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001494:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001498:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 800149c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80014a0:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 80014a4:	da04      	bge.n	80014b0 <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 80014a6:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80014aa:	da0c      	bge.n	80014c6 <MCM_Park+0x6a>
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MCM_Park+0x84>)
 80014ae:	e001      	b.n	80014b4 <MCM_Park+0x58>
 80014b0:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 80014b4:	b28a      	uxth	r2, r1
 80014b6:	2000      	movs	r0, #0
 80014b8:	f362 000f 	bfi	r0, r2, #0, #16
 80014bc:	b29b      	uxth	r3, r3
 80014be:	f363 401f 	bfi	r0, r3, #16, #16
}
 80014c2:	b005      	add	sp, #20
 80014c4:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MCM_Park+0x84>)
 80014c8:	b213      	sxth	r3, r2
 80014ca:	4283      	cmp	r3, r0
 80014cc:	bfb8      	it	lt
 80014ce:	4603      	movlt	r3, r0
 80014d0:	e7f0      	b.n	80014b4 <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 80014d2:	4903      	ldr	r1, [pc, #12]	; (80014e0 <MCM_Park+0x84>)
 80014d4:	b212      	sxth	r2, r2
 80014d6:	4291      	cmp	r1, r2
 80014d8:	bfb8      	it	lt
 80014da:	4611      	movlt	r1, r2
 80014dc:	e7da      	b.n	8001494 <MCM_Park+0x38>
 80014de:	bf00      	nop
 80014e0:	ffff8001 	.word	0xffff8001

080014e4 <MCM_Rev_Park>:
{
 80014e4:	b530      	push	{r4, r5, lr}
 80014e6:	b085      	sub	sp, #20
 80014e8:	4604      	mov	r4, r0
 80014ea:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80014ec:	4608      	mov	r0, r1
{
 80014ee:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80014f0:	f7ff ff68 	bl	80013c4 <MCM_Trig_Functions>
 80014f4:	1424      	asrs	r4, r4, #16
 80014f6:	1402      	asrs	r2, r0, #16
 80014f8:	b22d      	sxth	r5, r5
 80014fa:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 80014fc:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001500:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001504:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001508:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 800150c:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001510:	2000      	movs	r0, #0
 8001512:	f363 000f 	bfi	r0, r3, #0, #16
 8001516:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 800151a:	f364 401f 	bfi	r0, r4, #16, #16
}
 800151e:	b005      	add	sp, #20
 8001520:	bd30      	pop	{r4, r5, pc}
 8001522:	bf00      	nop

08001524 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8001524:	1e03      	subs	r3, r0, #0
 8001526:	dd32      	ble.n	800158e <MCM_Sqrt+0x6a>
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 8001528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800152c:	bfd4      	ite	le
 800152e:	2080      	movle	r0, #128	; 0x80
 8001530:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001534:	fb93 f2f0 	sdiv	r2, r3, r0
 8001538:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800153a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800153e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001542:	d025      	beq.n	8001590 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001544:	fb93 f2f1 	sdiv	r2, r3, r1
 8001548:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800154a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800154e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001552:	d01d      	beq.n	8001590 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001554:	fb93 f2f0 	sdiv	r2, r3, r0
 8001558:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800155a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800155e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001562:	d015      	beq.n	8001590 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001564:	fb93 f2f1 	sdiv	r2, r3, r1
 8001568:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800156a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800156e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001572:	d00d      	beq.n	8001590 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001574:	fb93 f2f0 	sdiv	r2, r3, r0
 8001578:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800157a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800157e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001582:	d005      	beq.n	8001590 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001584:	fb93 f0f1 	sdiv	r0, r3, r1
 8001588:	4408      	add	r0, r1
 800158a:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 800158c:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 800158e:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop

08001594 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001594:	2226      	movs	r2, #38	; 0x26
{
 8001596:	b538      	push	{r3, r4, r5, lr}
 8001598:	fb00 f202 	mul.w	r2, r0, r2
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 800159e:	2400      	movs	r4, #0
 80015a0:	509c      	str	r4, [r3, r2]
{
 80015a2:	4605      	mov	r5, r0
 80015a4:	f102 0108 	add.w	r1, r2, #8
 80015a8:	1898      	adds	r0, r3, r2
 80015aa:	3210      	adds	r2, #16
 80015ac:	4419      	add	r1, r3
 80015ae:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80015b0:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 80015b2:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80015b4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 80015b8:	604c      	str	r4, [r1, #4]
 80015ba:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 80015bc:	f8c3 4006 	str.w	r4, [r3, #6]
 80015c0:	f8c3 400a 	str.w	r4, [r3, #10]
 80015c4:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80015c8:	4621      	mov	r1, r4
 80015ca:	f004 fd37 	bl	800603c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <FOC_Clear+0x68>)
 80015d0:	4621      	mov	r1, r4
 80015d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80015d6:	f004 fd31 	bl	800603c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <FOC_Clear+0x6c>)
 80015dc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80015e0:	f005 fc52 	bl	8006e88 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <FOC_Clear+0x70>)
 80015e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80015ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80015ee:	f000 bcc3 	b.w	8001f78 <PWMC_SwitchOffPWM>
 80015f2:	bf00      	nop
 80015f4:	20000808 	.word	0x20000808
 80015f8:	20000448 	.word	0x20000448
 80015fc:	20000444 	.word	0x20000444
 8001600:	2000044c 	.word	0x2000044c
 8001604:	20000840 	.word	0x20000840

08001608 <MCboot>:
{
 8001608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 800160c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80016dc <MCboot+0xd4>
  bMCBootCompleted = 0;
 8001610:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80016e0 <MCboot+0xd8>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001614:	4d33      	ldr	r5, [pc, #204]	; (80016e4 <MCboot+0xdc>)
  HALL_Init (&HALL_M1);
 8001616:	4f34      	ldr	r7, [pc, #208]	; (80016e8 <MCboot+0xe0>)
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001618:	4c34      	ldr	r4, [pc, #208]	; (80016ec <MCboot+0xe4>)
{
 800161a:	b083      	sub	sp, #12
 800161c:	4606      	mov	r6, r0
  STM_Init(&STM[M1]);
 800161e:	4658      	mov	r0, fp
 8001620:	f005 fce6 	bl	8006ff0 <STM_Init>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001624:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <MCboot+0xe8>)
  pCLM[M1] = &CircleLimitationM1;
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <MCboot+0xec>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001628:	4833      	ldr	r0, [pc, #204]	; (80016f8 <MCboot+0xf0>)
 800162a:	6010      	str	r0, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 800162c:	4a33      	ldr	r2, [pc, #204]	; (80016fc <MCboot+0xf4>)
 800162e:	601a      	str	r2, [r3, #0]
  bMCBootCompleted = 0;
 8001630:	f04f 0800 	mov.w	r8, #0
 8001634:	f889 8000 	strb.w	r8, [r9]
  R3_2_Init(&PWM_Handle_M1);
 8001638:	f005 f87a 	bl	8006730 <R3_2_Init>
  ASPEP_start (&aspepOverUartA);
 800163c:	4830      	ldr	r0, [pc, #192]	; (8001700 <MCboot+0xf8>)
 800163e:	f7fe ff6f 	bl	8000520 <ASPEP_start>
  startTimers();
 8001642:	f004 fdb1 	bl	80061a8 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001646:	4628      	mov	r0, r5
 8001648:	f004 fce4 	bl	8006014 <PID_HandleInit>
  HALL_Init (&HALL_M1);
 800164c:	4638      	mov	r0, r7
 800164e:	f003 fe1f 	bl	8005290 <HALL_Init>
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001652:	463a      	mov	r2, r7
 8001654:	4629      	mov	r1, r5
 8001656:	6820      	ldr	r0, [r4, #0]
  RVBS_Init(&BusVoltageSensor_M1);
 8001658:	4d2a      	ldr	r5, [pc, #168]	; (8001704 <MCboot+0xfc>)
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800165a:	4f2b      	ldr	r7, [pc, #172]	; (8001708 <MCboot+0x100>)
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 800165c:	f005 fbfc 	bl	8006e58 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8001660:	482a      	ldr	r0, [pc, #168]	; (800170c <MCboot+0x104>)
 8001662:	f004 fcd7 	bl	8006014 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001666:	482a      	ldr	r0, [pc, #168]	; (8001710 <MCboot+0x108>)
 8001668:	f004 fcd4 	bl	8006014 <PID_HandleInit>
  RVBS_Init(&BusVoltageSensor_M1);
 800166c:	4628      	mov	r0, r5
 800166e:	f005 fb51 	bl	8006d14 <RVBS_Init>
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MCboot+0x10c>)
  NTC_Init(&TempSensor_M1);
 8001674:	4828      	ldr	r0, [pc, #160]	; (8001718 <MCboot+0x110>)
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800167c:	4d27      	ldr	r5, [pc, #156]	; (800171c <MCboot+0x114>)
 800167e:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
  NTC_Init(&TempSensor_M1);
 8001682:	f004 fc83 	bl	8005f8c <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <MCboot+0x118>)
 8001688:	4826      	ldr	r0, [pc, #152]	; (8001724 <MCboot+0x11c>)
 800168a:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 800168c:	f005 fb90 	bl	8006db0 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001690:	f04f 0a01 	mov.w	sl, #1
  FOC_Clear(M1);
 8001694:	4640      	mov	r0, r8
 8001696:	f7ff ff7d 	bl	8001594 <FOC_Clear>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800169a:	6820      	ldr	r0, [r4, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 800169c:	f885 a024 	strb.w	sl, [r5, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80016a0:	f005 fc90 	bl	8006fc4 <STC_GetDefaultIqdref>
 80016a4:	6128      	str	r0, [r5, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80016a6:	6820      	ldr	r0, [r4, #0]
 80016a8:	f005 fc8c 	bl	8006fc4 <STC_GetDefaultIqdref>
 80016ac:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80016b0:	6822      	ldr	r2, [r4, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80016b2:	82a8      	strh	r0, [r5, #20]
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80016b4:	462b      	mov	r3, r5
 80016b6:	4659      	mov	r1, fp
 80016b8:	4638      	mov	r0, r7
 80016ba:	f7ff fd59 	bl	8001170 <MCI_Init>
  MCI_ExecSpeedRamp(&Mci[M1],
 80016be:	6820      	ldr	r0, [r4, #0]
 80016c0:	f005 fc7c 	bl	8006fbc <STC_GetMecSpeedRefUnitDefault>
 80016c4:	4642      	mov	r2, r8
 80016c6:	4601      	mov	r1, r0
 80016c8:	4638      	mov	r0, r7
 80016ca:	f7ff fd5f 	bl	800118c <MCI_ExecSpeedRamp>
  pMCIList[M1] = &Mci[M1];
 80016ce:	6037      	str	r7, [r6, #0]
  bMCBootCompleted = 1;
 80016d0:	f889 a000 	strb.w	sl, [r9]
}
 80016d4:	b003      	add	sp, #12
 80016d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016da:	bf00      	nop
 80016dc:	20000800 	.word	0x20000800
 80016e0:	2000082e 	.word	0x2000082e
 80016e4:	200001fc 	.word	0x200001fc
 80016e8:	200000dc 	.word	0x200000dc
 80016ec:	2000044c 	.word	0x2000044c
 80016f0:	20000840 	.word	0x20000840
 80016f4:	20000838 	.word	0x20000838
 80016f8:	2000033c 	.word	0x2000033c
 80016fc:	20000028 	.word	0x20000028
 8001700:	200004b4 	.word	0x200004b4
 8001704:	20000000 	.word	0x20000000
 8001708:	200007d0 	.word	0x200007d0
 800170c:	200001d0 	.word	0x200001d0
 8001710:	200001a4 	.word	0x200001a4
 8001714:	20000440 	.word	0x20000440
 8001718:	20000418 	.word	0x20000418
 800171c:	20000808 	.word	0x20000808
 8001720:	2000083c 	.word	0x2000083c
 8001724:	200003cc 	.word	0x200003cc

08001728 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop

0800172c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 800172c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800172e:	4c08      	ldr	r4, [pc, #32]	; (8001750 <FOC_CalcCurrRef+0x24>)
 8001730:	2326      	movs	r3, #38	; 0x26
 8001732:	fb03 4400 	mla	r4, r3, r0, r4
 8001736:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800173a:	b103      	cbz	r3, 800173e <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 800173c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <FOC_CalcCurrRef+0x28>)
 8001740:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001744:	f005 fc08 	bl	8006f58 <STC_CalcTorqueReference>
 8001748:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800174a:	8220      	strh	r0, [r4, #16]
}
 800174c:	bd10      	pop	{r4, pc}
 800174e:	bf00      	nop
 8001750:	20000808 	.word	0x20000808
 8001754:	2000044c 	.word	0x2000044c

08001758 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001758:	4b01      	ldr	r3, [pc, #4]	; (8001760 <TSK_SetChargeBootCapDelayM1+0x8>)
 800175a:	8018      	strh	r0, [r3, #0]
}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000830 	.word	0x20000830

08001764 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001766:	8818      	ldrh	r0, [r3, #0]
 8001768:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800176a:	fab0 f080 	clz	r0, r0
 800176e:	0940      	lsrs	r0, r0, #5
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000830 	.word	0x20000830

08001778 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001778:	4b01      	ldr	r3, [pc, #4]	; (8001780 <TSK_SetStopPermanencyTimeM1+0x8>)
 800177a:	8018      	strh	r0, [r3, #0]
}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000834 	.word	0x20000834

08001784 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001786:	8818      	ldrh	r0, [r3, #0]
 8001788:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800178a:	fab0 f080 	clz	r0, r0
 800178e:	0940      	lsrs	r0, r0, #5
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000834 	.word	0x20000834

08001798 <TSK_MediumFrequencyTaskM1>:
{
 8001798:	b530      	push	{r4, r5, lr}
 800179a:	b083      	sub	sp, #12
  int16_t wAux = 0;
 800179c:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 800179e:	f10d 0106 	add.w	r1, sp, #6
 80017a2:	484c      	ldr	r0, [pc, #304]	; (80018d4 <TSK_MediumFrequencyTaskM1+0x13c>)
  int16_t wAux = 0;
 80017a4:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80017a8:	f003 fec8 	bl	800553c <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80017ac:	4d4a      	ldr	r5, [pc, #296]	; (80018d8 <TSK_MediumFrequencyTaskM1+0x140>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80017ae:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80017b0:	6828      	ldr	r0, [r5, #0]
 80017b2:	f004 fcc3 	bl	800613c <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80017b6:	4849      	ldr	r0, [pc, #292]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 80017b8:	f005 fcb6 	bl	8007128 <STM_GetState>
  switch ( StateM1 )
 80017bc:	1ec3      	subs	r3, r0, #3
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	d80d      	bhi.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
 80017c2:	e8df f003 	tbb	[pc, r3]
 80017c6:	2b1f      	.short	0x2b1f
 80017c8:	63504230 	.word	0x63504230
 80017cc:	0c0c0c08 	.word	0x0c0c0c08
 80017d0:	6c0c0c0c 	.word	0x6c0c0c0c
 80017d4:	0e7a      	.short	0x0e7a
    STM_NextState( &STM[M1], IDLE );
 80017d6:	4841      	ldr	r0, [pc, #260]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 80017d8:	2100      	movs	r1, #0
 80017da:	f005 fc31 	bl	8007040 <STM_NextState>
}
 80017de:	b003      	add	sp, #12
 80017e0:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 80017e2:	483c      	ldr	r0, [pc, #240]	; (80018d4 <TSK_MediumFrequencyTaskM1+0x13c>)
 80017e4:	f003 fde2 	bl	80053ac <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80017e8:	483c      	ldr	r0, [pc, #240]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 80017ea:	2104      	movs	r1, #4
 80017ec:	f005 fc28 	bl	8007040 <STM_NextState>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d0f4      	beq.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff fecd 	bl	8001594 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <TSK_MediumFrequencyTaskM1+0x148>)
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	f004 fe59 	bl	80064b4 <R3_2_SwitchOnPWM>
 8001802:	e7ec      	b.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <TSK_MediumFrequencyTaskM1+0x148>)
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	f004 fe2a 	bl	8006460 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800180c:	2014      	movs	r0, #20
 800180e:	f7ff ffa3 	bl	8001758 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001812:	2110      	movs	r1, #16
 8001814:	4831      	ldr	r0, [pc, #196]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 8001816:	f005 fc13 	bl	8007040 <STM_NextState>
    break;
 800181a:	e7e0      	b.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 800181c:	2105      	movs	r1, #5
 800181e:	482f      	ldr	r0, [pc, #188]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 8001820:	f005 fc0e 	bl	8007040 <STM_NextState>
    break;
 8001824:	e7db      	b.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff ff7e 	bl	8001728 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff ff7d 	bl	800172c <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001832:	2106      	movs	r1, #6
 8001834:	4829      	ldr	r0, [pc, #164]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 8001836:	f005 fc03 	bl	8007040 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <TSK_MediumFrequencyTaskM1+0x14c>)
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	f005 fbcf 	bl	8006fe0 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001842:	4829      	ldr	r0, [pc, #164]	; (80018e8 <TSK_MediumFrequencyTaskM1+0x150>)
 8001844:	f7ff fcd6 	bl	80011f4 <MCI_ExecBufferedCommands>
    break;
 8001848:	e7c9      	b.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( &Mci[M1] );
 800184a:	4827      	ldr	r0, [pc, #156]	; (80018e8 <TSK_MediumFrequencyTaskM1+0x150>)
 800184c:	f7ff fcd2 	bl	80011f4 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff ff6b 	bl	800172c <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001856:	2c00      	cmp	r4, #0
 8001858:	d1c1      	bne.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 800185a:	4622      	mov	r2, r4
 800185c:	2120      	movs	r1, #32
 800185e:	481f      	ldr	r0, [pc, #124]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 8001860:	f005 fbcc 	bl	8006ffc <STM_FaultProcessing>
 8001864:	e7bb      	b.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <TSK_MediumFrequencyTaskM1+0x148>)
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	f004 fe6d 	bl	8006548 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fe90 	bl	8001594 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001874:	6828      	ldr	r0, [r5, #0]
 8001876:	f004 fb47 	bl	8005f08 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800187a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800187e:	f7ff ff7b 	bl	8001778 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001882:	2108      	movs	r1, #8
 8001884:	4815      	ldr	r0, [pc, #84]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 8001886:	f005 fbdb 	bl	8007040 <STM_NextState>
    break;
 800188a:	e7a8      	b.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 800188c:	f7ff ff7a 	bl	8001784 <TSK_StopPermanencyTimeHasElapsedM1>
 8001890:	2800      	cmp	r0, #0
 8001892:	d0a4      	beq.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001894:	2109      	movs	r1, #9
 8001896:	4811      	ldr	r0, [pc, #68]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 8001898:	f005 fbd2 	bl	8007040 <STM_NextState>
 800189c:	e79f      	b.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800189e:	f7ff ff61 	bl	8001764 <TSK_ChargeBootCapDelayHasElapsedM1>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d09b      	beq.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <TSK_MediumFrequencyTaskM1+0x148>)
 80018a8:	2100      	movs	r1, #0
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	f000 fb66 	bl	8001f7c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80018b0:	2111      	movs	r1, #17
 80018b2:	480a      	ldr	r0, [pc, #40]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 80018b4:	f005 fbc4 	bl	8007040 <STM_NextState>
 80018b8:	e791      	b.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <TSK_MediumFrequencyTaskM1+0x148>)
 80018bc:	2101      	movs	r1, #1
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f000 fb5c 	bl	8001f7c <PWMC_CurrentReadingCalibr>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d08a      	beq.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 80018c8:	2112      	movs	r1, #18
 80018ca:	4804      	ldr	r0, [pc, #16]	; (80018dc <TSK_MediumFrequencyTaskM1+0x144>)
 80018cc:	f005 fbb8 	bl	8007040 <STM_NextState>
 80018d0:	e785      	b.n	80017de <TSK_MediumFrequencyTaskM1+0x46>
 80018d2:	bf00      	nop
 80018d4:	200000dc 	.word	0x200000dc
 80018d8:	20000440 	.word	0x20000440
 80018dc:	20000800 	.word	0x20000800
 80018e0:	20000840 	.word	0x20000840
 80018e4:	2000044c 	.word	0x2000044c
 80018e8:	200007d0 	.word	0x200007d0

080018ec <MC_Scheduler>:
  if (bMCBootCompleted == 1)
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <MC_Scheduler+0x7c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d000      	beq.n	80018f6 <MC_Scheduler+0xa>
 80018f4:	4770      	bx	lr
{
 80018f6:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 80018f8:	4c1c      	ldr	r4, [pc, #112]	; (800196c <MC_Scheduler+0x80>)
 80018fa:	8823      	ldrh	r3, [r4, #0]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b1a3      	cbz	r3, 800192a <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 8001900:	8823      	ldrh	r3, [r4, #0]
 8001902:	3b01      	subs	r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <MC_Scheduler+0x84>)
 800190a:	8813      	ldrh	r3, [r2, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	b11b      	cbz	r3, 8001918 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001910:	8813      	ldrh	r3, [r2, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	b29b      	uxth	r3, r3
 8001916:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001918:	4a16      	ldr	r2, [pc, #88]	; (8001974 <MC_Scheduler+0x88>)
 800191a:	8813      	ldrh	r3, [r2, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	b11b      	cbz	r3, 8001928 <MC_Scheduler+0x3c>
      hStopPermanencyCounterM1--;
 8001920:	8813      	ldrh	r3, [r2, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	8013      	strh	r3, [r2, #0]
}
 8001928:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 800192a:	4d13      	ldr	r5, [pc, #76]	; (8001978 <MC_Scheduler+0x8c>)
      TSK_MediumFrequencyTaskM1();
 800192c:	f7ff ff34 	bl	8001798 <TSK_MediumFrequencyTaskM1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 8001930:	4629      	mov	r1, r5
 8001932:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001936:	6883      	ldr	r3, [r0, #8]
 8001938:	4798      	blx	r3
 800193a:	6068      	str	r0, [r5, #4]
      if (MCP_Over_UartA.rxBuffer)
 800193c:	b130      	cbz	r0, 800194c <MC_Scheduler+0x60>
        if (MCP_Over_UartA.pTransportLayer->fGetBuffer (MCP_Over_UartA.pTransportLayer, (void **) &MCP_Over_UartA.txBuffer, MCTL_SYNC))
 800193e:	4629      	mov	r1, r5
 8001940:	220a      	movs	r2, #10
 8001942:	f851 0b08 	ldr.w	r0, [r1], #8
 8001946:	6803      	ldr	r3, [r0, #0]
 8001948:	4798      	blx	r3
 800194a:	b910      	cbnz	r0, 8001952 <MC_Scheduler+0x66>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800194c:	2301      	movs	r3, #1
 800194e:	8023      	strh	r3, [r4, #0]
 8001950:	e7da      	b.n	8001908 <MC_Scheduler+0x1c>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001952:	4628      	mov	r0, r5
 8001954:	f004 f89c 	bl	8005a90 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket (MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer, MCP_Over_UartA.txLength, MCTL_SYNC);
 8001958:	6828      	ldr	r0, [r5, #0]
 800195a:	89ea      	ldrh	r2, [r5, #14]
 800195c:	6846      	ldr	r6, [r0, #4]
 800195e:	68a9      	ldr	r1, [r5, #8]
 8001960:	230a      	movs	r3, #10
 8001962:	47b0      	blx	r6
 8001964:	e7f2      	b.n	800194c <MC_Scheduler+0x60>
 8001966:	bf00      	nop
 8001968:	2000082e 	.word	0x2000082e
 800196c:	20000832 	.word	0x20000832
 8001970:	20000830 	.word	0x20000830
 8001974:	20000834 	.word	0x20000834
 8001978:	20000490 	.word	0x20000490

0800197c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800197c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001980:	4836      	ldr	r0, [pc, #216]	; (8001a5c <TSK_HighFrequencyTask+0xe0>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001982:	4f37      	ldr	r7, [pc, #220]	; (8001a60 <TSK_HighFrequencyTask+0xe4>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001984:	4c37      	ldr	r4, [pc, #220]	; (8001a64 <TSK_HighFrequencyTask+0xe8>)
{
 8001986:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 8001988:	f003 fdba 	bl	8005500 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <TSK_HighFrequencyTask+0xec>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f005 fa78 	bl	8006e84 <STC_GetSpeedSensor>
 8001994:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001996:	f005 fa13 	bl	8006dc0 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800199a:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 800199c:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800199e:	6838      	ldr	r0, [r7, #0]
 80019a0:	f000 f9a4 	bl	8001cec <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80019a4:	9803      	ldr	r0, [sp, #12]
 80019a6:	f7ff fce3 	bl	8001370 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80019aa:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80019ac:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80019ae:	f7ff fd55 	bl	800145c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80019b2:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <TSK_HighFrequencyTask+0xf0>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80019b4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80019b8:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80019ba:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80019bc:	1a09      	subs	r1, r1, r0
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	f004 fb74 	bl	80060ac <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80019c4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80019c8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80019cc:	1ac9      	subs	r1, r1, r3
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <TSK_HighFrequencyTask+0xf4>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80019d0:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f004 fb6a 	bl	80060ac <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80019d8:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <TSK_HighFrequencyTask+0xf8>)
 80019da:	f8ad 8008 	strh.w	r8, [sp, #8]
 80019de:	f8ad 000a 	strh.w	r0, [sp, #10]
 80019e2:	9902      	ldr	r1, [sp, #8]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f003 fc23 	bl	8005230 <Circle_Limitation>
 80019ea:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80019ec:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80019ee:	fa0f f883 	sxth.w	r8, r3
 80019f2:	141d      	asrs	r5, r3, #16
 80019f4:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80019f6:	f005 f9eb 	bl	8006dd0 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80019fa:	4631      	mov	r1, r6
 80019fc:	9802      	ldr	r0, [sp, #8]
 80019fe:	f7ff fd71 	bl	80014e4 <MCM_Rev_Park>
 8001a02:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001a04:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001a06:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001a08:	f000 f972 	bl	8001cf0 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001a0c:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001a0e:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8001a10:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001a12:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001a14:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001a16:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001a18:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001a1c:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 8001a1e:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001a20:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001a22:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001a24:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001a28:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8001a2a:	d011      	beq.n	8001a50 <TSK_HighFrequencyTask+0xd4>
  GLOBAL_TIMESTAMP++;
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <TSK_HighFrequencyTask+0xfc>)
  if (MCPA_UART_A.Mark != 0)
 8001a2e:	4813      	ldr	r0, [pc, #76]	; (8001a7c <TSK_HighFrequencyTask+0x100>)
  GLOBAL_TIMESTAMP++;
 8001a30:	6813      	ldr	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8001a32:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001a36:	3301      	adds	r3, #1
 8001a38:	6013      	str	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8001a3a:	b919      	cbnz	r1, 8001a44 <TSK_HighFrequencyTask+0xc8>
}
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	b006      	add	sp, #24
 8001a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8001a44:	f004 f8f8 	bl	8005c38 <MCPA_dataLog>
}
 8001a48:	2000      	movs	r0, #0
 8001a4a:	b006      	add	sp, #24
 8001a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	480b      	ldr	r0, [pc, #44]	; (8001a80 <TSK_HighFrequencyTask+0x104>)
 8001a54:	f005 fad2 	bl	8006ffc <STM_FaultProcessing>
 8001a58:	e7e8      	b.n	8001a2c <TSK_HighFrequencyTask+0xb0>
 8001a5a:	bf00      	nop
 8001a5c:	200000dc 	.word	0x200000dc
 8001a60:	20000840 	.word	0x20000840
 8001a64:	20000808 	.word	0x20000808
 8001a68:	2000044c 	.word	0x2000044c
 8001a6c:	20000448 	.word	0x20000448
 8001a70:	20000444 	.word	0x20000444
 8001a74:	20000838 	.word	0x20000838
 8001a78:	20001b14 	.word	0x20001b14
 8001a7c:	20000464 	.word	0x20000464
 8001a80:	20000800 	.word	0x20000800

08001a84 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <TSK_SafetyTask_PWMOFF+0x9c>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001a88:	4e26      	ldr	r6, [pc, #152]	; (8001b24 <TSK_SafetyTask_PWMOFF+0xa0>)
{
 8001a8a:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001a8c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a90:	f004 fa8e 	bl	8005fb0 <NTC_CalcAvTemp>
 8001a94:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001a96:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001a9a:	f000 fa99 	bl	8001fd0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001a9e:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001aa2:	4305      	orrs	r5, r0
 8001aa4:	b2ad      	uxth	r5, r5
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001aa6:	b364      	cbz	r4, 8001b02 <TSK_SafetyTask_PWMOFF+0x7e>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001aa8:	4f1f      	ldr	r7, [pc, #124]	; (8001b28 <TSK_SafetyTask_PWMOFF+0xa4>)
 8001aaa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001aae:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001ab2:	43ea      	mvns	r2, r5
 8001ab4:	b292      	uxth	r2, r2
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	4638      	mov	r0, r7
 8001aba:	f005 fa9f 	bl	8006ffc <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001abe:	4638      	mov	r0, r7
 8001ac0:	f005 fb32 	bl	8007128 <STM_GetState>
 8001ac4:	280a      	cmp	r0, #10
 8001ac6:	d00a      	beq.n	8001ade <TSK_SafetyTask_PWMOFF+0x5a>
 8001ac8:	280b      	cmp	r0, #11
 8001aca:	d107      	bne.n	8001adc <TSK_SafetyTask_PWMOFF+0x58>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001acc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ad0:	f000 fa52 	bl	8001f78 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001ad4:	4815      	ldr	r0, [pc, #84]	; (8001b2c <TSK_SafetyTask_PWMOFF+0xa8>)
 8001ad6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001ada:	b9cb      	cbnz	r3, 8001b10 <TSK_SafetyTask_PWMOFF+0x8c>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ade:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ae2:	f000 fa49 	bl	8001f78 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001ae6:	4811      	ldr	r0, [pc, #68]	; (8001b2c <TSK_SafetyTask_PWMOFF+0xa8>)
 8001ae8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001aec:	b9a3      	cbnz	r3, 8001b18 <TSK_SafetyTask_PWMOFF+0x94>
    FOC_Clear(bMotor);
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff fd50 	bl	8001594 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <TSK_SafetyTask_PWMOFF+0xac>)
 8001af6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001afe:	f004 ba03 	b.w	8005f08 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8001b02:	480c      	ldr	r0, [pc, #48]	; (8001b34 <TSK_SafetyTask_PWMOFF+0xb0>)
 8001b04:	f005 f91e 	bl	8006d44 <RVBS_CalcAvVbus>
 8001b08:	f000 000e 	and.w	r0, r0, #14
 8001b0c:	4305      	orrs	r5, r0
 8001b0e:	e7cb      	b.n	8001aa8 <TSK_SafetyTask_PWMOFF+0x24>
}
 8001b10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      MCPA_flushDataLog (&MCPA_UART_A);
 8001b14:	f004 b954 	b.w	8005dc0 <MCPA_flushDataLog>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001b18:	f004 f952 	bl	8005dc0 <MCPA_flushDataLog>
 8001b1c:	e7e7      	b.n	8001aee <TSK_SafetyTask_PWMOFF+0x6a>
 8001b1e:	bf00      	nop
 8001b20:	20000450 	.word	0x20000450
 8001b24:	20000840 	.word	0x20000840
 8001b28:	20000800 	.word	0x20000800
 8001b2c:	20000464 	.word	0x20000464
 8001b30:	20000440 	.word	0x20000440
 8001b34:	20000000 	.word	0x20000000

08001b38 <TSK_SafetyTask>:
{
 8001b38:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <TSK_SafetyTask+0x1c>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d000      	beq.n	8001b44 <TSK_SafetyTask+0xc>
}
 8001b42:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff ff9d 	bl	8001a84 <TSK_SafetyTask_PWMOFF>
}
 8001b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001b4e:	f001 bab7 	b.w	80030c0 <RCM_ExecUserConv>
 8001b52:	bf00      	nop
 8001b54:	2000082e 	.word	0x2000082e

08001b58 <MC_RunMotorControlTasks>:
{
 8001b58:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <MC_RunMotorControlTasks+0x14>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b903      	cbnz	r3, 8001b62 <MC_RunMotorControlTasks+0xa>
}
 8001b60:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001b62:	f7ff fec3 	bl	80018ec <MC_Scheduler>
    TSK_SafetyTask();
 8001b66:	f7ff ffe7 	bl	8001b38 <TSK_SafetyTask>
}
 8001b6a:	bd08      	pop	{r3, pc}
 8001b6c:	2000082e 	.word	0x2000082e

08001b70 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001b70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <TSK_HardwareFaultTask+0x18>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	f004 fce7 	bl	8006548 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001b7e:	4803      	ldr	r0, [pc, #12]	; (8001b8c <TSK_HardwareFaultTask+0x1c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	f005 ba3a 	b.w	8006ffc <STM_FaultProcessing>
 8001b88:	20000840 	.word	0x20000840
 8001b8c:	20000800 	.word	0x20000800

08001b90 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001b90:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8001b92:	f7ff fae7 	bl	8001164 <MC_GetSTMStateMotor1>
 8001b96:	b918      	cbnz	r0, 8001ba0 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8001b9c:	f7ff bad6 	b.w	800114c <MC_StartMotor1>
}
 8001ba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8001ba4:	f7ff bad8 	b.w	8001158 <MC_StopMotor1>

08001ba8 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001ba8:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001baa:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <mc_lock_pins+0x100>)
 8001bac:	4a3f      	ldr	r2, [pc, #252]	; (8001cac <mc_lock_pins+0x104>)
 8001bae:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bb0:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001bb4:	b08f      	sub	sp, #60	; 0x3c
 8001bb6:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bb8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bba:	69d9      	ldr	r1, [r3, #28]
 8001bbc:	910d      	str	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bbe:	2040      	movs	r0, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bc0:	493b      	ldr	r1, [pc, #236]	; (8001cb0 <mc_lock_pins+0x108>)
  (void) temp;
 8001bc2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bc4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bc6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bc8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bca:	69dd      	ldr	r5, [r3, #28]
 8001bcc:	950c      	str	r5, [sp, #48]	; 0x30
  (void) temp;
 8001bce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bd0:	4d38      	ldr	r5, [pc, #224]	; (8001cb4 <mc_lock_pins+0x10c>)
 8001bd2:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bd4:	2680      	movs	r6, #128	; 0x80
 8001bd6:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bd8:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bde:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <mc_lock_pins+0x110>)
  (void) temp;
 8001be0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001be2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001be4:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001be6:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	920a      	str	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bec:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bf0:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 8001bf4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bf6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bf8:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bfa:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	9209      	str	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c00:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
  (void) temp;
 8001c08:	9d09      	ldr	r5, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c0a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c0c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c0e:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c10:	69dc      	ldr	r4, [r3, #28]
 8001c12:	9408      	str	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c14:	441a      	add	r2, r3
  (void) temp;
 8001c16:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c18:	f44f 34a0 	mov.w	r4, #81920	; 0x14000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c1c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c20:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c22:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c24:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c26:	69d4      	ldr	r4, [r2, #28]
 8001c28:	9407      	str	r4, [sp, #28]
  (void) temp;
 8001c2a:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c2c:	f44f 34c0 	mov.w	r4, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c30:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c34:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c36:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c38:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c3a:	69d4      	ldr	r4, [r2, #28]
 8001c3c:	9406      	str	r4, [sp, #24]
  (void) temp;
 8001c3e:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c40:	f44f 3490 	mov.w	r4, #73728	; 0x12000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c44:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c48:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c4a:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c4c:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c4e:	69d4      	ldr	r4, [r2, #28]
 8001c50:	9405      	str	r4, [sp, #20]
  (void) temp;
 8001c52:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c54:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c56:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c58:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c5a:	69d9      	ldr	r1, [r3, #28]
 8001c5c:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c5e:	2008      	movs	r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c60:	4916      	ldr	r1, [pc, #88]	; (8001cbc <mc_lock_pins+0x114>)
  (void) temp;
 8001c62:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c64:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c66:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c68:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c6a:	69d8      	ldr	r0, [r3, #28]
 8001c6c:	9003      	str	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c6e:	3108      	adds	r1, #8
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c70:	2010      	movs	r0, #16
  (void) temp;
 8001c72:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c74:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c76:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c78:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c7e:	2101      	movs	r1, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c80:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  (void) temp;
 8001c84:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c86:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c88:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c8a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c8c:	69d3      	ldr	r3, [r2, #28]
 8001c8e:	9301      	str	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c90:	2102      	movs	r1, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <mc_lock_pins+0x118>)
  (void) temp;
 8001c94:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c96:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c98:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c9a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c9c:	69d3      	ldr	r3, [r2, #28]
 8001c9e:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001ca0:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 8001ca2:	b00f      	add	sp, #60	; 0x3c
 8001ca4:	bc70      	pop	{r4, r5, r6}
 8001ca6:	4770      	bx	lr
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	00010100 	.word	0x00010100
 8001cb0:	00010040 	.word	0x00010040
 8001cb4:	00010080 	.word	0x00010080
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	00010008 	.word	0x00010008
 8001cc0:	00010002 	.word	0x00010002

08001cc4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001cc4:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001cc6:	f002 fd0d 	bl	80046e4 <HAL_RCC_GetHCLKFreq>
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_MotorControl_Init+0x20>)
 8001ccc:	fba3 3000 	umull	r3, r0, r3, r0
 8001cd0:	09c0      	lsrs	r0, r0, #7
 8001cd2:	f002 f865 	bl	8003da0 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001cd6:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_MotorControl_Init+0x24>)
 8001cd8:	f7ff fc96 	bl	8001608 <MCboot>
  mc_lock_pins();

}
 8001cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8001ce0:	f7ff bf62 	b.w	8001ba8 <mc_lock_pins>
 8001ce4:	10624dd3 	.word	0x10624dd3
 8001ce8:	20001ad0 	.word	0x20001ad0

08001cec <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8001cec:	6843      	ldr	r3, [r0, #4]
 8001cee:	4718      	bx	r3

08001cf0 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8001cf0:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001cf2:	f8b0 405c 	ldrh.w	r4, [r0, #92]	; 0x5c
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8001cf6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
{
 8001cf8:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001cfa:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8001cfe:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001d00:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8001d04:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001d06:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8001d0a:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8001d0e:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8001d12:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8001d16:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8001d1a:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8001d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001d22:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8001d26:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8001d2a:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8001d2e:	f2c0 8082 	blt.w	8001e36 <PWMC_SetPhaseVoltage+0x146>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8001d32:	f1b1 3fff 	cmp.w	r1, #4294967295
 8001d36:	db53      	blt.n	8001de0 <PWMC_SetPhaseVoltage+0xf0>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001d38:	ebbe 0e02 	subs.w	lr, lr, r2
 8001d3c:	bf44      	itt	mi
 8001d3e:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001d42:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8001d46:	2900      	cmp	r1, #0
 8001d48:	bfbc      	itt	lt
 8001d4a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8001d4e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bfb8      	it	lt
 8001d56:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001d5a:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001d5e:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001d62:	bfb8      	it	lt
 8001d64:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8001d68:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8001d6c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001d70:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8001d74:	f880 c068 	strb.w	ip, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhB;
 8001d78:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8001d7c:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      pHandle->highDuty = wTimePhC;
 8001d80:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));

  if ( pHandle->DTTest == 1u )
 8001d84:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8001d88:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8001d8c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8001d90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d94:	b292      	uxth	r2, r2
 8001d96:	b289      	uxth	r1, r1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8001d9c:	8742      	strh	r2, [r0, #58]	; 0x3a
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8001d9e:	8781      	strh	r1, [r0, #60]	; 0x3c
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8001da0:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if ( pHandle->DTTest == 1u )
 8001da2:	d118      	bne.n	8001dd6 <PWMC_SetPhaseVoltage+0xe6>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8001da4:	f9b0 404c 	ldrsh.w	r4, [r0, #76]	; 0x4c
 8001da8:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8001daa:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
 8001dae:	bfcc      	ite	gt
 8001db0:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8001db2:	1b12      	suble	r2, r2, r4
 8001db4:	b292      	uxth	r2, r2
 8001db6:	8742      	strh	r2, [r0, #58]	; 0x3a
    }

    if ( pHandle->Ib > 0 )
 8001db8:	f9b0 204e 	ldrsh.w	r2, [r0, #78]	; 0x4e
 8001dbc:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8001dbe:	f9b0 2050 	ldrsh.w	r2, [r0, #80]	; 0x50
      pHandle->CntPhB += pHandle->DTCompCnt;
 8001dc2:	bfcc      	ite	gt
 8001dc4:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8001dc6:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8001dc8:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8001dca:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8001dcc:	bfcc      	ite	gt
 8001dce:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8001dd0:	1b1b      	suble	r3, r3, r4
 8001dd2:	8781      	strh	r1, [r0, #60]	; 0x3c
 8001dd4:	87c3      	strh	r3, [r0, #62]	; 0x3e
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8001dd6:	6983      	ldr	r3, [r0, #24]
}
 8001dd8:	b002      	add	sp, #8
 8001dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8001dde:	4718      	bx	r3
      if ( wX <= 0 )
 8001de0:	f1bc 0f00 	cmp.w	ip, #0
 8001de4:	dd4f      	ble.n	8001e86 <PWMC_SetPhaseVoltage+0x196>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001de6:	ebbc 0e02 	subs.w	lr, ip, r2
 8001dea:	bf44      	itt	mi
 8001dec:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001df0:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8001df4:	2900      	cmp	r1, #0
 8001df6:	bfb8      	it	lt
 8001df8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8001dfc:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8001e00:	bfb8      	it	lt
 8001e02:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8001e06:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001e0a:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8001e0c:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001e10:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001e14:	bfb8      	it	lt
 8001e16:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8001e1a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001e1e:	bfb8      	it	lt
 8001e20:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8001e24:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8001e28:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8001e2c:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhC;
 8001e30:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8001e34:	e7a6      	b.n	8001d84 <PWMC_SetPhaseVoltage+0x94>
    if ( wZ < 0 )
 8001e36:	f1b1 3fff 	cmp.w	r1, #4294967295
 8001e3a:	db75      	blt.n	8001f28 <PWMC_SetPhaseVoltage+0x238>
      if ( wX <= 0 )
 8001e3c:	f1bc 0f00 	cmp.w	ip, #0
 8001e40:	dd4a      	ble.n	8001ed8 <PWMC_SetPhaseVoltage+0x1e8>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001e42:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001e46:	bf48      	it	mi
 8001e48:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8001e4c:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001e50:	bf48      	it	mi
 8001e52:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bfb8      	it	lt
 8001e5a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8001e5e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001e62:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001e66:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8001e6a:	bfb8      	it	lt
 8001e6c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8001e70:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8001e74:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8001e78:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8001e7c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8001e80:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8001e84:	e77e      	b.n	8001d84 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001e86:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001e8a:	bf44      	itt	mi
 8001e8c:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001e90:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bfb8      	it	lt
 8001e98:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8001e9c:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8001ea0:	bfb8      	it	lt
 8001ea2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8001ea6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhB = wTimePhC + wX / 131072;
 8001eaa:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001eae:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001eb2:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8001eb6:	bfb8      	it	lt
 8001eb8:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8001ebc:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8001ec0:	bfb8      	it	lt
 8001ec2:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8001ec6:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8001eca:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8001ece:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhB;
 8001ed2:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
 8001ed6:	e755      	b.n	8001d84 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001ed8:	ebbc 0e02 	subs.w	lr, ip, r2
 8001edc:	bf44      	itt	mi
 8001ede:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001ee2:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8001ee6:	2900      	cmp	r1, #0
 8001ee8:	bfb8      	it	lt
 8001eea:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8001eee:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8001ef2:	bfb8      	it	lt
 8001ef4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8001ef8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001efc:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8001efe:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001f02:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001f06:	bfb8      	it	lt
 8001f08:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8001f0c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001f10:	bfb8      	it	lt
 8001f12:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8001f16:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8001f1a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8001f1e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8001f22:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8001f26:	e72d      	b.n	8001d84 <PWMC_SetPhaseVoltage+0x94>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001f28:	ebbe 0e02 	subs.w	lr, lr, r2
 8001f2c:	bf44      	itt	mi
 8001f2e:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8001f32:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8001f36:	2900      	cmp	r1, #0
 8001f38:	bfbc      	itt	lt
 8001f3a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8001f3e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bfb8      	it	lt
 8001f46:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001f4a:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8001f4e:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001f52:	bfb8      	it	lt
 8001f54:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8001f58:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8001f5c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001f60:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8001f64:	f880 c068 	strb.w	ip, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhC;
 8001f68:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8001f6c:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      pHandle->highDuty = wTimePhB;
 8001f70:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
 8001f74:	e706      	b.n	8001d84 <PWMC_SetPhaseVoltage+0x94>
 8001f76:	bf00      	nop

08001f78 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8001f78:	6883      	ldr	r3, [r0, #8]
 8001f7a:	4718      	bx	r3

08001f7c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8001f7c:	b520      	push	{r5, lr}
 8001f7e:	4605      	mov	r5, r0
 8001f80:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8001f82:	b199      	cbz	r1, 8001fac <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8001f84:	2901      	cmp	r1, #1
 8001f86:	d002      	beq.n	8001f8e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8001f88:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8001f8a:	b002      	add	sp, #8
 8001f8c:	bd20      	pop	{r5, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8001f8e:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8001f92:	b1cb      	cbz	r3, 8001fc8 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	9101      	str	r1, [sp, #4]
 8001f9a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f2      	bne.n	8001f88 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8001fa2:	6903      	ldr	r3, [r0, #16]
 8001fa4:	4798      	blx	r3
        retVal = true;
 8001fa6:	9901      	ldr	r1, [sp, #4]
 8001fa8:	4608      	mov	r0, r1
 8001faa:	e7ee      	b.n	8001f8a <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8001fac:	f7ff ffe4 	bl	8001f78 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8001fb0:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 8001fb4:	f8a5 304a 	strh.w	r3, [r5, #74]	; 0x4a
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e5      	bne.n	8001f88 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	692b      	ldr	r3, [r5, #16]
 8001fc0:	4798      	blx	r3
      retVal = true;
 8001fc2:	2001      	movs	r0, #1
}
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd20      	pop	{r5, pc}
      retVal = true;
 8001fc8:	4608      	mov	r0, r1
}
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd20      	pop	{r5, pc}
 8001fce:	bf00      	nop

08001fd0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8001fd0:	69c3      	ldr	r3, [r0, #28]
 8001fd2:	4718      	bx	r3

08001fd4 <RI_SetRegCommandParser>:
static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize);

__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd8:	4681      	mov	r9, r0
  uint16_t * dataElementID;
  uint8_t * rxData = pHandle->rxBuffer;
  uint8_t * txData = pHandle->txBuffer;
  int16_t rxLength = pHandle->rxLength;
 8001fda:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  uint16_t size;
  uint8_t retVal=MCP_CMD_OK;
  uint8_t accessResult;
  uint8_t number_of_item =0;
  pHandle->txLength = 0;
 8001fde:	2300      	movs	r3, #0
  while (rxLength > 0)
 8001fe0:	4298      	cmp	r0, r3
  uint8_t * txData = pHandle->txBuffer;
 8001fe2:	e9d9 5701 	ldrd	r5, r7, [r9, #4]
{
 8001fe6:	b087      	sub	sp, #28
  pHandle->txLength = 0;
 8001fe8:	f8a9 300e 	strh.w	r3, [r9, #14]
  while (rxLength > 0)
 8001fec:	dd7b      	ble.n	80020e6 <RI_SetRegCommandParser+0x112>
 8001fee:	187a      	adds	r2, r7, r1
  uint8_t retVal=MCP_CMD_OK;
 8001ff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ff4:	4ba5      	ldr	r3, [pc, #660]	; (800228c <RI_SetRegCommandParser+0x2b8>)
 8001ff6:	f1c7 0b01 	rsb	fp, r7, #1
  {
     number_of_item ++;
     dataElementID = (uint16_t *) rxData;
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
     rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001ffa:	462e      	mov	r6, r5
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001ffc:	fa1f f880 	uxth.w	r8, r0
     accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002000:	f836 eb02 	ldrh.w	lr, [r6], #2
  uint8_t typeID;
  uint8_t motorID;
  uint8_t retVal = MCP_CMD_OK;
  uint16_t regID = dataID & REG_MASK;
  typeID = dataID & TYPE_MASK;
  motorID = (dataID & MOTOR_MASK)-1;
 8002004:	f00e 0c07 	and.w	ip, lr, #7
 8002008:	f10c 3cff 	add.w	ip, ip, #4294967295
 800200c:	fa5f f28c 	uxtb.w	r2, ip

  MCI_Handle_t * pMCI = &Mci[motorID];
 8002010:	fa5f f48c 	uxtb.w	r4, ip

  switch (typeID)
 8002014:	f00e 0138 	and.w	r1, lr, #56	; 0x38
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002018:	f1a8 0002 	sub.w	r0, r8, #2
  MCI_Handle_t * pMCI = &Mci[motorID];
 800201c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  motorID = (dataID & MOTOR_MASK)-1;
 8002020:	9201      	str	r2, [sp, #4]
  switch (typeID)
 8002022:	3908      	subs	r1, #8
  uint16_t regID = dataID & REG_MASK;
 8002024:	f02e 0207 	bic.w	r2, lr, #7
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002028:	fa1f fa80 	uxth.w	sl, r0
  MCI_Handle_t * pMCI = &Mci[motorID];
 800202c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002030:	b200      	sxth	r0, r0
  uint16_t regID = dataID & REG_MASK;
 8002032:	b292      	uxth	r2, r2
  switch (typeID)
 8002034:	2920      	cmp	r1, #32
 8002036:	d812      	bhi.n	800205e <RI_SetRegCommandParser+0x8a>
 8002038:	e8df f001 	tbb	[pc, r1]
 800203c:	111111ba 	.word	0x111111ba
 8002040:	11111111 	.word	0x11111111
 8002044:	1111118d 	.word	0x1111118d
 8002048:	11111111 	.word	0x11111111
 800204c:	111111c6 	.word	0x111111c6
 8002050:	11111111 	.word	0x11111111
 8002054:	1111116f 	.word	0x1111116f
 8002058:	11111111 	.word	0x11111111
 800205c:	2a          	.byte	0x2a
 800205d:	00          	.byte	0x00
 800205e:	2207      	movs	r2, #7
     if (number_of_item == 1 && rxLength == 0)
 8002060:	eb07 010b 	add.w	r1, r7, fp
 8002064:	b2c9      	uxtb	r1, r1
 8002066:	2901      	cmp	r1, #1
 8002068:	d038      	beq.n	80020dc <RI_SetRegCommandParser+0x108>
       if (txSyncFreeSpace !=0 )
 800206a:	9902      	ldr	r1, [sp, #8]
 800206c:	428f      	cmp	r7, r1
 800206e:	f000 80bc 	beq.w	80021ea <RI_SetRegCommandParser+0x216>
         *txData = accessResult;
 8002072:	f807 2b01 	strb.w	r2, [r7], #1
         pHandle->txLength++;
 8002076:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800207a:	3101      	adds	r1, #1
 800207c:	f8a9 100e 	strh.w	r1, [r9, #14]
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002080:	2a00      	cmp	r2, #0
 8002082:	f040 80b7 	bne.w	80021f4 <RI_SetRegCommandParser+0x220>
  while (rxLength > 0)
 8002086:	2800      	cmp	r0, #0
 8002088:	f340 82ab 	ble.w	80025e2 <RI_SetRegCommandParser+0x60e>
 800208c:	4635      	mov	r5, r6
 800208e:	e7b4      	b.n	8001ffa <RI_SetRegCommandParser+0x26>
    }
    break;
  case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *) data;
      *size = rawSize+2; /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
 8002090:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8002094:	f108 0802 	add.w	r8, r8, #2
 8002098:	fa1f f888 	uxth.w	r8, r8
      uint8_t * rawData = data+2; /* rawData points to the first data (after size extraction) */
      if (*size > dataAvailable )
 800209c:	4580      	cmp	r8, r0
 800209e:	f300 81bc 	bgt.w	800241a <RI_SetRegCommandParser+0x446>
        *size =0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 80020a2:	f5b2 7ff4 	cmp.w	r2, #488	; 0x1e8
 80020a6:	f000 8205 	beq.w	80024b4 <RI_SetRegCommandParser+0x4e0>
 80020aa:	d923      	bls.n	80020f4 <RI_SetRegCommandParser+0x120>
 80020ac:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 80020b0:	f000 81f4 	beq.w	800249c <RI_SetRegCommandParser+0x4c8>
 80020b4:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 80020b8:	f040 8196 	bne.w	80023e8 <RI_SetRegCommandParser+0x414>
          }
          break;

        case MC_REG_ASYNC_UARTA:
          {
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 80020bc:	1d29      	adds	r1, r5, #4
 80020be:	4874      	ldr	r0, [pc, #464]	; (8002290 <RI_SetRegCommandParser+0x2bc>)
 80020c0:	f003 feac 	bl	8005e1c <MCPA_cfgLog>
     if (number_of_item == 1 && rxLength == 0)
 80020c4:	eb07 010b 	add.w	r1, r7, fp
 80020c8:	b2c9      	uxtb	r1, r1
     rxData = rxData+size;
 80020ca:	4446      	add	r6, r8
     if (number_of_item == 1 && rxLength == 0)
 80020cc:	2901      	cmp	r1, #1
     rxLength = (int16_t) (rxLength - size);
 80020ce:	ebaa 0808 	sub.w	r8, sl, r8
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 80020d2:	4602      	mov	r2, r0
          }
          break;
 80020d4:	4b6d      	ldr	r3, [pc, #436]	; (800228c <RI_SetRegCommandParser+0x2b8>)
     rxLength = (int16_t) (rxLength - size);
 80020d6:	fa0f f088 	sxth.w	r0, r8
     if (number_of_item == 1 && rxLength == 0)
 80020da:	d1c6      	bne.n	800206a <RI_SetRegCommandParser+0x96>
 80020dc:	2800      	cmp	r0, #0
 80020de:	d1c4      	bne.n	800206a <RI_SetRegCommandParser+0x96>
  if (retVal == MCP_CMD_OK)
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	f040 8083 	bne.w	80021ec <RI_SetRegCommandParser+0x218>
    pHandle->txLength = 0;
 80020e6:	2200      	movs	r2, #0
}
 80020e8:	4610      	mov	r0, r2
    pHandle->txLength = 0;
 80020ea:	f8a9 200e 	strh.w	r2, [r9, #14]
}
 80020ee:	b007      	add	sp, #28
 80020f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020f4:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 80020f8:	f000 81be 	beq.w	8002478 <RI_SetRegCommandParser+0x4a4>
 80020fc:	f200 8174 	bhi.w	80023e8 <RI_SetRegCommandParser+0x414>
 8002100:	2aa8      	cmp	r2, #168	; 0xa8
 8002102:	d004      	beq.n	800210e <RI_SetRegCommandParser+0x13a>
 8002104:	f240 816a 	bls.w	80023dc <RI_SetRegCommandParser+0x408>
 8002108:	2ae8      	cmp	r2, #232	; 0xe8
 800210a:	f040 816d 	bne.w	80023e8 <RI_SetRegCommandParser+0x414>
     rxLength = (int16_t) (rxLength - size);
 800210e:	ebaa 0008 	sub.w	r0, sl, r8
     rxData = rxData+size;
 8002112:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 8002114:	b200      	sxth	r0, r0
          retVal = MCP_ERROR_RO_REG;
 8002116:	2204      	movs	r2, #4
 8002118:	e7a2      	b.n	8002060 <RI_SetRegCommandParser+0x8c>

uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  *size= 1 ; /* /0 is the min String size */
  while ((*srcString != 0) && (*size < maxSize) )
 800211a:	78aa      	ldrb	r2, [r5, #2]
 800211c:	2a00      	cmp	r2, #0
 800211e:	f000 81e5 	beq.w	80024ec <RI_SetRegCommandParser+0x518>
 8002122:	2801      	cmp	r0, #1
 8002124:	f340 8173 	ble.w	800240e <RI_SetRegCommandParser+0x43a>
 8002128:	1cec      	adds	r4, r5, #3
 800212a:	43ed      	mvns	r5, r5
 800212c:	e002      	b.n	8002134 <RI_SetRegCommandParser+0x160>
 800212e:	4290      	cmp	r0, r2
 8002130:	f340 8167 	ble.w	8002402 <RI_SetRegCommandParser+0x42e>
  {
    *destString = *srcString ;
    srcString = srcString+1;
 8002134:	192a      	adds	r2, r5, r4
 8002136:	46a4      	mov	ip, r4
  while ((*srcString != 0) && (*size < maxSize) )
 8002138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800213c:	b292      	uxth	r2, r2
 800213e:	2900      	cmp	r1, #0
 8002140:	d1f5      	bne.n	800212e <RI_SetRegCommandParser+0x15a>
     rxData = rxData+size;
 8002142:	4611      	mov	r1, r2
     rxLength = (int16_t) (rxLength - size);
 8002144:	ebaa 0202 	sub.w	r2, sl, r2
 8002148:	b210      	sxth	r0, r2
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *destString = 0;
 800214a:	2200      	movs	r2, #0
 800214c:	f88c 2000 	strb.w	r2, [ip]
     rxData = rxData+size;
 8002150:	440e      	add	r6, r1
      retVal = MCP_ERROR_RO_REG;
 8002152:	2204      	movs	r2, #4
 8002154:	e784      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
    uint16_t regdata16 = *(uint16_t *)data;
 8002156:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 800215a:	8869      	ldrh	r1, [r5, #2]
    switch (regID)
 800215c:	f000 8237 	beq.w	80025ce <RI_SetRegCommandParser+0x5fa>
 8002160:	f200 80b4 	bhi.w	80022cc <RI_SetRegCommandParser+0x2f8>
 8002164:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 8002168:	f000 8225 	beq.w	80025b6 <RI_SetRegCommandParser+0x5e2>
 800216c:	f240 8094 	bls.w	8002298 <RI_SetRegCommandParser+0x2c4>
 8002170:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 8002174:	f000 8223 	beq.w	80025be <RI_SetRegCommandParser+0x5ea>
 8002178:	d962      	bls.n	8002240 <RI_SetRegCommandParser+0x26c>
 800217a:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 800217e:	d059      	beq.n	8002234 <RI_SetRegCommandParser+0x260>
 8002180:	d951      	bls.n	8002226 <RI_SetRegCommandParser+0x252>
 8002182:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 8002186:	f040 80c3 	bne.w	8002310 <RI_SetRegCommandParser+0x33c>
        currComp = MCI_GetIqdref(pMCI);
 800218a:	4620      	mov	r0, r4
 800218c:	9101      	str	r1, [sp, #4]
 800218e:	f7ff f8b7 	bl	8001300 <MCI_GetIqdref>
        currComp.q = (int16_t)regdata16;
 8002192:	9901      	ldr	r1, [sp, #4]
        currComp = MCI_GetIqdref(pMCI);
 8002194:	9005      	str	r0, [sp, #20]
     rxData = rxData+size;
 8002196:	1d2e      	adds	r6, r5, #4
        currComp.q = (int16_t)regdata16;
 8002198:	f8ad 1014 	strh.w	r1, [sp, #20]
        MCI_SetCurrentReferences(pMCI,currComp);
 800219c:	4620      	mov	r0, r4
 800219e:	9905      	ldr	r1, [sp, #20]
 80021a0:	f7ff f808 	bl	80011b4 <MCI_SetCurrentReferences>
     rxLength = (int16_t) (rxLength - size);
 80021a4:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 80021a8:	4b38      	ldr	r3, [pc, #224]	; (800228c <RI_SetRegCommandParser+0x2b8>)
     rxLength = (int16_t) (rxLength - size);
 80021aa:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80021ac:	2200      	movs	r2, #0
      break;
 80021ae:	e757      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
    switch (regID)
 80021b0:	2a48      	cmp	r2, #72	; 0x48
 80021b2:	f000 812c 	beq.w	800240e <RI_SetRegCommandParser+0x43a>
 80021b6:	2a88      	cmp	r2, #136	; 0x88
 80021b8:	f000 8144 	beq.w	8002444 <RI_SetRegCommandParser+0x470>
     rxLength = (int16_t) (rxLength - size);
 80021bc:	f1a8 0003 	sub.w	r0, r8, #3
 80021c0:	b200      	sxth	r0, r0
     rxData = rxData+size;
 80021c2:	1cee      	adds	r6, r5, #3
      retVal = MCP_ERROR_UNKNOWN_REG;
 80021c4:	2205      	movs	r2, #5
 80021c6:	e74b      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
    switch (regID)
 80021c8:	2a98      	cmp	r2, #152	; 0x98
 80021ca:	f000 8128 	beq.w	800241e <RI_SetRegCommandParser+0x44a>
 80021ce:	d924      	bls.n	800221a <RI_SetRegCommandParser+0x246>
 80021d0:	f5b2 7fac 	cmp.w	r2, #344	; 0x158
 80021d4:	d01b      	beq.n	800220e <RI_SetRegCommandParser+0x23a>
 80021d6:	d915      	bls.n	8002204 <RI_SetRegCommandParser+0x230>
 80021d8:	f5b2 7fcc 	cmp.w	r2, #408	; 0x198
 80021dc:	d017      	beq.n	800220e <RI_SetRegCommandParser+0x23a>
     rxLength = (int16_t) (rxLength - size);
 80021de:	f1a8 0006 	sub.w	r0, r8, #6
 80021e2:	b200      	sxth	r0, r0
     rxData = rxData+size;
 80021e4:	1dae      	adds	r6, r5, #6
      retVal = MCP_ERROR_UNKNOWN_REG;
 80021e6:	2205      	movs	r2, #5
 80021e8:	e73a      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
         retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80021ea:	2208      	movs	r2, #8
}
 80021ec:	4610      	mov	r0, r2
 80021ee:	b007      	add	sp, #28
 80021f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80021f4:	2a07      	cmp	r2, #7
 80021f6:	f040 80fd 	bne.w	80023f4 <RI_SetRegCommandParser+0x420>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80021fa:	2201      	movs	r2, #1
}
 80021fc:	4610      	mov	r0, r2
 80021fe:	b007      	add	sp, #28
 8002200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002204:	2ad8      	cmp	r2, #216	; 0xd8
 8002206:	d002      	beq.n	800220e <RI_SetRegCommandParser+0x23a>
 8002208:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 800220c:	d1e7      	bne.n	80021de <RI_SetRegCommandParser+0x20a>
     rxLength = (int16_t) (rxLength - size);
 800220e:	f1a8 0006 	sub.w	r0, r8, #6
 8002212:	b200      	sxth	r0, r0
     rxData = rxData+size;
 8002214:	1dae      	adds	r6, r5, #6
      retVal = MCP_ERROR_RO_REG;
 8002216:	2204      	movs	r2, #4
 8002218:	e722      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
 800221a:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 800221e:	f1be 0f18 	cmp.w	lr, #24
 8002222:	d1dc      	bne.n	80021de <RI_SetRegCommandParser+0x20a>
 8002224:	e7f3      	b.n	800220e <RI_SetRegCommandParser+0x23a>
 8002226:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
 800222a:	d003      	beq.n	8002234 <RI_SetRegCommandParser+0x260>
 800222c:	d923      	bls.n	8002276 <RI_SetRegCommandParser+0x2a2>
 800222e:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 8002232:	d11a      	bne.n	800226a <RI_SetRegCommandParser+0x296>
     rxLength = (int16_t) (rxLength - size);
 8002234:	f1a8 0004 	sub.w	r0, r8, #4
 8002238:	b200      	sxth	r0, r0
     rxData = rxData+size;
 800223a:	1d2e      	adds	r6, r5, #4
      retVal = MCP_ERROR_RO_REG;
 800223c:	2204      	movs	r2, #4
     break;
 800223e:	e70f      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
 8002240:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 8002244:	f000 817b 	beq.w	800253e <RI_SetRegCommandParser+0x56a>
 8002248:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 800224c:	d118      	bne.n	8002280 <RI_SetRegCommandParser+0x2ac>
      PID_SetKI(pPIDId[motorID], regdata16);
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <RI_SetRegCommandParser+0x2c0>)
 8002250:	9a01      	ldr	r2, [sp, #4]
 8002252:	b209      	sxth	r1, r1
 8002254:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002258:	f003 fee6 	bl	8006028 <PID_SetKI>
     rxLength = (int16_t) (rxLength - size);
 800225c:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <RI_SetRegCommandParser+0x2b8>)
     rxLength = (int16_t) (rxLength - size);
 8002262:	b200      	sxth	r0, r0
     rxData = rxData+size;
 8002264:	1d2e      	adds	r6, r5, #4
  uint8_t retVal = MCP_CMD_OK;
 8002266:	2200      	movs	r2, #0
      break;
 8002268:	e6fa      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
 800226a:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 800226e:	f5be 6ff2 	cmp.w	lr, #1936	; 0x790
 8002272:	d0df      	beq.n	8002234 <RI_SetRegCommandParser+0x260>
 8002274:	e004      	b.n	8002280 <RI_SetRegCommandParser+0x2ac>
 8002276:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 800227a:	f5be 6fb2 	cmp.w	lr, #1424	; 0x590
 800227e:	d0d9      	beq.n	8002234 <RI_SetRegCommandParser+0x260>
     rxLength = (int16_t) (rxLength - size);
 8002280:	f1a8 0004 	sub.w	r0, r8, #4
 8002284:	b200      	sxth	r0, r0
     rxData = rxData+size;
 8002286:	1d2e      	adds	r6, r5, #4
      retVal = MCP_ERROR_UNKNOWN_REG;
 8002288:	2205      	movs	r2, #5
 800228a:	e6e9      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
 800228c:	200007d0 	.word	0x200007d0
 8002290:	20000464 	.word	0x20000464
 8002294:	20000444 	.word	0x20000444
 8002298:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800229c:	f000 8141 	beq.w	8002522 <RI_SetRegCommandParser+0x54e>
 80022a0:	d940      	bls.n	8002324 <RI_SetRegCommandParser+0x350>
 80022a2:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 80022a6:	f000 817b 	beq.w	80025a0 <RI_SetRegCommandParser+0x5cc>
 80022aa:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 80022ae:	d1e7      	bne.n	8002280 <RI_SetRegCommandParser+0x2ac>
      PID_SetKI(pPIDIq[motorID], regdata16);
 80022b0:	4aae      	ldr	r2, [pc, #696]	; (800256c <RI_SetRegCommandParser+0x598>)
 80022b2:	b209      	sxth	r1, r1
     rxData = rxData+size;
 80022b4:	1d2e      	adds	r6, r5, #4
      PID_SetKI(pPIDIq[motorID], regdata16);
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022bc:	f003 feb4 	bl	8006028 <PID_SetKI>
     rxLength = (int16_t) (rxLength - size);
 80022c0:	f1a8 0004 	sub.w	r0, r8, #4
     break;
 80022c4:	4baa      	ldr	r3, [pc, #680]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 80022c6:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80022c8:	2200      	movs	r2, #0
     break;
 80022ca:	e6c9      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
 80022cc:	f241 5010 	movw	r0, #5392	; 0x1510
 80022d0:	4282      	cmp	r2, r0
 80022d2:	f000 810f 	beq.w	80024f4 <RI_SetRegCommandParser+0x520>
 80022d6:	d93e      	bls.n	8002356 <RI_SetRegCommandParser+0x382>
 80022d8:	f241 50d0 	movw	r0, #5584	; 0x15d0
 80022dc:	4282      	cmp	r2, r0
 80022de:	f000 8110 	beq.w	8002502 <RI_SetRegCommandParser+0x52e>
 80022e2:	d928      	bls.n	8002336 <RI_SetRegCommandParser+0x362>
 80022e4:	f241 6010 	movw	r0, #5648	; 0x1610
 80022e8:	4282      	cmp	r2, r0
 80022ea:	f000 8149 	beq.w	8002580 <RI_SetRegCommandParser+0x5ac>
 80022ee:	f241 6050 	movw	r0, #5712	; 0x1650
 80022f2:	4282      	cmp	r2, r0
 80022f4:	d1c4      	bne.n	8002280 <RI_SetRegCommandParser+0x2ac>
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 80022f6:	4a9d      	ldr	r2, [pc, #628]	; (800256c <RI_SetRegCommandParser+0x598>)
     rxData = rxData+size;
 80022f8:	1d2e      	adds	r6, r5, #4
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 80022fa:	9b01      	ldr	r3, [sp, #4]
 80022fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002300:	f003 fece 	bl	80060a0 <PID_SetKDDivisorPOW2>
     rxLength = (int16_t) (rxLength - size);
 8002304:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 8002308:	4b99      	ldr	r3, [pc, #612]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 800230a:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800230c:	2200      	movs	r2, #0
      break;
 800230e:	e6a7      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
 8002310:	d8b6      	bhi.n	8002280 <RI_SetRegCommandParser+0x2ac>
 8002312:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 8002316:	d08d      	beq.n	8002234 <RI_SetRegCommandParser+0x260>
 8002318:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 800231c:	f5be 6f09 	cmp.w	lr, #2192	; 0x890
 8002320:	d088      	beq.n	8002234 <RI_SetRegCommandParser+0x260>
 8002322:	e7ad      	b.n	8002280 <RI_SetRegCommandParser+0x2ac>
 8002324:	2a90      	cmp	r2, #144	; 0x90
 8002326:	f000 8112 	beq.w	800254e <RI_SetRegCommandParser+0x57a>
 800232a:	2ad0      	cmp	r2, #208	; 0xd0
 800232c:	d1a8      	bne.n	8002280 <RI_SetRegCommandParser+0x2ac>
      PID_SetKI(pPIDSpeed[motorID], regdata16);
 800232e:	4a91      	ldr	r2, [pc, #580]	; (8002574 <RI_SetRegCommandParser+0x5a0>)
 8002330:	b209      	sxth	r1, r1
     rxData = rxData+size;
 8002332:	1d2e      	adds	r6, r5, #4
 8002334:	e7bf      	b.n	80022b6 <RI_SetRegCommandParser+0x2e2>
 8002336:	f241 5050 	movw	r0, #5456	; 0x1550
 800233a:	4282      	cmp	r2, r0
 800233c:	f000 8134 	beq.w	80025a8 <RI_SetRegCommandParser+0x5d4>
 8002340:	f241 5090 	movw	r0, #5520	; 0x1590
 8002344:	4282      	cmp	r2, r0
 8002346:	d19b      	bne.n	8002280 <RI_SetRegCommandParser+0x2ac>
      PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002348:	4b8b      	ldr	r3, [pc, #556]	; (8002578 <RI_SetRegCommandParser+0x5a4>)
 800234a:	9a01      	ldr	r2, [sp, #4]
 800234c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002350:	f003 fea6 	bl	80060a0 <PID_SetKDDivisorPOW2>
 8002354:	e782      	b.n	800225c <RI_SetRegCommandParser+0x288>
 8002356:	f241 4050 	movw	r0, #5200	; 0x1450
 800235a:	4282      	cmp	r2, r0
 800235c:	f000 80de 	beq.w	800251c <RI_SetRegCommandParser+0x548>
 8002360:	d90b      	bls.n	800237a <RI_SetRegCommandParser+0x3a6>
 8002362:	f241 4090 	movw	r0, #5264	; 0x1490
 8002366:	4282      	cmp	r2, r0
 8002368:	f000 8117 	beq.w	800259a <RI_SetRegCommandParser+0x5c6>
 800236c:	f241 40d0 	movw	r0, #5328	; 0x14d0
 8002370:	4282      	cmp	r2, r0
 8002372:	d185      	bne.n	8002280 <RI_SetRegCommandParser+0x2ac>
      PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002374:	4a7f      	ldr	r2, [pc, #508]	; (8002574 <RI_SetRegCommandParser+0x5a0>)
     rxData = rxData+size;
 8002376:	1d2e      	adds	r6, r5, #4
 8002378:	e7bf      	b.n	80022fa <RI_SetRegCommandParser+0x326>
 800237a:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 800237e:	d003      	beq.n	8002388 <RI_SetRegCommandParser+0x3b4>
 8002380:	d908      	bls.n	8002394 <RI_SetRegCommandParser+0x3c0>
 8002382:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 8002386:	d113      	bne.n	80023b0 <RI_SetRegCommandParser+0x3dc>
     rxLength = (int16_t) (rxLength - size);
 8002388:	f1a8 0004 	sub.w	r0, r8, #4
 800238c:	b200      	sxth	r0, r0
     rxData = rxData+size;
 800238e:	1d2e      	adds	r6, r5, #4
  uint8_t retVal = MCP_CMD_OK;
 8002390:	2200      	movs	r2, #0
 8002392:	e665      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
 8002394:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 8002398:	f43f af4c 	beq.w	8002234 <RI_SetRegCommandParser+0x260>
 800239c:	d913      	bls.n	80023c6 <RI_SetRegCommandParser+0x3f2>
 800239e:	f5b2 6f2d 	cmp.w	r2, #2768	; 0xad0
 80023a2:	f43f af47 	beq.w	8002234 <RI_SetRegCommandParser+0x260>
 80023a6:	f5b2 6f31 	cmp.w	r2, #2832	; 0xb10
 80023aa:	f43f af43 	beq.w	8002234 <RI_SetRegCommandParser+0x260>
 80023ae:	e767      	b.n	8002280 <RI_SetRegCommandParser+0x2ac>
 80023b0:	f4ff af66 	bcc.w	8002280 <RI_SetRegCommandParser+0x2ac>
 80023b4:	f5b2 6f6d 	cmp.w	r2, #3792	; 0xed0
 80023b8:	f43f af3c 	beq.w	8002234 <RI_SetRegCommandParser+0x260>
 80023bc:	f5b2 6f71 	cmp.w	r2, #3856	; 0xf10
 80023c0:	f43f af38 	beq.w	8002234 <RI_SetRegCommandParser+0x260>
 80023c4:	e75c      	b.n	8002280 <RI_SetRegCommandParser+0x2ac>
 80023c6:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 80023ca:	f5be 6f21 	cmp.w	lr, #2576	; 0xa10
 80023ce:	f43f af31 	beq.w	8002234 <RI_SetRegCommandParser+0x260>
 80023d2:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 80023d6:	f43f af2d 	beq.w	8002234 <RI_SetRegCommandParser+0x260>
 80023da:	e751      	b.n	8002280 <RI_SetRegCommandParser+0x2ac>
 80023dc:	f02e 0e47 	bic.w	lr, lr, #71	; 0x47
 80023e0:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 80023e4:	f43f ae93 	beq.w	800210e <RI_SetRegCommandParser+0x13a>
     rxLength = (int16_t) (rxLength - size);
 80023e8:	ebaa 0008 	sub.w	r0, sl, r8
     rxData = rxData+size;
 80023ec:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 80023ee:	b200      	sxth	r0, r0
          retVal = MCP_ERROR_UNKNOWN_REG;
 80023f0:	2205      	movs	r2, #5
 80023f2:	e635      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80023f4:	2a0a      	cmp	r2, #10
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80023f6:	f04f 0201 	mov.w	r2, #1
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80023fa:	f43f aef7 	beq.w	80021ec <RI_SetRegCommandParser+0x218>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80023fe:	9203      	str	r2, [sp, #12]
 8002400:	e641      	b.n	8002086 <RI_SetRegCommandParser+0xb2>
     rxLength = (int16_t) (rxLength - size);
 8002402:	ebaa 0002 	sub.w	r0, sl, r2
     rxData = rxData+size;
 8002406:	4416      	add	r6, r2
     rxLength = (int16_t) (rxLength - size);
 8002408:	b200      	sxth	r0, r0
      retVal = MCP_ERROR_RO_REG;
 800240a:	2204      	movs	r2, #4
 800240c:	e628      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
     rxLength = (int16_t) (rxLength - size);
 800240e:	f1a8 0003 	sub.w	r0, r8, #3
 8002412:	b200      	sxth	r0, r0
     rxData = rxData+size;
 8002414:	1cee      	adds	r6, r5, #3
      retVal = MCP_ERROR_RO_REG;
 8002416:	2204      	movs	r2, #4
 8002418:	e622      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 800241a:	220a      	movs	r2, #10
 800241c:	e620      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((regdata32*SPEED_UNIT)/_RPM),0);
 800241e:	f8d5 2002 	ldr.w	r2, [r5, #2]
 8002422:	4b56      	ldr	r3, [pc, #344]	; (800257c <RI_SetRegCommandParser+0x5a8>)
 8002424:	fb83 3102 	smull	r3, r1, r3, r2
 8002428:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800242c:	4620      	mov	r0, r4
 800242e:	2200      	movs	r2, #0
 8002430:	b209      	sxth	r1, r1
 8002432:	f7fe feab 	bl	800118c <MCI_ExecSpeedRamp>
     rxLength = (int16_t) (rxLength - size);
 8002436:	f1a8 0006 	sub.w	r0, r8, #6
      break;
 800243a:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 800243c:	1dae      	adds	r6, r5, #6
     rxLength = (int16_t) (rxLength - size);
 800243e:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002440:	2200      	movs	r2, #0
      break;
 8002442:	e60d      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
    uint8_t regdata8 = *data;
 8002444:	78aa      	ldrb	r2, [r5, #2]
        if ((STC_Modality_t)regdata8 == STC_TORQUE_MODE)
 8002446:	b13a      	cbz	r2, 8002458 <RI_SetRegCommandParser+0x484>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 8002448:	2a01      	cmp	r2, #1
 800244a:	d040      	beq.n	80024ce <RI_SetRegCommandParser+0x4fa>
     rxLength = (int16_t) (rxLength - size);
 800244c:	f1a8 0003 	sub.w	r0, r8, #3
 8002450:	b200      	sxth	r0, r0
     rxData = rxData+size;
 8002452:	1cee      	adds	r6, r5, #3
  uint8_t retVal = MCP_CMD_OK;
 8002454:	2200      	movs	r2, #0
 8002456:	e603      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
          MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002458:	4620      	mov	r0, r4
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	f7fe ff7a 	bl	8001354 <MCI_GetTeref>
 8002460:	9a01      	ldr	r2, [sp, #4]
 8002462:	4601      	mov	r1, r0
 8002464:	4620      	mov	r0, r4
 8002466:	f7fe fe9b 	bl	80011a0 <MCI_ExecTorqueRamp>
     rxLength = (int16_t) (rxLength - size);
 800246a:	f1a8 0003 	sub.w	r0, r8, #3
 800246e:	9a01      	ldr	r2, [sp, #4]
 8002470:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 8002472:	1cee      	adds	r6, r5, #3
     rxLength = (int16_t) (rxLength - size);
 8002474:	b200      	sxth	r0, r0
 8002476:	e5f3      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
            MCI_ExecSpeedRamp(pMCI,(int16_t)((rpm*SPEED_UNIT)/_RPM),duration);
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <RI_SetRegCommandParser+0x5a8>)
 800247a:	892a      	ldrh	r2, [r5, #8]
 800247c:	4620      	mov	r0, r4
 800247e:	686c      	ldr	r4, [r5, #4]
 8002480:	fb83 3104 	smull	r3, r1, r3, r4
 8002484:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002488:	b209      	sxth	r1, r1
 800248a:	f7fe fe7f 	bl	800118c <MCI_ExecSpeedRamp>
     rxLength = (int16_t) (rxLength - size);
 800248e:	ebaa 0008 	sub.w	r0, sl, r8
          break;
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 8002494:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 8002496:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002498:	2200      	movs	r2, #0
          break;
 800249a:	e5e1      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
            currComp.q = *((uint16_t *) rawData);
 800249c:	6869      	ldr	r1, [r5, #4]
 800249e:	9105      	str	r1, [sp, #20]
            MCI_SetCurrentReferences(pMCI,currComp);
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7fe fe87 	bl	80011b4 <MCI_SetCurrentReferences>
     rxLength = (int16_t) (rxLength - size);
 80024a6:	ebaa 0008 	sub.w	r0, sl, r8
          break;
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 80024ac:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 80024ae:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80024b0:	2200      	movs	r2, #0
          break;
 80024b2:	e5d5      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
            MCI_ExecTorqueRamp(pMCI,torque,duration);
 80024b4:	892a      	ldrh	r2, [r5, #8]
 80024b6:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7fe fe70 	bl	80011a0 <MCI_ExecTorqueRamp>
     rxLength = (int16_t) (rxLength - size);
 80024c0:	ebaa 0008 	sub.w	r0, sl, r8
          break;
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 80024c6:	4446      	add	r6, r8
     rxLength = (int16_t) (rxLength - size);
 80024c8:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80024ca:	2200      	movs	r2, #0
          break;
 80024cc:	e5c8      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
          MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7fe fee8 	bl	80012a4 <MCI_GetMecSpeedRefUnit>
 80024d4:	2200      	movs	r2, #0
 80024d6:	4601      	mov	r1, r0
 80024d8:	4620      	mov	r0, r4
 80024da:	f7fe fe57 	bl	800118c <MCI_ExecSpeedRamp>
     rxLength = (int16_t) (rxLength - size);
 80024de:	f1a8 0003 	sub.w	r0, r8, #3
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxData = rxData+size;
 80024e4:	1cee      	adds	r6, r5, #3
     rxLength = (int16_t) (rxLength - size);
 80024e6:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80024e8:	2200      	movs	r2, #0
 80024ea:	e5b9      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
  while ((*srcString != 0) && (*size < maxSize) )
 80024ec:	2101      	movs	r1, #1
 80024ee:	46b4      	mov	ip, r6
  *size= 1 ; /* /0 is the min String size */
 80024f0:	460a      	mov	r2, r1
 80024f2:	e627      	b.n	8002144 <RI_SetRegCommandParser+0x170>
      PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <RI_SetRegCommandParser+0x5a4>)
 80024f6:	9a01      	ldr	r2, [sp, #4]
 80024f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80024fc:	f003 fda4 	bl	8006048 <PID_SetKPDivisorPOW2>
      break;
 8002500:	e6ac      	b.n	800225c <RI_SetRegCommandParser+0x288>
      PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002502:	4a1a      	ldr	r2, [pc, #104]	; (800256c <RI_SetRegCommandParser+0x598>)
     rxData = rxData+size;
 8002504:	1d2e      	adds	r6, r5, #4
      PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002506:	9b01      	ldr	r3, [sp, #4]
 8002508:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800250c:	f003 fd9c 	bl	8006048 <PID_SetKPDivisorPOW2>
     rxLength = (int16_t) (rxLength - size);
 8002510:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 8002516:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002518:	2200      	movs	r2, #0
      break;
 800251a:	e5a1      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
      PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800251c:	4a15      	ldr	r2, [pc, #84]	; (8002574 <RI_SetRegCommandParser+0x5a0>)
     rxData = rxData+size;
 800251e:	1d2e      	adds	r6, r5, #4
 8002520:	e7f1      	b.n	8002506 <RI_SetRegCommandParser+0x532>
      PID_SetKD(pPIDSpeed[motorID], regdata16);
 8002522:	4a14      	ldr	r2, [pc, #80]	; (8002574 <RI_SetRegCommandParser+0x5a0>)
 8002524:	b209      	sxth	r1, r1
     rxData = rxData+size;
 8002526:	1d2e      	adds	r6, r5, #4
      PID_SetKD(pPIDIq[motorID], regdata16);
 8002528:	9b01      	ldr	r3, [sp, #4]
 800252a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800252e:	f003 fdad 	bl	800608c <PID_SetKD>
     rxLength = (int16_t) (rxLength - size);
 8002532:	f1a8 0004 	sub.w	r0, r8, #4
     break;
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 8002538:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800253a:	2200      	movs	r2, #0
     break;
 800253c:	e590      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
      PID_SetKP(pPIDId[motorID], regdata16);
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <RI_SetRegCommandParser+0x5a4>)
 8002540:	9a01      	ldr	r2, [sp, #4]
 8002542:	b209      	sxth	r1, r1
 8002544:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002548:	f003 fd6c 	bl	8006024 <PID_SetKP>
     break;
 800254c:	e686      	b.n	800225c <RI_SetRegCommandParser+0x288>
      PID_SetKP(pPIDSpeed[motorID], regdata16);
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <RI_SetRegCommandParser+0x5a0>)
 8002550:	b209      	sxth	r1, r1
     rxData = rxData+size;
 8002552:	1d2e      	adds	r6, r5, #4
      PID_SetKP(pPIDIq[motorID], regdata16);
 8002554:	9b01      	ldr	r3, [sp, #4]
 8002556:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800255a:	f003 fd63 	bl	8006024 <PID_SetKP>
     rxLength = (int16_t) (rxLength - size);
 800255e:	f1a8 0004 	sub.w	r0, r8, #4
     break;
 8002562:	4b03      	ldr	r3, [pc, #12]	; (8002570 <RI_SetRegCommandParser+0x59c>)
     rxLength = (int16_t) (rxLength - size);
 8002564:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002566:	2200      	movs	r2, #0
     break;
 8002568:	e57a      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
 800256a:	bf00      	nop
 800256c:	20000448 	.word	0x20000448
 8002570:	200007d0 	.word	0x200007d0
 8002574:	20000528 	.word	0x20000528
 8002578:	20000444 	.word	0x20000444
 800257c:	2aaaaaab 	.word	0x2aaaaaab
      PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002580:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <RI_SetRegCommandParser+0x614>)
     rxData = rxData+size;
 8002582:	1d2e      	adds	r6, r5, #4
      PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002584:	9b01      	ldr	r3, [sp, #4]
 8002586:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800258a:	f003 fd6b 	bl	8006064 <PID_SetKIDivisorPOW2>
     rxLength = (int16_t) (rxLength - size);
 800258e:	f1a8 0004 	sub.w	r0, r8, #4
      break;
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <RI_SetRegCommandParser+0x618>)
     rxLength = (int16_t) (rxLength - size);
 8002594:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002596:	2200      	movs	r2, #0
      break;
 8002598:	e562      	b.n	8002060 <RI_SetRegCommandParser+0x8c>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800259a:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <RI_SetRegCommandParser+0x61c>)
     rxData = rxData+size;
 800259c:	1d2e      	adds	r6, r5, #4
 800259e:	e7f1      	b.n	8002584 <RI_SetRegCommandParser+0x5b0>
      PID_SetKP(pPIDIq[motorID], regdata16);
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <RI_SetRegCommandParser+0x614>)
 80025a2:	b209      	sxth	r1, r1
     rxData = rxData+size;
 80025a4:	1d2e      	adds	r6, r5, #4
 80025a6:	e7d5      	b.n	8002554 <RI_SetRegCommandParser+0x580>
      PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <RI_SetRegCommandParser+0x620>)
 80025aa:	9a01      	ldr	r2, [sp, #4]
 80025ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80025b0:	f003 fd58 	bl	8006064 <PID_SetKIDivisorPOW2>
      break;
 80025b4:	e652      	b.n	800225c <RI_SetRegCommandParser+0x288>
      PID_SetKD(pPIDIq[motorID], regdata16);
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <RI_SetRegCommandParser+0x614>)
 80025b8:	b209      	sxth	r1, r1
     rxData = rxData+size;
 80025ba:	1d2e      	adds	r6, r5, #4
 80025bc:	e7b4      	b.n	8002528 <RI_SetRegCommandParser+0x554>
      PID_SetKD(pPIDId[motorID], regdata16);
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <RI_SetRegCommandParser+0x620>)
 80025c0:	9a01      	ldr	r2, [sp, #4]
 80025c2:	b209      	sxth	r1, r1
 80025c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80025c8:	f003 fd60 	bl	800608c <PID_SetKD>
     break;
 80025cc:	e646      	b.n	800225c <RI_SetRegCommandParser+0x288>
        currComp = MCI_GetIqdref(pMCI);
 80025ce:	4620      	mov	r0, r4
 80025d0:	9101      	str	r1, [sp, #4]
 80025d2:	f7fe fe95 	bl	8001300 <MCI_GetIqdref>
        currComp.d = regdata16;
 80025d6:	9901      	ldr	r1, [sp, #4]
        currComp = MCI_GetIqdref(pMCI);
 80025d8:	9005      	str	r0, [sp, #20]
     rxData = rxData+size;
 80025da:	1d2e      	adds	r6, r5, #4
        currComp.d = regdata16;
 80025dc:	f8ad 1016 	strh.w	r1, [sp, #22]
 80025e0:	e5dc      	b.n	800219c <RI_SetRegCommandParser+0x1c8>
 80025e2:	9a03      	ldr	r2, [sp, #12]
 80025e4:	e57c      	b.n	80020e0 <RI_SetRegCommandParser+0x10c>
 80025e6:	bf00      	nop
 80025e8:	20000448 	.word	0x20000448
 80025ec:	200007d0 	.word	0x200007d0
 80025f0:	20000528 	.word	0x20000528
 80025f4:	20000444 	.word	0x20000444

080025f8 <RI_GetRegCommandParser>:
{
 80025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t rxLength = pHandle->rxLength;
 80025fc:	f8b0 900c 	ldrh.w	r9, [r0, #12]
  uint8_t * rxData = pHandle->rxBuffer;
 8002600:	f8d0 a004 	ldr.w	sl, [r0, #4]
  uint8_t * txData = pHandle->txBuffer;
 8002604:	6886      	ldr	r6, [r0, #8]
  pHandle->txLength = 0;
 8002606:	2300      	movs	r3, #0
{
 8002608:	b08f      	sub	sp, #60	; 0x3c
  pHandle->txLength = 0;
 800260a:	81c3      	strh	r3, [r0, #14]
  while (rxLength > 0)
 800260c:	f1b9 0f00 	cmp.w	r9, #0
 8002610:	f000 82d7 	beq.w	8002bc2 <RI_GetRegCommandParser+0x5ca>
 8002614:	f8df 8288 	ldr.w	r8, [pc, #648]	; 80028a0 <RI_GetRegCommandParser+0x2a8>
 8002618:	4607      	mov	r7, r0
 800261a:	b20c      	sxth	r4, r1
  uint8_t * rxData = pHandle->rxBuffer;
 800261c:	4655      	mov	r5, sl
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 800261e:	f835 2b02 	ldrh.w	r2, [r5], #2
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002622:	f002 0107 	and.w	r1, r2, #7
 8002626:	3901      	subs	r1, #1
  uint16_t regID = dataID & REG_MASK;
 8002628:	f022 0307 	bic.w	r3, r2, #7
  MCI_Handle_t * pMCI = &Mci[motorID];
 800262c:	fa5f fc81 	uxtb.w	ip, r1
  switch (typeID)
 8002630:	f002 0238 	and.w	r2, r2, #56	; 0x38
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002634:	ebcc 00cc 	rsb	r0, ip, ip, lsl #3
  switch (typeID)
 8002638:	3a08      	subs	r2, #8
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 800263a:	4661      	mov	r1, ip
  uint16_t regID = dataID & REG_MASK;
 800263c:	b29b      	uxth	r3, r3
  MCI_Handle_t * pMCI = &Mci[motorID];
 800263e:	eb08 0b80 	add.w	fp, r8, r0, lsl #2
  switch (typeID)
 8002642:	2a20      	cmp	r2, #32
 8002644:	d812      	bhi.n	800266c <RI_GetRegCommandParser+0x74>
 8002646:	e8df f002 	tbb	[pc, r2]
 800264a:	119e      	.short	0x119e
 800264c:	11111111 	.word	0x11111111
 8002650:	11611111 	.word	0x11611111
 8002654:	11111111 	.word	0x11111111
 8002658:	11a81111 	.word	0x11a81111
 800265c:	11111111 	.word	0x11111111
 8002660:	112c1111 	.word	0x112c1111
 8002664:	11111111 	.word	0x11111111
 8002668:	1111      	.short	0x1111
 800266a:	15          	.byte	0x15
 800266b:	00          	.byte	0x00
 800266c:	2007      	movs	r0, #7
}
 800266e:	b00f      	add	sp, #60	; 0x3c
 8002670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uint8_t * rawData = data+2;
 8002674:	2be8      	cmp	r3, #232	; 0xe8
 8002676:	f106 0202 	add.w	r2, r6, #2
      switch (regID)
 800267a:	f000 826b 	beq.w	8002b54 <RI_GetRegCommandParser+0x55c>
 800267e:	f200 80b3 	bhi.w	80027e8 <RI_GetRegCommandParser+0x1f0>
 8002682:	2b68      	cmp	r3, #104	; 0x68
 8002684:	f000 8279 	beq.w	8002b7a <RI_GetRegCommandParser+0x582>
 8002688:	2ba8      	cmp	r3, #168	; 0xa8
 800268a:	f040 809c 	bne.w	80027c6 <RI_GetRegCommandParser+0x1ce>
        *rawSize = sizeof(ApplicationConfig_reg_t);
 800268e:	f04f 030e 	mov.w	r3, #14
        if ((*rawSize) +2  > freeSpace)
 8002692:	2c0f      	cmp	r4, #15
        *rawSize = sizeof(ApplicationConfig_reg_t);
 8002694:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 8002696:	f300 823d 	bgt.w	8002b14 <RI_GetRegCommandParser+0x51c>
        retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800269a:	2008      	movs	r0, #8
}
 800269c:	b00f      	add	sp, #60	; 0x3c
 800269e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (regID)
 80026a2:	2ba0      	cmp	r3, #160	; 0xa0
 80026a4:	f000 81f9 	beq.w	8002a9a <RI_GetRegCommandParser+0x4a2>
 80026a8:	f200 80b8 	bhi.w	800281c <RI_GetRegCommandParser+0x224>
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	f000 820d 	beq.w	8002acc <RI_GetRegCommandParser+0x4d4>
 80026b2:	2b60      	cmp	r3, #96	; 0x60
 80026b4:	d16f      	bne.n	8002796 <RI_GetRegCommandParser+0x19e>
  while ((*srcString != 0) && (*size < maxSize) )
 80026b6:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <RI_GetRegCommandParser+0x2ac>)
 80026b8:	7818      	ldrb	r0, [r3, #0]
 80026ba:	2800      	cmp	r0, #0
 80026bc:	f000 823c 	beq.w	8002b38 <RI_GetRegCommandParser+0x540>
 80026c0:	2c01      	cmp	r4, #1
 80026c2:	f340 81dd 	ble.w	8002a80 <RI_GetRegCommandParser+0x488>
 80026c6:	469e      	mov	lr, r3
 80026c8:	46b4      	mov	ip, r6
 80026ca:	f1c6 0101 	rsb	r1, r6, #1
 80026ce:	e002      	b.n	80026d6 <RI_GetRegCommandParser+0xde>
 80026d0:	429c      	cmp	r4, r3
 80026d2:	f340 81d5 	ble.w	8002a80 <RI_GetRegCommandParser+0x488>
    *destString = *srcString ;
 80026d6:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*srcString != 0) && (*size < maxSize) )
 80026da:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 80026de:	eb0c 0301 	add.w	r3, ip, r1
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2800      	cmp	r0, #0
 80026e6:	d1f3      	bne.n	80026d0 <RI_GetRegCommandParser+0xd8>
       txData = txData+size;
 80026e8:	4619      	mov	r1, r3
    *destString = 0;
 80026ea:	2200      	movs	r2, #0
 80026ec:	f88c 2000 	strb.w	r2, [ip]
       pHandle->txLength += size;
 80026f0:	89fa      	ldrh	r2, [r7, #14]
       freeSpaceS16 = freeSpaceS16-size;
 80026f2:	1ae4      	subs	r4, r4, r3
       pHandle->txLength += size;
 80026f4:	441a      	add	r2, r3
  while (rxLength > 0)
 80026f6:	eb0a 0309 	add.w	r3, sl, r9
 80026fa:	b29b      	uxth	r3, r3
       pHandle->txLength += size;
 80026fc:	81fa      	strh	r2, [r7, #14]
  while (rxLength > 0)
 80026fe:	b2aa      	uxth	r2, r5
 8002700:	429a      	cmp	r2, r3
       txData = txData+size;
 8002702:	440e      	add	r6, r1
       freeSpaceS16 = freeSpaceS16-size;
 8002704:	b224      	sxth	r4, r4
  while (rxLength > 0)
 8002706:	d18a      	bne.n	800261e <RI_GetRegCommandParser+0x26>
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002708:	2000      	movs	r0, #0
 800270a:	e7b0      	b.n	800266e <RI_GetRegCommandParser+0x76>
      if (freeSpace >= 2 )
 800270c:	2c01      	cmp	r4, #1
 800270e:	ddc4      	ble.n	800269a <RI_GetRegCommandParser+0xa2>
        switch (regID)
 8002710:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002714:	f000 8259 	beq.w	8002bca <RI_GetRegCommandParser+0x5d2>
 8002718:	f200 80e1 	bhi.w	80028de <RI_GetRegCommandParser+0x2e6>
 800271c:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8002720:	f000 82b5 	beq.w	8002c8e <RI_GetRegCommandParser+0x696>
 8002724:	d917      	bls.n	8002756 <RI_GetRegCommandParser+0x15e>
 8002726:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800272a:	f000 82a8 	beq.w	8002c7e <RI_GetRegCommandParser+0x686>
 800272e:	f240 80c3 	bls.w	80028b8 <RI_GetRegCommandParser+0x2c0>
 8002732:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002736:	f000 829a 	beq.w	8002c6e <RI_GetRegCommandParser+0x676>
 800273a:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 800273e:	f040 80a1 	bne.w	8002884 <RI_GetRegCommandParser+0x28c>
          *regdata16 = MCI_GetIqd(pMCI).d;
 8002742:	4658      	mov	r0, fp
 8002744:	f7fe fdce 	bl	80012e4 <MCI_GetIqd>
         break;
 8002748:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIqd(pMCI).d;
 800274a:	9008      	str	r0, [sp, #32]
 800274c:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002750:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002752:	460b      	mov	r3, r1
         break;
 8002754:	e7cc      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 8002756:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 800275a:	f000 8286 	beq.w	8002c6a <RI_GetRegCommandParser+0x672>
 800275e:	f240 80fe 	bls.w	800295e <RI_GetRegCommandParser+0x366>
 8002762:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8002766:	f000 82a7 	beq.w	8002cb8 <RI_GetRegCommandParser+0x6c0>
 800276a:	f240 80d6 	bls.w	800291a <RI_GetRegCommandParser+0x322>
 800276e:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002772:	d110      	bne.n	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8002774:	4b4c      	ldr	r3, [pc, #304]	; (80028a8 <RI_GetRegCommandParser+0x2b0>)
 8002776:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800277a:	f003 fc89 	bl	8006090 <PID_GetKD>
         break;
 800277e:	2102      	movs	r1, #2
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8002780:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002782:	460b      	mov	r3, r1
         break;
 8002784:	e7b4      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
      if (freeSpace > 0 )
 8002786:	2c00      	cmp	r4, #0
 8002788:	dd87      	ble.n	800269a <RI_GetRegCommandParser+0xa2>
        switch (regID)
 800278a:	2b48      	cmp	r3, #72	; 0x48
 800278c:	f000 817a 	beq.w	8002a84 <RI_GetRegCommandParser+0x48c>
 8002790:	2b88      	cmp	r3, #136	; 0x88
 8002792:	f000 816e 	beq.w	8002a72 <RI_GetRegCommandParser+0x47a>
 8002796:	2005      	movs	r0, #5
  return retVal;
 8002798:	e769      	b.n	800266e <RI_GetRegCommandParser+0x76>
      if ( freeSpace >= 4)
 800279a:	2c03      	cmp	r4, #3
 800279c:	f77f af7d 	ble.w	800269a <RI_GetRegCommandParser+0xa2>
        switch (regID)
 80027a0:	2b58      	cmp	r3, #88	; 0x58
 80027a2:	f000 81b3 	beq.w	8002b0c <RI_GetRegCommandParser+0x514>
 80027a6:	2b98      	cmp	r3, #152	; 0x98
 80027a8:	f000 81a6 	beq.w	8002af8 <RI_GetRegCommandParser+0x500>
 80027ac:	2b18      	cmp	r3, #24
 80027ae:	d1f2      	bne.n	8002796 <RI_GetRegCommandParser+0x19e>
          *regdataU32 = STM_GetFaultState(&STM[motorID]);
 80027b0:	483e      	ldr	r0, [pc, #248]	; (80028ac <RI_GetRegCommandParser+0x2b4>)
 80027b2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80027b6:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 80027ba:	f004 fcc3 	bl	8007144 <STM_GetFaultState>
 80027be:	2104      	movs	r1, #4
 80027c0:	6030      	str	r0, [r6, #0]
        *size = 4;
 80027c2:	460b      	mov	r3, r1
 80027c4:	e794      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 80027c6:	2b28      	cmp	r3, #40	; 0x28
 80027c8:	d1e5      	bne.n	8002796 <RI_GetRegCommandParser+0x19e>
        *rawSize = sizeof(GlobalConfig_reg_t);
 80027ca:	230a      	movs	r3, #10
        if ((*rawSize) +2  > freeSpace)
 80027cc:	2c0b      	cmp	r4, #11
        *rawSize = sizeof(GlobalConfig_reg_t);
 80027ce:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 80027d0:	f77f af63 	ble.w	800269a <RI_GetRegCommandParser+0xa2>
          memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t) );
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <RI_GetRegCommandParser+0x2b8>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	6010      	str	r0, [r2, #0]
 80027da:	210c      	movs	r1, #12
 80027dc:	6858      	ldr	r0, [r3, #4]
 80027de:	891b      	ldrh	r3, [r3, #8]
 80027e0:	8113      	strh	r3, [r2, #8]
 80027e2:	6050      	str	r0, [r2, #4]
      *size = (*rawSize)+2;
 80027e4:	460b      	mov	r3, r1
 80027e6:	e783      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 80027e8:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80027ec:	f000 81a8 	beq.w	8002b40 <RI_GetRegCommandParser+0x548>
 80027f0:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80027f4:	d132      	bne.n	800285c <RI_GetRegCommandParser+0x264>
        *rawSize = 4;
 80027f6:	2304      	movs	r3, #4
 80027f8:	8033      	strh	r3, [r6, #0]
        *iqref = MCI_GetIqdref(pMCI).q;
 80027fa:	4658      	mov	r0, fp
 80027fc:	f7fe fd80 	bl	8001300 <MCI_GetIqdref>
 8002800:	8070      	strh	r0, [r6, #2]
 8002802:	9001      	str	r0, [sp, #4]
        *idref = MCI_GetIqdref(pMCI).d;
 8002804:	4658      	mov	r0, fp
 8002806:	f7fe fd7b 	bl	8001300 <MCI_GetIqdref>
 800280a:	9000      	str	r0, [sp, #0]
 800280c:	f3c0 400f 	ubfx	r0, r0, #16, #16
      *size = (*rawSize)+2;
 8002810:	8832      	ldrh	r2, [r6, #0]
        *idref = MCI_GetIqdref(pMCI).d;
 8002812:	80b0      	strh	r0, [r6, #4]
      *size = (*rawSize)+2;
 8002814:	3202      	adds	r2, #2
 8002816:	b293      	uxth	r3, r2
       txData = txData+size;
 8002818:	4619      	mov	r1, r3
 800281a:	e769      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 800281c:	2be0      	cmp	r3, #224	; 0xe0
 800281e:	d1ba      	bne.n	8002796 <RI_GetRegCommandParser+0x19e>
        retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002820:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <RI_GetRegCommandParser+0x2bc>)
 8002822:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8002826:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 800282a:	2800      	cmp	r0, #0
 800282c:	f000 8184 	beq.w	8002b38 <RI_GetRegCommandParser+0x540>
 8002830:	2c01      	cmp	r4, #1
 8002832:	f340 8125 	ble.w	8002a80 <RI_GetRegCommandParser+0x488>
 8002836:	f103 0e24 	add.w	lr, r3, #36	; 0x24
 800283a:	46b4      	mov	ip, r6
 800283c:	f1c6 0101 	rsb	r1, r6, #1
 8002840:	e002      	b.n	8002848 <RI_GetRegCommandParser+0x250>
 8002842:	42a3      	cmp	r3, r4
 8002844:	f280 811c 	bge.w	8002a80 <RI_GetRegCommandParser+0x488>
    *destString = *srcString ;
 8002848:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*srcString != 0) && (*size < maxSize) )
 800284c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8002850:	eb0c 0301 	add.w	r3, ip, r1
 8002854:	b29b      	uxth	r3, r3
 8002856:	2800      	cmp	r0, #0
 8002858:	d1f3      	bne.n	8002842 <RI_GetRegCommandParser+0x24a>
 800285a:	e745      	b.n	80026e8 <RI_GetRegCommandParser+0xf0>
 800285c:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002860:	d199      	bne.n	8002796 <RI_GetRegCommandParser+0x19e>
          *rpm = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002862:	4658      	mov	r0, fp
 8002864:	f7fe fd08 	bl	8001278 <MCI_GetLastRampFinalSpeed>
 8002868:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800286c:	0040      	lsls	r0, r0, #1
 800286e:	f8c6 0002 	str.w	r0, [r6, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002872:	4658      	mov	r0, fp
 8002874:	f7fe fd08 	bl	8001288 <MCI_GetLastRampFinalDuration>
          *rawSize = 6;
 8002878:	2306      	movs	r3, #6
 800287a:	2108      	movs	r1, #8
 800287c:	8033      	strh	r3, [r6, #0]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 800287e:	80f0      	strh	r0, [r6, #6]
      *size = (*rawSize)+2;
 8002880:	460b      	mov	r3, r1
 8002882:	e735      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 8002884:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002888:	d185      	bne.n	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 800288a:	4658      	mov	r0, fp
 800288c:	f7fe fd1c 	bl	80012c8 <MCI_GetIalphabeta>
         break;
 8002890:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8002892:	900a      	str	r0, [sp, #40]	; 0x28
 8002894:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002898:	8030      	strh	r0, [r6, #0]
        *size = 2;
 800289a:	460b      	mov	r3, r1
         break;
 800289c:	e728      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 800289e:	bf00      	nop
 80028a0:	200007d0 	.word	0x200007d0
 80028a4:	08007cf4 	.word	0x08007cf4
 80028a8:	20000444 	.word	0x20000444
 80028ac:	20000800 	.word	0x20000800
 80028b0:	08007d88 	.word	0x08007d88
 80028b4:	2000045c 	.word	0x2000045c
 80028b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028bc:	f000 8191 	beq.w	8002be2 <RI_GetRegCommandParser+0x5ea>
 80028c0:	d93c      	bls.n	800293c <RI_GetRegCommandParser+0x344>
 80028c2:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80028c6:	f47f af66 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = MCI_GetIab(pMCI).b;
 80028ca:	4658      	mov	r0, fp
 80028cc:	f7fe fcee 	bl	80012ac <MCI_GetIab>
         break;
 80028d0:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIab(pMCI).b;
 80028d2:	900c      	str	r0, [sp, #48]	; 0x30
 80028d4:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80028d8:	8030      	strh	r0, [r6, #0]
        *size = 2;
 80028da:	460b      	mov	r3, r1
         break;
 80028dc:	e708      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 80028de:	f241 4250 	movw	r2, #5200	; 0x1450
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f000 81a6 	beq.w	8002c34 <RI_GetRegCommandParser+0x63c>
 80028e8:	d966      	bls.n	80029b8 <RI_GetRegCommandParser+0x3c0>
 80028ea:	f241 5290 	movw	r2, #5520	; 0x1590
 80028ee:	4293      	cmp	r3, r2
 80028f0:	f000 81b9 	beq.w	8002c66 <RI_GetRegCommandParser+0x66e>
 80028f4:	d94c      	bls.n	8002990 <RI_GetRegCommandParser+0x398>
 80028f6:	f241 6210 	movw	r2, #5648	; 0x1610
 80028fa:	4293      	cmp	r3, r2
 80028fc:	f000 819c 	beq.w	8002c38 <RI_GetRegCommandParser+0x640>
 8002900:	f241 6250 	movw	r2, #5712	; 0x1650
 8002904:	4293      	cmp	r3, r2
 8002906:	d135      	bne.n	8002974 <RI_GetRegCommandParser+0x37c>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8002908:	4bba      	ldr	r3, [pc, #744]	; (8002bf4 <RI_GetRegCommandParser+0x5fc>)
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 800290a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800290e:	f003 fbc3 	bl	8006098 <PID_GetKDDivisorPOW2>
 8002912:	2102      	movs	r1, #2
 8002914:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002916:	460b      	mov	r3, r1
 8002918:	e6ea      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 800291a:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800291e:	f000 8152 	beq.w	8002bc6 <RI_GetRegCommandParser+0x5ce>
 8002922:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8002926:	f47f af36 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 800292a:	4bb3      	ldr	r3, [pc, #716]	; (8002bf8 <RI_GetRegCommandParser+0x600>)
 800292c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002930:	f003 fb7c 	bl	800602c <PID_GetKP>
         break;
 8002934:	2102      	movs	r1, #2
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 8002936:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002938:	460b      	mov	r3, r1
         break;
 800293a:	e6d9      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 800293c:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8002940:	f000 81bc 	beq.w	8002cbc <RI_GetRegCommandParser+0x6c4>
 8002944:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8002948:	f47f af25 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 800294c:	4bab      	ldr	r3, [pc, #684]	; (8002bfc <RI_GetRegCommandParser+0x604>)
 800294e:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002952:	f003 fb05 	bl	8005f60 <MPM_GetAvrgElMotorPowerW>
         break;
 8002956:	2102      	movs	r1, #2
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 8002958:	8030      	strh	r0, [r6, #0]
        *size = 2;
 800295a:	460b      	mov	r3, r1
         break;
 800295c:	e6c8      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 800295e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002962:	f000 813c 	beq.w	8002bde <RI_GetRegCommandParser+0x5e6>
 8002966:	d965      	bls.n	8002a34 <RI_GetRegCommandParser+0x43c>
 8002968:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800296c:	f47f af13 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8002970:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <RI_GetRegCommandParser+0x5fc>)
 8002972:	e7db      	b.n	800292c <RI_GetRegCommandParser+0x334>
 8002974:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002978:	4293      	cmp	r3, r2
 800297a:	f47f af0c 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 800297e:	4b9d      	ldr	r3, [pc, #628]	; (8002bf4 <RI_GetRegCommandParser+0x5fc>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8002980:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002984:	f003 fb5c 	bl	8006040 <PID_GetKPDivisorPOW2>
 8002988:	2102      	movs	r1, #2
 800298a:	8030      	strh	r0, [r6, #0]
        *size = 2;
 800298c:	460b      	mov	r3, r1
 800298e:	e6af      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 8002990:	f241 5210 	movw	r2, #5392	; 0x1510
 8002994:	4293      	cmp	r3, r2
 8002996:	f000 8120 	beq.w	8002bda <RI_GetRegCommandParser+0x5e2>
 800299a:	d924      	bls.n	80029e6 <RI_GetRegCommandParser+0x3ee>
 800299c:	f241 5250 	movw	r2, #5456	; 0x1550
 80029a0:	4293      	cmp	r3, r2
 80029a2:	f47f aef8 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 80029a6:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <RI_GetRegCommandParser+0x600>)
 80029a8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80029ac:	f003 fb52 	bl	8006054 <PID_GetKIDivisorPOW2>
 80029b0:	2102      	movs	r1, #2
 80029b2:	8030      	strh	r0, [r6, #0]
        *size = 2;
 80029b4:	460b      	mov	r3, r1
 80029b6:	e69b      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 80029b8:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80029bc:	f000 8130 	beq.w	8002c20 <RI_GetRegCommandParser+0x628>
 80029c0:	d927      	bls.n	8002a12 <RI_GetRegCommandParser+0x41a>
 80029c2:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 80029c6:	f000 8145 	beq.w	8002c54 <RI_GetRegCommandParser+0x65c>
 80029ca:	d918      	bls.n	80029fe <RI_GetRegCommandParser+0x406>
 80029cc:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 80029d0:	f47f aee1 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 80029d4:	4b8a      	ldr	r3, [pc, #552]	; (8002c00 <RI_GetRegCommandParser+0x608>)
 80029d6:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80029da:	f004 fa33 	bl	8006e44 <SPD_GetS16Speed>
 80029de:	2102      	movs	r1, #2
 80029e0:	8030      	strh	r0, [r6, #0]
        *size = 2;
 80029e2:	460b      	mov	r3, r1
 80029e4:	e684      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 80029e6:	f241 4290 	movw	r2, #5264	; 0x1490
 80029ea:	4293      	cmp	r3, r2
 80029ec:	f000 8130 	beq.w	8002c50 <RI_GetRegCommandParser+0x658>
 80029f0:	f241 42d0 	movw	r2, #5328	; 0x14d0
 80029f4:	4293      	cmp	r3, r2
 80029f6:	f47f aece 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 80029fa:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <RI_GetRegCommandParser+0x60c>)
 80029fc:	e785      	b.n	800290a <RI_GetRegCommandParser+0x312>
 80029fe:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002a02:	d003      	beq.n	8002a0c <RI_GetRegCommandParser+0x414>
 8002a04:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002a08:	f47f aec5 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	460b      	mov	r3, r1
 8002a10:	e66e      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 8002a12:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8002a16:	f000 8111 	beq.w	8002c3c <RI_GetRegCommandParser+0x644>
 8002a1a:	d91a      	bls.n	8002a52 <RI_GetRegCommandParser+0x45a>
 8002a1c:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002a20:	f47f aeb9 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8002a24:	4658      	mov	r0, fp
 8002a26:	f7fe fc87 	bl	8001338 <MCI_GetValphabeta>
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	9003      	str	r0, [sp, #12]
        *size = 2;
 8002a2e:	460b      	mov	r3, r1
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8002a30:	8030      	strh	r0, [r6, #0]
     if (retVal == MCP_CMD_OK )
 8002a32:	e65d      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 8002a34:	2b90      	cmp	r3, #144	; 0x90
 8002a36:	f000 8133 	beq.w	8002ca0 <RI_GetRegCommandParser+0x6a8>
 8002a3a:	2bd0      	cmp	r3, #208	; 0xd0
 8002a3c:	f47f aeab 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8002a40:	4b70      	ldr	r3, [pc, #448]	; (8002c04 <RI_GetRegCommandParser+0x60c>)
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002a42:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002a46:	f003 faf5 	bl	8006034 <PID_GetKI>
         break;
 8002a4a:	2102      	movs	r1, #2
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002a4c:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002a4e:	460b      	mov	r3, r1
         break;
 8002a50:	e64e      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 8002a52:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002a56:	f000 8125 	beq.w	8002ca4 <RI_GetRegCommandParser+0x6ac>
 8002a5a:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002a5e:	f47f ae9a 	bne.w	8002796 <RI_GetRegCommandParser+0x19e>
          *regdata16 = MCI_GetVqd(pMCI).q;
 8002a62:	4658      	mov	r0, fp
 8002a64:	f7fe fc5a 	bl	800131c <MCI_GetVqd>
 8002a68:	2102      	movs	r1, #2
 8002a6a:	9005      	str	r0, [sp, #20]
        *size = 2;
 8002a6c:	460b      	mov	r3, r1
          *regdata16 = MCI_GetVqd(pMCI).q;
 8002a6e:	8030      	strh	r0, [r6, #0]
     if (retVal == MCP_CMD_OK )
 8002a70:	e63e      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
          *data =  MCI_GetControlMode(pMCI);
 8002a72:	4658      	mov	r0, fp
 8002a74:	f7fe fbfe 	bl	8001274 <MCI_GetControlMode>
          break;
 8002a78:	2101      	movs	r1, #1
          *data =  MCI_GetControlMode(pMCI);
 8002a7a:	7030      	strb	r0, [r6, #0]
        *size = 1;
 8002a7c:	460b      	mov	r3, r1
          break;
 8002a7e:	e637      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002a80:	2006      	movs	r0, #6
 8002a82:	e5f4      	b.n	800266e <RI_GetRegCommandParser+0x76>
          *data = STM_GetState(&STM[motorID]);
 8002a84:	4860      	ldr	r0, [pc, #384]	; (8002c08 <RI_GetRegCommandParser+0x610>)
 8002a86:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8002a8a:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 8002a8e:	f004 fb4b 	bl	8007128 <STM_GetState>
 8002a92:	2101      	movs	r1, #1
 8002a94:	7030      	strb	r0, [r6, #0]
        *size = 1;
 8002a96:	460b      	mov	r3, r1
 8002a98:	e62a      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
        retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	; (8002c0c <RI_GetRegCommandParser+0x614>)
 8002a9c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8002aa0:	7818      	ldrb	r0, [r3, #0]
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d048      	beq.n	8002b38 <RI_GetRegCommandParser+0x540>
 8002aa6:	2c01      	cmp	r4, #1
 8002aa8:	ddea      	ble.n	8002a80 <RI_GetRegCommandParser+0x488>
 8002aaa:	469e      	mov	lr, r3
 8002aac:	46b4      	mov	ip, r6
 8002aae:	f1c6 0101 	rsb	r1, r6, #1
 8002ab2:	e001      	b.n	8002ab8 <RI_GetRegCommandParser+0x4c0>
 8002ab4:	42a3      	cmp	r3, r4
 8002ab6:	dae3      	bge.n	8002a80 <RI_GetRegCommandParser+0x488>
    *destString = *srcString ;
 8002ab8:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002abc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8002ac0:	eb0c 0301 	add.w	r3, ip, r1
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d1f4      	bne.n	8002ab4 <RI_GetRegCommandParser+0x4bc>
 8002aca:	e60d      	b.n	80026e8 <RI_GetRegCommandParser+0xf0>
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <RI_GetRegCommandParser+0x618>)
 8002ace:	7818      	ldrb	r0, [r3, #0]
 8002ad0:	b390      	cbz	r0, 8002b38 <RI_GetRegCommandParser+0x540>
 8002ad2:	2c01      	cmp	r4, #1
 8002ad4:	ddd4      	ble.n	8002a80 <RI_GetRegCommandParser+0x488>
 8002ad6:	469e      	mov	lr, r3
 8002ad8:	46b4      	mov	ip, r6
 8002ada:	f1c6 0101 	rsb	r1, r6, #1
 8002ade:	e001      	b.n	8002ae4 <RI_GetRegCommandParser+0x4ec>
 8002ae0:	42a3      	cmp	r3, r4
 8002ae2:	dacd      	bge.n	8002a80 <RI_GetRegCommandParser+0x488>
    *destString = *srcString ;
 8002ae4:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002ae8:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8002aec:	eb0c 0301 	add.w	r3, ip, r1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d1f4      	bne.n	8002ae0 <RI_GetRegCommandParser+0x4e8>
 8002af6:	e5f7      	b.n	80026e8 <RI_GetRegCommandParser+0xf0>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002af8:	4658      	mov	r0, fp
 8002afa:	f7fe fbd3 	bl	80012a4 <MCI_GetMecSpeedRefUnit>
 8002afe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b02:	0040      	lsls	r0, r0, #1
 8002b04:	2104      	movs	r1, #4
 8002b06:	6030      	str	r0, [r6, #0]
        *size = 4;
 8002b08:	460b      	mov	r3, r1
 8002b0a:	e5f1      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
          *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002b0c:	4658      	mov	r0, fp
 8002b0e:	f7fe fbc1 	bl	8001294 <MCI_GetAvrgMecSpeedUnit>
 8002b12:	e7f4      	b.n	8002afe <RI_GetRegCommandParser+0x506>
          memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8002b14:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <RI_GetRegCommandParser+0x61c>)
 8002b16:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002b1a:	f8d3 c000 	ldr.w	ip, [r3]
 8002b1e:	6858      	ldr	r0, [r3, #4]
 8002b20:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8002b24:	f8c2 e008 	str.w	lr, [r2, #8]
 8002b28:	f8c2 c000 	str.w	ip, [r2]
 8002b2c:	6050      	str	r0, [r2, #4]
 8002b2e:	899b      	ldrh	r3, [r3, #12]
 8002b30:	8193      	strh	r3, [r2, #12]
 8002b32:	2110      	movs	r1, #16
      *size = (*rawSize)+2;
 8002b34:	460b      	mov	r3, r1
 8002b36:	e5db      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
  while ((*srcString != 0) && (*size < maxSize) )
 8002b38:	2101      	movs	r1, #1
 8002b3a:	46b4      	mov	ip, r6
  *size= 1 ; /* /0 is the min String size */
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	e5d4      	b.n	80026ea <RI_GetRegCommandParser+0xf2>
          *rawSize = 4;
 8002b40:	2304      	movs	r3, #4
 8002b42:	8033      	strh	r3, [r6, #0]
          *torque = MCI_GetLastRampFinalTorque(pMCI);
 8002b44:	4658      	mov	r0, fp
 8002b46:	f7fe fb9b 	bl	8001280 <MCI_GetLastRampFinalTorque>
 8002b4a:	8070      	strh	r0, [r6, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002b4c:	4658      	mov	r0, fp
 8002b4e:	f7fe fb9b 	bl	8001288 <MCI_GetLastRampFinalDuration>
 8002b52:	e65d      	b.n	8002810 <RI_GetRegCommandParser+0x218>
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8002b54:	230c      	movs	r3, #12
        if ((*rawSize) +2  > freeSpace)
 8002b56:	2c0d      	cmp	r4, #13
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8002b58:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 8002b5a:	f77f ad9e 	ble.w	800269a <RI_GetRegCommandParser+0xa2>
          memcpy(rawData, FOCConfig_reg[motorID], sizeof(FOCFwConfig_reg_t) );
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <RI_GetRegCommandParser+0x620>)
 8002b60:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002b64:	210e      	movs	r1, #14
 8002b66:	f8d3 c000 	ldr.w	ip, [r3]
 8002b6a:	6858      	ldr	r0, [r3, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	6093      	str	r3, [r2, #8]
 8002b70:	f8c2 c000 	str.w	ip, [r2]
 8002b74:	6050      	str	r0, [r2, #4]
      *size = (*rawSize)+2;
 8002b76:	460b      	mov	r3, r1
 8002b78:	e5ba      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
        *rawSize = sizeof(MotorConfig_reg_t);
 8002b7a:	233c      	movs	r3, #60	; 0x3c
        if ((*rawSize) +2  > freeSpace)
 8002b7c:	2c3d      	cmp	r4, #61	; 0x3d
        *rawSize = sizeof(MotorConfig_reg_t);
 8002b7e:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 8002b80:	f77f ad8b 	ble.w	800269a <RI_GetRegCommandParser+0xa2>
          memcpy(rawData, MotorConfig_reg[motorID], sizeof(MotorConfig_reg_t) );
 8002b84:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <RI_GetRegCommandParser+0x624>)
 8002b86:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002b8a:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8002b8e:	f8d3 c000 	ldr.w	ip, [r3]
 8002b92:	6858      	ldr	r0, [r3, #4]
 8002b94:	6899      	ldr	r1, [r3, #8]
 8002b96:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8002b9a:	f8c2 e00c 	str.w	lr, [r2, #12]
 8002b9e:	3310      	adds	r3, #16
 8002ba0:	455b      	cmp	r3, fp
 8002ba2:	f8c2 c000 	str.w	ip, [r2]
 8002ba6:	6050      	str	r0, [r2, #4]
 8002ba8:	6091      	str	r1, [r2, #8]
 8002baa:	f102 0210 	add.w	r2, r2, #16
 8002bae:	d1ee      	bne.n	8002b8e <RI_GetRegCommandParser+0x596>
 8002bb0:	6859      	ldr	r1, [r3, #4]
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	6051      	str	r1, [r2, #4]
 8002bb8:	213e      	movs	r1, #62	; 0x3e
 8002bba:	6093      	str	r3, [r2, #8]
 8002bbc:	6010      	str	r0, [r2, #0]
      *size = (*rawSize)+2;
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	e596      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
  uint8_t retVal = MCP_CMD_NOK;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	e553      	b.n	800266e <RI_GetRegCommandParser+0x76>
          *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <RI_GetRegCommandParser+0x5fc>)
 8002bc8:	e5d5      	b.n	8002776 <RI_GetRegCommandParser+0x17e>
          *regdata16 = MCI_GetIqdref(pMCI).q;
 8002bca:	4658      	mov	r0, fp
 8002bcc:	f7fe fb98 	bl	8001300 <MCI_GetIqdref>
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	9007      	str	r0, [sp, #28]
        *size = 2;
 8002bd4:	460b      	mov	r3, r1
          *regdata16 = MCI_GetIqdref(pMCI).q;
 8002bd6:	8030      	strh	r0, [r6, #0]
     if (retVal == MCP_CMD_OK )
 8002bd8:	e58a      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <RI_GetRegCommandParser+0x600>)
 8002bdc:	e6d0      	b.n	8002980 <RI_GetRegCommandParser+0x388>
          *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <RI_GetRegCommandParser+0x60c>)
 8002be0:	e5c9      	b.n	8002776 <RI_GetRegCommandParser+0x17e>
          *regdata16 = MCI_GetIab(pMCI).a;
 8002be2:	4658      	mov	r0, fp
 8002be4:	f7fe fb62 	bl	80012ac <MCI_GetIab>
         break;
 8002be8:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIab(pMCI).a;
 8002bea:	900d      	str	r0, [sp, #52]	; 0x34
        *size = 2;
 8002bec:	460b      	mov	r3, r1
          *regdata16 = MCI_GetIab(pMCI).a;
 8002bee:	8030      	strh	r0, [r6, #0]
         break;
 8002bf0:	e57e      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 8002bf2:	bf00      	nop
 8002bf4:	20000448 	.word	0x20000448
 8002bf8:	20000444 	.word	0x20000444
 8002bfc:	20000440 	.word	0x20000440
 8002c00:	20000524 	.word	0x20000524
 8002c04:	20000528 	.word	0x20000528
 8002c08:	20000800 	.word	0x20000800
 8002c0c:	20000460 	.word	0x20000460
 8002c10:	08007d04 	.word	0x08007d04
 8002c14:	20000454 	.word	0x20000454
 8002c18:	20000458 	.word	0x20000458
 8002c1c:	2000045c 	.word	0x2000045c
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 8002c20:	4658      	mov	r0, fp
 8002c22:	f7fe fb89 	bl	8001338 <MCI_GetValphabeta>
 8002c26:	2102      	movs	r1, #2
 8002c28:	9002      	str	r0, [sp, #8]
 8002c2a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002c2e:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002c30:	460b      	mov	r3, r1
 8002c32:	e55d      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <RI_GetRegCommandParser+0x6d8>)
 8002c36:	e6a3      	b.n	8002980 <RI_GetRegCommandParser+0x388>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8002c38:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <RI_GetRegCommandParser+0x6dc>)
 8002c3a:	e6b5      	b.n	80029a8 <RI_GetRegCommandParser+0x3b0>
          *regdata16 = MCI_GetVqd(pMCI).d;
 8002c3c:	4658      	mov	r0, fp
 8002c3e:	f7fe fb6d 	bl	800131c <MCI_GetVqd>
 8002c42:	2102      	movs	r1, #2
 8002c44:	9004      	str	r0, [sp, #16]
 8002c46:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002c4a:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	e54f      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <RI_GetRegCommandParser+0x6d8>)
 8002c52:	e6a9      	b.n	80029a8 <RI_GetRegCommandParser+0x3b0>
          *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 8002c54:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <RI_GetRegCommandParser+0x6e0>)
 8002c56:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002c5a:	f004 f8b1 	bl	8006dc0 <SPD_GetElAngle>
 8002c5e:	2102      	movs	r1, #2
 8002c60:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002c62:	460b      	mov	r3, r1
 8002c64:	e544      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <RI_GetRegCommandParser+0x6e4>)
 8002c68:	e64f      	b.n	800290a <RI_GetRegCommandParser+0x312>
          *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <RI_GetRegCommandParser+0x6dc>)
 8002c6c:	e6e9      	b.n	8002a42 <RI_GetRegCommandParser+0x44a>
          *regdata16 = MCI_GetIqd(pMCI).q;
 8002c6e:	4658      	mov	r0, fp
 8002c70:	f7fe fb38 	bl	80012e4 <MCI_GetIqd>
         break;
 8002c74:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIqd(pMCI).q;
 8002c76:	9009      	str	r0, [sp, #36]	; 0x24
        *size = 2;
 8002c78:	460b      	mov	r3, r1
          *regdata16 = MCI_GetIqd(pMCI).q;
 8002c7a:	8030      	strh	r0, [r6, #0]
         break;
 8002c7c:	e538      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8002c7e:	4658      	mov	r0, fp
 8002c80:	f7fe fb22 	bl	80012c8 <MCI_GetIalphabeta>
         break;
 8002c84:	2102      	movs	r1, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8002c86:	900b      	str	r0, [sp, #44]	; 0x2c
        *size = 2;
 8002c88:	460b      	mov	r3, r1
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8002c8a:	8030      	strh	r0, [r6, #0]
         break;
 8002c8c:	e530      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <RI_GetRegCommandParser+0x6e8>)
 8002c90:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002c94:	f002 fac6 	bl	8005224 <VBS_GetAvBusVoltage_V>
         break;
 8002c98:	2102      	movs	r1, #2
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8002c9a:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002c9c:	460b      	mov	r3, r1
         break;
 8002c9e:	e527      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
          *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <RI_GetRegCommandParser+0x6d8>)
 8002ca2:	e643      	b.n	800292c <RI_GetRegCommandParser+0x334>
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8002ca4:	4658      	mov	r0, fp
 8002ca6:	f7fe fb2b 	bl	8001300 <MCI_GetIqdref>
 8002caa:	2102      	movs	r1, #2
 8002cac:	9006      	str	r0, [sp, #24]
 8002cae:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002cb2:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	e51b      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <RI_GetRegCommandParser+0x6e4>)
 8002cba:	e6c2      	b.n	8002a42 <RI_GetRegCommandParser+0x44a>
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <RI_GetRegCommandParser+0x6ec>)
 8002cbe:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002cc2:	f003 f991 	bl	8005fe8 <NTC_GetAvTemp_C>
         break;
 8002cc6:	2102      	movs	r1, #2
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8002cc8:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002cca:	460b      	mov	r3, r1
         break;
 8002ccc:	e510      	b.n	80026f0 <RI_GetRegCommandParser+0xf8>
 8002cce:	bf00      	nop
 8002cd0:	20000528 	.word	0x20000528
 8002cd4:	20000448 	.word	0x20000448
 8002cd8:	20000524 	.word	0x20000524
 8002cdc:	20000444 	.word	0x20000444
 8002ce0:	20000520 	.word	0x20000520
 8002ce4:	20000450 	.word	0x20000450

08002ce8 <RI_GetIDSize>:
return retVal;
}

uint8_t RI_GetIDSize (uint16_t dataID)
{
  uint8_t typeID = dataID & TYPE_MASK;
 8002ce8:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002cec:	3808      	subs	r0, #8
 8002cee:	b2c0      	uxtb	r0, r0
 8002cf0:	2810      	cmp	r0, #16
 8002cf2:	bf9a      	itte	ls
 8002cf4:	4b01      	ldrls	r3, [pc, #4]	; (8002cfc <RI_GetIDSize+0x14>)
 8002cf6:	5c18      	ldrbls	r0, [r3, r0]
 8002cf8:	2000      	movhi	r0, #0
    default:
      result=0;
      break;
  }
  return result;
}
 8002cfa:	4770      	bx	lr
 8002cfc:	08008030 	.word	0x08008030

08002d00 <RI_GetPtrReg>:
  uint16_t regID = dataID & REG_MASK;
  uint8_t retVal = MCP_CMD_OK;

  MCI_Handle_t * pMCI = &Mci[motorID];

  switch (typeID)
 8002d00:	f000 0238 	and.w	r2, r0, #56	; 0x38
 8002d04:	2a10      	cmp	r2, #16
  uint8_t typeID = dataID & TYPE_MASK;
 8002d06:	b2c3      	uxtb	r3, r0
  switch (typeID)
 8002d08:	d003      	beq.n	8002d12 <RI_GetPtrReg+0x12>
      break;
      case MC_REG_HALL_EL_ANGLE:
        *dataPtr = &(pHallSensor[motorID]->_Super.hElAngle);
      break;
      default:
        *dataPtr = &nullData16;
 8002d0a:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <RI_GetPtrReg+0x188>)
 8002d0c:	600b      	str	r3, [r1, #0]
        retVal = MCP_ERROR_UNKNOWN_REG;
 8002d0e:	2005      	movs	r0, #5
      *dataPtr = &nullData16;
      retVal = MCP_ERROR_UNKNOWN_REG;
      break;
  }
  return retVal;
}
 8002d10:	4770      	bx	lr
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002d12:	f003 0207 	and.w	r2, r3, #7
  uint16_t regID = dataID & REG_MASK;
 8002d16:	f020 0007 	bic.w	r0, r0, #7
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002d1a:	3a01      	subs	r2, #1
 8002d1c:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002d20:	b2d2      	uxtb	r2, r2
  uint16_t regID = dataID & REG_MASK;
 8002d22:	b283      	uxth	r3, r0
 8002d24:	d06c      	beq.n	8002e00 <RI_GetPtrReg+0x100>
 8002d26:	d813      	bhi.n	8002d50 <RI_GetPtrReg+0x50>
 8002d28:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002d2c:	d072      	beq.n	8002e14 <RI_GetPtrReg+0x114>
 8002d2e:	d92e      	bls.n	8002d8e <RI_GetPtrReg+0x8e>
 8002d30:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002d34:	d078      	beq.n	8002e28 <RI_GetPtrReg+0x128>
 8002d36:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002d3a:	d11b      	bne.n	8002d74 <RI_GetPtrReg+0x74>
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8002d3c:	4853      	ldr	r0, [pc, #332]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002d3e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002d42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002d46:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8002d48:	6893      	ldr	r3, [r2, #8]
 8002d4a:	3310      	adds	r3, #16
 8002d4c:	600b      	str	r3, [r1, #0]
       break;
 8002d4e:	4770      	bx	lr
 8002d50:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002d54:	d072      	beq.n	8002e3c <RI_GetPtrReg+0x13c>
 8002d56:	d92a      	bls.n	8002dae <RI_GetPtrReg+0xae>
 8002d58:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 8002d5c:	f000 808c 	beq.w	8002e78 <RI_GetPtrReg+0x178>
 8002d60:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 8002d64:	d1d1      	bne.n	8002d0a <RI_GetPtrReg+0xa>
        *dataPtr = &(pHallSensor[motorID]->_Super.hAvrMecSpeedUnit);
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <RI_GetPtrReg+0x190>)
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	330c      	adds	r3, #12
  uint8_t retVal = MCP_CMD_OK;
 8002d6e:	2000      	movs	r0, #0
        *dataPtr = &(pHallSensor[motorID]->_Super.hAvrMecSpeedUnit);
 8002d70:	600b      	str	r3, [r1, #0]
      break;
 8002d72:	4770      	bx	lr
 8002d74:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002d78:	d1c7      	bne.n	8002d0a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 8002d7a:	4844      	ldr	r0, [pc, #272]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002d7c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002d80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002d84:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 8002d86:	6893      	ldr	r3, [r2, #8]
 8002d88:	330c      	adds	r3, #12
 8002d8a:	600b      	str	r3, [r1, #0]
       break;
 8002d8c:	4770      	bx	lr
 8002d8e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002d92:	d05d      	beq.n	8002e50 <RI_GetPtrReg+0x150>
 8002d94:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002d98:	d119      	bne.n	8002dce <RI_GetPtrReg+0xce>
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8002d9a:	483c      	ldr	r0, [pc, #240]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002d9c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002da0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002da4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8002da6:	6893      	ldr	r3, [r2, #8]
 8002da8:	3304      	adds	r3, #4
 8002daa:	600b      	str	r3, [r1, #0]
       break;
 8002dac:	4770      	bx	lr
 8002dae:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8002db2:	d057      	beq.n	8002e64 <RI_GetPtrReg+0x164>
 8002db4:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002db8:	d115      	bne.n	8002de6 <RI_GetPtrReg+0xe6>
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8002dba:	4834      	ldr	r0, [pc, #208]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002dbc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002dc0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002dc4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8002dc6:	6893      	ldr	r3, [r2, #8]
 8002dc8:	331a      	adds	r3, #26
 8002dca:	600b      	str	r3, [r1, #0]
       break;
 8002dcc:	4770      	bx	lr
 8002dce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dd2:	d19a      	bne.n	8002d0a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8002dd4:	482d      	ldr	r0, [pc, #180]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002dd6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002dda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002dde:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8002de0:	6893      	ldr	r3, [r2, #8]
 8002de2:	600b      	str	r3, [r1, #0]
       break;
 8002de4:	4770      	bx	lr
 8002de6:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002dea:	d18e      	bne.n	8002d0a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8002dec:	4827      	ldr	r0, [pc, #156]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002dee:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002df2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002df6:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8002df8:	6893      	ldr	r3, [r2, #8]
 8002dfa:	3316      	adds	r3, #22
 8002dfc:	600b      	str	r3, [r1, #0]
       break;
 8002dfe:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8002e00:	4822      	ldr	r0, [pc, #136]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002e02:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e0a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8002e0c:	6893      	ldr	r3, [r2, #8]
 8002e0e:	3312      	adds	r3, #18
 8002e10:	600b      	str	r3, [r1, #0]
       break;
 8002e12:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8002e14:	481d      	ldr	r0, [pc, #116]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002e16:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e1e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8002e20:	6893      	ldr	r3, [r2, #8]
 8002e22:	3306      	adds	r3, #6
 8002e24:	600b      	str	r3, [r1, #0]
       break;
 8002e26:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8002e28:	4818      	ldr	r0, [pc, #96]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002e2a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e2e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e32:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8002e34:	6893      	ldr	r3, [r2, #8]
 8002e36:	330e      	adds	r3, #14
 8002e38:	600b      	str	r3, [r1, #0]
       break;
 8002e3a:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 8002e3c:	4813      	ldr	r0, [pc, #76]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002e3e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e46:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 8002e48:	6893      	ldr	r3, [r2, #8]
 8002e4a:	331c      	adds	r3, #28
 8002e4c:	600b      	str	r3, [r1, #0]
       break;
 8002e4e:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8002e50:	480e      	ldr	r0, [pc, #56]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002e52:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e56:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e5a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8002e5c:	6893      	ldr	r3, [r2, #8]
 8002e5e:	3302      	adds	r3, #2
 8002e60:	600b      	str	r3, [r1, #0]
       break;
 8002e62:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 8002e64:	4809      	ldr	r0, [pc, #36]	; (8002e8c <RI_GetPtrReg+0x18c>)
 8002e66:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002e6a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8002e6e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 8002e70:	6893      	ldr	r3, [r2, #8]
 8002e72:	3318      	adds	r3, #24
 8002e74:	600b      	str	r3, [r1, #0]
       break;
 8002e76:	4770      	bx	lr
        *dataPtr = &(pHallSensor[motorID]->_Super.hElAngle);
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <RI_GetPtrReg+0x190>)
 8002e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7e:	3304      	adds	r3, #4
  uint8_t retVal = MCP_CMD_OK;
 8002e80:	2000      	movs	r0, #0
        *dataPtr = &(pHallSensor[motorID]->_Super.hElAngle);
 8002e82:	600b      	str	r3, [r1, #0]
      break;
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20001ad4 	.word	0x20001ad4
 8002e8c:	200007d0 	.word	0x200007d0
 8002e90:	20000524 	.word	0x20000524

08002e94 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002e94:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <RCM_RegisterRegConv+0x1b0>)
 8002e96:	681a      	ldr	r2, [r3, #0]
{
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002e9c:	2a00      	cmp	r2, #0
 8002e9e:	d02f      	beq.n	8002f00 <RCM_RegisterRegConv+0x6c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002ea0:	f890 c004 	ldrb.w	ip, [r0, #4]
 8002ea4:	7910      	ldrb	r0, [r2, #4]
 8002ea6:	4584      	cmp	ip, r0
 8002ea8:	d01d      	beq.n	8002ee6 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002eaa:	685c      	ldr	r4, [r3, #4]
 8002eac:	2c00      	cmp	r4, #0
 8002eae:	f000 80ac 	beq.w	800300a <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002eb2:	7922      	ldrb	r2, [r4, #4]
 8002eb4:	4562      	cmp	r2, ip
  uint8_t handle=255;
 8002eb6:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002eba:	d02b      	beq.n	8002f14 <RCM_RegisterRegConv+0x80>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ebc:	689c      	ldr	r4, [r3, #8]
 8002ebe:	2c00      	cmp	r4, #0
 8002ec0:	f000 808f 	beq.w	8002fe2 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002ec4:	7922      	ldrb	r2, [r4, #4]
 8002ec6:	4562      	cmp	r2, ip
 8002ec8:	d02a      	beq.n	8002f20 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002eca:	68dc      	ldr	r4, [r3, #12]
 8002ecc:	2c00      	cmp	r4, #0
 8002ece:	f000 8091 	beq.w	8002ff4 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002ed2:	7922      	ldrb	r2, [r4, #4]
 8002ed4:	4562      	cmp	r2, ip
 8002ed6:	f000 8092 	beq.w	8002ffe <RCM_RegisterRegConv+0x16a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002eda:	2803      	cmp	r0, #3
 8002edc:	bf88      	it	hi
 8002ede:	20ff      	movhi	r0, #255	; 0xff
 8002ee0:	f240 80a1 	bls.w	8003026 <RCM_RegisterRegConv+0x192>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002ee4:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002ee6:	6810      	ldr	r0, [r2, #0]
 8002ee8:	680a      	ldr	r2, [r1, #0]
 8002eea:	4290      	cmp	r0, r2
 8002eec:	d01e      	beq.n	8002f2c <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002eee:	685c      	ldr	r4, [r3, #4]
 8002ef0:	2c00      	cmp	r4, #0
 8002ef2:	d1de      	bne.n	8002eb2 <RCM_RegisterRegConv+0x1e>
 8002ef4:	689c      	ldr	r4, [r3, #8]
 8002ef6:	2c00      	cmp	r4, #0
 8002ef8:	f000 809a 	beq.w	8003030 <RCM_RegisterRegConv+0x19c>
      i++;
 8002efc:	2001      	movs	r0, #1
 8002efe:	e7e1      	b.n	8002ec4 <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002f00:	685c      	ldr	r4, [r3, #4]
 8002f02:	2c00      	cmp	r4, #0
 8002f04:	f000 808d 	beq.w	8003022 <RCM_RegisterRegConv+0x18e>
 8002f08:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8002f0c:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002f0e:	7922      	ldrb	r2, [r4, #4]
 8002f10:	4562      	cmp	r2, ip
 8002f12:	d1d3      	bne.n	8002ebc <RCM_RegisterRegConv+0x28>
 8002f14:	6824      	ldr	r4, [r4, #0]
 8002f16:	680a      	ldr	r2, [r1, #0]
 8002f18:	4294      	cmp	r4, r2
 8002f1a:	d1cf      	bne.n	8002ebc <RCM_RegisterRegConv+0x28>
      i++;
 8002f1c:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 8002f1e:	e006      	b.n	8002f2e <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002f20:	6824      	ldr	r4, [r4, #0]
 8002f22:	680a      	ldr	r2, [r1, #0]
 8002f24:	4294      	cmp	r4, r2
 8002f26:	d1d0      	bne.n	8002eca <RCM_RegisterRegConv+0x36>
      i++;
 8002f28:	2002      	movs	r0, #2
 8002f2a:	e000      	b.n	8002f2e <RCM_RegisterRegConv+0x9a>
  uint8_t i=0;
 8002f2c:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8002f2e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002f32:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002f34:	4c44      	ldr	r4, [pc, #272]	; (8003048 <RCM_RegisterRegConv+0x1b4>)
 8002f36:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002f38:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002f3a:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002f3e:	d411      	bmi.n	8002f64 <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002f40:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002f42:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002f46:	f023 0320 	bic.w	r3, r3, #32
 8002f4a:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002f4c:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002f4e:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002f50:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f58:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002f5a:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002f5c:	6893      	ldr	r3, [r2, #8]
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002f64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002f6c:	790b      	ldrb	r3, [r1, #4]
 8002f6e:	2b09      	cmp	r3, #9
 8002f70:	d82d      	bhi.n	8002fce <RCM_RegisterRegConv+0x13a>
 8002f72:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8002f76:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002f7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002f86:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002f8a:	fab4 f484 	clz	r4, r4
 8002f8e:	fa2e fe04 	lsr.w	lr, lr, r4
 8002f92:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8002f94:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002f98:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8002f9c:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8002fa0:	fa9c f5ac 	rbit	r5, ip
 8002fa4:	fab5 f585 	clz	r5, r5
 8002fa8:	fa9c fcac 	rbit	ip, ip
 8002fac:	688e      	ldr	r6, [r1, #8]
 8002fae:	fabc fc8c 	clz	ip, ip
 8002fb2:	fa23 f105 	lsr.w	r1, r3, r5
 8002fb6:	fa23 f30c 	lsr.w	r3, r3, ip
 8002fba:	fa06 f503 	lsl.w	r5, r6, r3
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	408b      	lsls	r3, r1
 8002fc2:	ea24 0303 	bic.w	r3, r4, r3
 8002fc6:	432b      	orrs	r3, r5
 8002fc8:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002fce:	2403      	movs	r4, #3
 8002fd0:	f06f 051d 	mvn.w	r5, #29
 8002fd4:	fb14 5403 	smlabb	r4, r4, r3, r5
 8002fd8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002fdc:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8002fe0:	e7cf      	b.n	8002f82 <RCM_RegisterRegConv+0xee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002fe2:	2804      	cmp	r0, #4
 8002fe4:	d917      	bls.n	8003016 <RCM_RegisterRegConv+0x182>
 8002fe6:	68dc      	ldr	r4, [r3, #12]
 8002fe8:	b114      	cbz	r4, 8002ff0 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002fea:	7922      	ldrb	r2, [r4, #4]
 8002fec:	4562      	cmp	r2, ip
 8002fee:	d01c      	beq.n	800302a <RCM_RegisterRegConv+0x196>
 8002ff0:	680a      	ldr	r2, [r1, #0]
 8002ff2:	e799      	b.n	8002f28 <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ff4:	2804      	cmp	r0, #4
 8002ff6:	680a      	ldr	r2, [r1, #0]
 8002ff8:	d999      	bls.n	8002f2e <RCM_RegisterRegConv+0x9a>
      i++;
 8002ffa:	2003      	movs	r0, #3
 8002ffc:	e797      	b.n	8002f2e <RCM_RegisterRegConv+0x9a>
 8002ffe:	680a      	ldr	r2, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003000:	6824      	ldr	r4, [r4, #0]
 8003002:	4294      	cmp	r4, r2
 8003004:	f47f af69 	bne.w	8002eda <RCM_RegisterRegConv+0x46>
 8003008:	e7f7      	b.n	8002ffa <RCM_RegisterRegConv+0x166>
      i++;
 800300a:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800300c:	689c      	ldr	r4, [r3, #8]
 800300e:	b11c      	cbz	r4, 8003018 <RCM_RegisterRegConv+0x184>
 8003010:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003014:	e756      	b.n	8002ec4 <RCM_RegisterRegConv+0x30>
 8003016:	4620      	mov	r0, r4
 8003018:	68dc      	ldr	r4, [r3, #12]
 800301a:	b124      	cbz	r4, 8003026 <RCM_RegisterRegConv+0x192>
 800301c:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003020:	e757      	b.n	8002ed2 <RCM_RegisterRegConv+0x3e>
  uint8_t i=0;
 8003022:	4620      	mov	r0, r4
 8003024:	e7f2      	b.n	800300c <RCM_RegisterRegConv+0x178>
 8003026:	680a      	ldr	r2, [r1, #0]
 8003028:	e781      	b.n	8002f2e <RCM_RegisterRegConv+0x9a>
 800302a:	680a      	ldr	r2, [r1, #0]
      i++;
 800302c:	2002      	movs	r0, #2
 800302e:	e7e7      	b.n	8003000 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003030:	68dc      	ldr	r4, [r3, #12]
 8003032:	2c00      	cmp	r4, #0
 8003034:	f43f af72 	beq.w	8002f1c <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003038:	7920      	ldrb	r0, [r4, #4]
 800303a:	4560      	cmp	r0, ip
 800303c:	f47f af6e 	bne.w	8002f1c <RCM_RegisterRegConv+0x88>
      i++;
 8003040:	2001      	movs	r0, #1
 8003042:	e7dd      	b.n	8003000 <RCM_RegisterRegConv+0x16c>
 8003044:	20001afc 	.word	0x20001afc
 8003048:	20001ad8 	.word	0x20001ad8

0800304c <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <RCM_ExecRegularConv+0x70>)
 800304e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003052:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	2b09      	cmp	r3, #9
 8003058:	d827      	bhi.n	80030aa <RCM_ExecRegularConv+0x5e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800305a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800305e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003062:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003066:	f44f 7140 	mov.w	r1, #768	; 0x300
 800306a:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800306e:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8003072:	fab1 f181 	clz	r1, r1
 8003076:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 800307a:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8003086:	f021 011f 	bic.w	r1, r1, #31
 800308a:	430b      	orrs	r3, r1

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 800308c:	0151      	lsls	r1, r2, #5
 800308e:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 8003092:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8003096:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003098:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800309a:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800309e:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 80030a0:	079b      	lsls	r3, r3, #30
 80030a2:	d5fc      	bpl.n	800309e <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80030a4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 80030a6:	b280      	uxth	r0, r0
 80030a8:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80030aa:	2103      	movs	r1, #3
 80030ac:	f06f 001d 	mvn.w	r0, #29
 80030b0:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80030b4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80030b8:	e7d5      	b.n	8003066 <RCM_ExecRegularConv+0x1a>
 80030ba:	bf00      	nop
 80030bc:	20001afc 	.word	0x20001afc

080030c0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80030c0:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80030c2:	4c0e      	ldr	r4, [pc, #56]	; (80030fc <RCM_ExecUserConv+0x3c>)
 80030c4:	7823      	ldrb	r3, [r4, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d000      	beq.n	80030cc <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80030cc:	4d0c      	ldr	r5, [pc, #48]	; (8003100 <RCM_ExecUserConv+0x40>)
 80030ce:	7828      	ldrb	r0, [r5, #0]
 80030d0:	f7ff ffbc 	bl	800304c <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <RCM_ExecUserConv+0x44>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80030d6:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <RCM_ExecUserConv+0x48>)
 80030d8:	4601      	mov	r1, r0
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80030da:	7828      	ldrb	r0, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80030dc:	8011      	strh	r1, [r2, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80030de:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 80030e2:	2202      	movs	r2, #2
 80030e4:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80030e6:	2d00      	cmp	r5, #0
 80030e8:	d0ef      	beq.n	80030ca <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80030ea:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80030ee:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80030f4:	462b      	mov	r3, r5
}
 80030f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80030fa:	4718      	bx	r3
 80030fc:	20001af9 	.word	0x20001af9
 8003100:	20001af8 	.word	0x20001af8
 8003104:	20001ad8 	.word	0x20001ad8
 8003108:	20001afa 	.word	0x20001afa

0800310c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800310c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <HAL_MspInit+0x38>)
 8003110:	2100      	movs	r1, #0
 8003112:	9100      	str	r1, [sp, #0]
 8003114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
 800311c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003122:	9200      	str	r2, [sp, #0]
 8003124:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	9101      	str	r1, [sp, #4]
 8003128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800313a:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800313c:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800313e:	f000 bdd1 	b.w	8003ce4 <HAL_NVIC_SetPriorityGrouping>
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800

08003148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003148:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800314a:	6803      	ldr	r3, [r0, #0]
 800314c:	4a2f      	ldr	r2, [pc, #188]	; (800320c <HAL_ADC_MspInit+0xc4>)
{
 800314e:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8003152:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003158:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800315c:	940a      	str	r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 800315e:	d004      	beq.n	800316a <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003160:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <HAL_ADC_MspInit+0xc8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d033      	beq.n	80031ce <HAL_ADC_MspInit+0x86>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003166:	b00d      	add	sp, #52	; 0x34
 8003168:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800316a:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <HAL_ADC_MspInit+0xcc>)
 800316c:	9401      	str	r4, [sp, #4]
 800316e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003170:	4829      	ldr	r0, [pc, #164]	; (8003218 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
 8003178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800317a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800317e:	9201      	str	r2, [sp, #4]
 8003180:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003182:	9402      	str	r4, [sp, #8]
 8003184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
 800318c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318e:	f002 0201 	and.w	r2, r2, #1
 8003192:	9202      	str	r2, [sp, #8]
 8003194:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	9403      	str	r4, [sp, #12]
 8003198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319a:	f042 0202 	orr.w	r2, r2, #2
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_U_Pin;
 80031aa:	2258      	movs	r2, #88	; 0x58
 80031ac:	2303      	movs	r3, #3
 80031ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b4:	f000 feaa 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 80031b8:	2203      	movs	r2, #3
 80031ba:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031bc:	4817      	ldr	r0, [pc, #92]	; (800321c <HAL_ADC_MspInit+0xd4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 80031c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	f000 fea1 	bl	8003f0c <HAL_GPIO_Init>
}
 80031ca:	b00d      	add	sp, #52	; 0x34
 80031cc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_ADC_MspInit+0xcc>)
 80031d0:	9404      	str	r4, [sp, #16]
 80031d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	4810      	ldr	r0, [pc, #64]	; (8003218 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80031d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
 80031dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031de:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80031e2:	9204      	str	r2, [sp, #16]
 80031e4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	9405      	str	r4, [sp, #20]
 80031e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_U_Pin;
 80031fa:	2458      	movs	r4, #88	; 0x58
 80031fc:	2503      	movs	r5, #3
 80031fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003204:	f000 fe82 	bl	8003f0c <HAL_GPIO_Init>
}
 8003208:	b00d      	add	sp, #52	; 0x34
 800320a:	bd30      	pop	{r4, r5, pc}
 800320c:	40012000 	.word	0x40012000
 8003210:	40012100 	.word	0x40012100
 8003214:	40023800 	.word	0x40023800
 8003218:	40020000 	.word	0x40020000
 800321c:	40020400 	.word	0x40020400

08003220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003220:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003222:	6802      	ldr	r2, [r0, #0]
 8003224:	491f      	ldr	r1, [pc, #124]	; (80032a4 <HAL_TIM_Base_MspInit+0x84>)
{
 8003226:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 800322a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003230:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003234:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8003236:	d004      	beq.n	8003242 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003238:	491b      	ldr	r1, [pc, #108]	; (80032a8 <HAL_TIM_Base_MspInit+0x88>)
 800323a:	428a      	cmp	r2, r1
 800323c:	d00e      	beq.n	800325c <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800323e:	b00a      	add	sp, #40	; 0x28
 8003240:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003242:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <HAL_TIM_Base_MspInit+0x8c>)
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6453      	str	r3, [r2, #68]	; 0x44
 800324e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	9b01      	ldr	r3, [sp, #4]
}
 8003258:	b00a      	add	sp, #40	; 0x28
 800325a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800325c:	4a13      	ldr	r2, [pc, #76]	; (80032ac <HAL_TIM_Base_MspInit+0x8c>)
 800325e:	9302      	str	r3, [sp, #8]
 8003260:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003262:	f040 0002 	orr.w	r0, r0, #2
 8003266:	6410      	str	r0, [r2, #64]	; 0x40
 8003268:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800326a:	f000 0002 	and.w	r0, r0, #2
 800326e:	9002      	str	r0, [sp, #8]
 8003270:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003272:	9303      	str	r3, [sp, #12]
 8003274:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003276:	480e      	ldr	r0, [pc, #56]	; (80032b0 <HAL_TIM_Base_MspInit+0x90>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003286:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003288:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin|M1_HALL_H1_Pin;
 800328a:	f44f 76e0 	mov.w	r6, #448	; 0x1c0
 800328e:	2702      	movs	r7, #2
 8003290:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003294:	e9cd 4407 	strd	r4, r4, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003298:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329a:	f000 fe37 	bl	8003f0c <HAL_GPIO_Init>
}
 800329e:	b00a      	add	sp, #40	; 0x28
 80032a0:	bdd0      	pop	{r4, r6, r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020800 	.word	0x40020800

080032b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032b4:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80032b6:	4a20      	ldr	r2, [pc, #128]	; (8003338 <HAL_TIM_MspPostInit+0x84>)
 80032b8:	6801      	ldr	r1, [r0, #0]
{
 80032ba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80032be:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80032c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80032c8:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80032ca:	d001      	beq.n	80032d0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032cc:	b008      	add	sp, #32
 80032ce:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d8:	4818      	ldr	r0, [pc, #96]	; (800333c <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	f041 0101 	orr.w	r1, r1, #1
 80032de:	6311      	str	r1, [r2, #48]	; 0x30
 80032e0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032e2:	f001 0101 	and.w	r1, r1, #1
 80032e6:	9100      	str	r1, [sp, #0]
 80032e8:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	6313      	str	r3, [r2, #48]	; 0x30
 80032f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032fe:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003300:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_WH_Pin|M1_PWM_VH_Pin|M1_PWM_UH_Pin;
 8003302:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003306:	2302      	movs	r3, #2
 8003308:	2602      	movs	r6, #2
 800330a:	2702      	movs	r7, #2
 800330c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003310:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003314:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003316:	f000 fdf9 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800331a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800331e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003320:	4807      	ldr	r0, [pc, #28]	; (8003340 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003322:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003326:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800332a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332e:	f000 fded 	bl	8003f0c <HAL_GPIO_Init>
}
 8003332:	b008      	add	sp, #32
 8003334:	bdd0      	pop	{r4, r6, r7, pc}
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40020000 	.word	0x40020000
 8003340:	40020400 	.word	0x40020400

08003344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003344:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8003346:	4b32      	ldr	r3, [pc, #200]	; (8003410 <HAL_UART_MspInit+0xcc>)
 8003348:	6802      	ldr	r2, [r0, #0]
{
 800334a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334c:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 800334e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003354:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003358:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 800335a:	d001      	beq.n	8003360 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800335c:	b008      	add	sp, #32
 800335e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003360:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8003364:	9400      	str	r4, [sp, #0]
 8003366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003368:	4e2a      	ldr	r6, [pc, #168]	; (8003414 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800336a:	f042 0210 	orr.w	r2, r2, #16
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
 8003370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003372:	f002 0210 	and.w	r2, r2, #16
 8003376:	9200      	str	r2, [sp, #0]
 8003378:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	9401      	str	r4, [sp, #4]
 800337c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337e:	f042 0202 	orr.w	r2, r2, #2
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 800338c:	22c0      	movs	r2, #192	; 0xc0
 800338e:	2302      	movs	r3, #2
 8003390:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003394:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003396:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003398:	481f      	ldr	r0, [pc, #124]	; (8003418 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800339a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a0:	f000 fdb4 	bl	8003f0c <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80033a4:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_UART_MspInit+0xd8>)
 80033a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033aa:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033ae:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b8:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80033bc:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033c0:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033c4:	f000 fd0a 	bl	8003ddc <HAL_DMA_Init>
 80033c8:	b9d8      	cbnz	r0, 8003402 <HAL_UART_MspInit+0xbe>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80033ca:	4c15      	ldr	r4, [pc, #84]	; (8003420 <HAL_UART_MspInit+0xdc>)
 80033cc:	4915      	ldr	r1, [pc, #84]	; (8003424 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033ce:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80033d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d4:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80033d6:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033da:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033dc:	2140      	movs	r1, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e2:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033e6:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033ea:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033ee:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033f0:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f2:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033f4:	f000 fcf2 	bl	8003ddc <HAL_DMA_Init>
 80033f8:	b930      	cbnz	r0, 8003408 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80033fa:	632c      	str	r4, [r5, #48]	; 0x30
 80033fc:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80033fe:	b008      	add	sp, #32
 8003400:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003402:	f7fd fea1 	bl	8001148 <Error_Handler>
 8003406:	e7e0      	b.n	80033ca <HAL_UART_MspInit+0x86>
      Error_Handler();
 8003408:	f7fd fe9e 	bl	8001148 <Error_Handler>
 800340c:	e7f5      	b.n	80033fa <HAL_UART_MspInit+0xb6>
 800340e:	bf00      	nop
 8003410:	40011000 	.word	0x40011000
 8003414:	20000650 	.word	0x20000650
 8003418:	40020400 	.word	0x40020400
 800341c:	40026440 	.word	0x40026440
 8003420:	200006b0 	.word	0x200006b0
 8003424:	400264b8 	.word	0x400264b8

08003428 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <ADC_IRQHandler+0x24>)
 800342a:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 800342c:	0752      	lsls	r2, r2, #29
 800342e:	d505      	bpl.n	800343c <ADC_IRQHandler+0x14>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	f022 020c 	bic.w	r2, r2, #12
 8003436:	601a      	str	r2, [r3, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003438:	f7fe baa0 	b.w	800197c <TSK_HighFrequencyTask>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 800343c:	4a04      	ldr	r2, [pc, #16]	; (8003450 <ADC_IRQHandler+0x28>)
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	f023 030c 	bic.w	r3, r3, #12
 8003444:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003446:	f7fe ba99 	b.w	800197c <TSK_HighFrequencyTask>
 800344a:	bf00      	nop
 800344c:	40012000 	.word	0x40012000
 8003450:	40012200 	.word	0x40012200

08003454 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8003454:	4804      	ldr	r0, [pc, #16]	; (8003468 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003456:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800345a:	689b      	ldr	r3, [r3, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800345c:	f06f 0201 	mvn.w	r2, #1
 8003460:	611a      	str	r2, [r3, #16]
  R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003462:	f003 baa1 	b.w	80069a8 <R3_2_TIMx_UP_IRQHandler>
 8003466:	bf00      	nop
 8003468:	2000033c 	.word	0x2000033c

0800346c <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 800346c:	4808      	ldr	r0, [pc, #32]	; (8003490 <TIM1_BRK_TIM9_IRQHandler+0x24>)
{
 800346e:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003470:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8003474:	689b      	ldr	r3, [r3, #8]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	0612      	lsls	r2, r2, #24
 800347a:	d504      	bpl.n	8003486 <TIM1_BRK_TIM9_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800347c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003480:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8003482:	f003 faf1 	bl	8006a68 <R3_2_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800348a:	f7fe ba2f 	b.w	80018ec <MC_Scheduler>
 800348e:	bf00      	nop
 8003490:	2000033c 	.word	0x2000033c

08003494 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8003494:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8003496:	4c0c      	ldr	r4, [pc, #48]	; (80034c8 <TIM3_IRQHandler+0x34>)
 8003498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	07d1      	lsls	r1, r2, #31
 800349e:	d40b      	bmi.n	80034b8 <TIM3_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	0792      	lsls	r2, r2, #30
 80034a4:	d507      	bpl.n	80034b6 <TIM3_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80034a6:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80034aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 80034ae:	4806      	ldr	r0, [pc, #24]	; (80034c8 <TIM3_IRQHandler+0x34>)
 80034b0:	611a      	str	r2, [r3, #16]
 80034b2:	f002 b88d 	b.w	80055d0 <HALL_TIMx_CC_IRQHandler>
}
 80034b6:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80034b8:	f06f 0201 	mvn.w	r2, #1
 80034bc:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80034be:	4620      	mov	r0, r4
 80034c0:	f002 fa2c 	bl	800591c <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 80034c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034c6:	e7eb      	b.n	80034a0 <TIM3_IRQHandler+0xc>
 80034c8:	200000dc 	.word	0x200000dc

080034cc <DMA2_Stream2_IRQHandler>:
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Stream )
{
  register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
  return ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) ) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <DMA2_Stream2_IRQHandler+0x1c>)
 80034ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80034d2:	0292      	lsls	r2, r2, #10
 80034d4:	d400      	bmi.n	80034d8 <DMA2_Stream2_IRQHandler+0xc>
  }
  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

}
 80034d6:	4770      	bx	lr
  WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 80034d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80034dc:	4803      	ldr	r0, [pc, #12]	; (80034ec <DMA2_Stream2_IRQHandler+0x20>)
 80034de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80034e2:	f7fd bb1d 	b.w	8000b20 <ASPEP_HWDataReceivedIT>
 80034e6:	bf00      	nop
 80034e8:	40026000 	.word	0x40026000
 80034ec:	200004b4 	.word	0x200004b4

080034f0 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USARTA_IRQHandler(void)
{
 80034f0:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80034f2:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <USART1_IRQHandler+0xd0>)
 80034f4:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USARTA_IRQn 0 */

  /* USER CODE END USARTA_IRQn 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80034f6:	0650      	lsls	r0, r2, #25
{
 80034f8:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80034fa:	d436      	bmi.n	800356a <USART1_IRQHandler+0x7a>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <USART1_IRQHandler+0xd0>)
 80034fe:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003500:	0711      	lsls	r1, r2, #28
 8003502:	d402      	bmi.n	800350a <USART1_IRQHandler+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	0792      	lsls	r2, r2, #30
 8003508:	d527      	bpl.n	800355a <USART1_IRQHandler+0x6a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <USART1_IRQHandler+0xd0>)
 800350c:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 800350e:	07d0      	lsls	r0, r2, #31
 8003510:	d408      	bmi.n	8003524 <USART1_IRQHandler+0x34>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <USART1_IRQHandler+0xd0>)
 8003514:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 8003516:	06d1      	lsls	r1, r2, #27
 8003518:	d502      	bpl.n	8003520 <USART1_IRQHandler+0x30>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	06d2      	lsls	r2, r2, #27
 800351e:	d432      	bmi.n	8003586 <USART1_IRQHandler+0x96>
  }

  /* USER CODE BEGIN USARTA_IRQn 1 */

  /* USER CODE END USARTA_IRQn 1 */
}
 8003520:	b004      	add	sp, #16
 8003522:	bd10      	pop	{r4, pc}
  tmpreg = USARTx->SR;
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003528:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 800352e:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003534:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800353a:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003540:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003546:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	f042 0210 	orr.w	r2, r2, #16
 8003556:	60da      	str	r2, [r3, #12]
}
 8003558:	e7db      	b.n	8003512 <USART1_IRQHandler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800355a:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 800355c:	075c      	lsls	r4, r3, #29
 800355e:	d5d8      	bpl.n	8003512 <USART1_IRQHandler+0x22>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <USART1_IRQHandler+0xd0>)
 8003562:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003564:	07d0      	lsls	r0, r2, #31
 8003566:	d5d4      	bpl.n	8003512 <USART1_IRQHandler+0x22>
 8003568:	e7dc      	b.n	8003524 <USART1_IRQHandler+0x34>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800356a:	4916      	ldr	r1, [pc, #88]	; (80035c4 <USART1_IRQHandler+0xd4>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 800356c:	4816      	ldr	r0, [pc, #88]	; (80035c8 <USART1_IRQHandler+0xd8>)
 800356e:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003572:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	f8c1 20b8 	str.w	r2, [r1, #184]	; 0xb8
 800357e:	601c      	str	r4, [r3, #0]
 8003580:	f7fd f92a 	bl	80007d8 <ASPEP_HWDataTransmittedIT>
 8003584:	e7ba      	b.n	80034fc <USART1_IRQHandler+0xc>
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003586:	68da      	ldr	r2, [r3, #12]
  WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream) );
 8003588:	4910      	ldr	r1, [pc, #64]	; (80035cc <USART1_IRQHandler+0xdc>)
    ASPEP_HWDMAReset (&aspepOverUartA);
 800358a:	480f      	ldr	r0, [pc, #60]	; (80035c8 <USART1_IRQHandler+0xd8>)
 800358c:	f022 0210 	bic.w	r2, r2, #16
 8003590:	60da      	str	r2, [r3, #12]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	615a      	str	r2, [r3, #20]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a0:	615a      	str	r2, [r3, #20]
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80035a2:	685a      	ldr	r2, [r3, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80035aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ae:	615a      	str	r2, [r3, #20]
 80035b0:	f8c1 4408 	str.w	r4, [r1, #1032]	; 0x408
}
 80035b4:	b004      	add	sp, #16
 80035b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 80035ba:	f7fd bb01 	b.w	8000bc0 <ASPEP_HWDMAReset>
 80035be:	bf00      	nop
 80035c0:	40011000 	.word	0x40011000
 80035c4:	40026400 	.word	0x40026400
 80035c8:	200004b4 	.word	0x200004b4
 80035cc:	40026000 	.word	0x40026000

080035d0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80035d0:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80035d2:	f7fe facd 	bl	8001b70 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80035d6:	e7fe      	b.n	80035d6 <HardFault_Handler+0x6>

080035d8 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80035d8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80035da:	4c0a      	ldr	r4, [pc, #40]	; (8003604 <SysTick_Handler+0x2c>)
 80035dc:	7823      	ldrb	r3, [r4, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d006      	beq.n	80035f0 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80035e2:	3301      	adds	r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80035e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80035ec:	f7fe bab4 	b.w	8001b58 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80035f0:	f000 f932 	bl	8003858 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80035f4:	f000 fbee 	bl	8003dd4 <HAL_SYSTICK_IRQHandler>
 80035f8:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80035fa:	7023      	strb	r3, [r4, #0]
}
 80035fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003600:	f7fe baaa 	b.w	8001b58 <MC_RunMotorControlTasks>
 8003604:	2000052c 	.word	0x2000052c

08003608 <EXTI2_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <EXTI2_IRQHandler+0x14>)
 800360a:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PG2.
  */
void EXTI2_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_2) )
 800360c:	0752      	lsls	r2, r2, #29
 800360e:	d400      	bmi.n	8003612 <EXTI2_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_2);
    UI_HandleStartStopButton_cb ();
  }

}
 8003610:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8003612:	2204      	movs	r2, #4
 8003614:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8003616:	f7fe babb 	b.w	8001b90 <UI_HandleStartStopButton_cb>
 800361a:	bf00      	nop
 800361c:	40013c00 	.word	0x40013c00

08003620 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003620:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003622:	1e16      	subs	r6, r2, #0
 8003624:	dd07      	ble.n	8003636 <_read+0x16>
 8003626:	460c      	mov	r4, r1
 8003628:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800362a:	f3af 8000 	nop.w
 800362e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003632:	42a5      	cmp	r5, r4
 8003634:	d1f9      	bne.n	800362a <_read+0xa>
	}

return len;
}
 8003636:	4630      	mov	r0, r6
 8003638:	bd70      	pop	{r4, r5, r6, pc}
 800363a:	bf00      	nop

0800363c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800363c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	1e16      	subs	r6, r2, #0
 8003640:	dd07      	ble.n	8003652 <_write+0x16>
 8003642:	460c      	mov	r4, r1
 8003644:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003646:	f814 0b01 	ldrb.w	r0, [r4], #1
 800364a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364e:	42ac      	cmp	r4, r5
 8003650:	d1f9      	bne.n	8003646 <_write+0xa>
	}
	return len;
}
 8003652:	4630      	mov	r0, r6
 8003654:	bd70      	pop	{r4, r5, r6, pc}
 8003656:	bf00      	nop

08003658 <_close>:

int _close(int file)
{
	return -1;
}
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop

08003660 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003664:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003666:	2000      	movs	r0, #0
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop

0800366c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800366c:	2001      	movs	r0, #1
 800366e:	4770      	bx	lr

08003670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003670:	2000      	movs	r0, #0
 8003672:	4770      	bx	lr

08003674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003674:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003676:	4c0c      	ldr	r4, [pc, #48]	; (80036a8 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <_sbrk+0x38>)
 800367a:	490d      	ldr	r1, [pc, #52]	; (80036b0 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800367c:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800367e:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8003680:	b12a      	cbz	r2, 800368e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003682:	4410      	add	r0, r2
 8003684:	4288      	cmp	r0, r1
 8003686:	d807      	bhi.n	8003698 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003688:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 800368a:	4610      	mov	r0, r2
 800368c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <_sbrk+0x40>)
 8003690:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003692:	4410      	add	r0, r2
 8003694:	4288      	cmp	r0, r1
 8003696:	d9f7      	bls.n	8003688 <_sbrk+0x14>
    errno = ENOMEM;
 8003698:	f003 fd5a 	bl	8007150 <__errno>
 800369c:	230c      	movs	r3, #12
    return (void *)-1;
 800369e:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80036a2:	6003      	str	r3, [r0, #0]
}
 80036a4:	4610      	mov	r0, r2
 80036a6:	bd10      	pop	{r4, pc}
 80036a8:	20001b0c 	.word	0x20001b0c
 80036ac:	20020000 	.word	0x20020000
 80036b0:	00000400 	.word	0x00000400
 80036b4:	20001b28 	.word	0x20001b28

080036b8 <UASPEP_INIT>:
}

void UASPEP_DAMCONFIG_TX (UASPEP_Handle_t *pHandle)
{
/* Enable DMA UART */
 LL_USART_ClearFlag_TC (pHandle->USARTx);
 80036b8:	6803      	ldr	r3, [r0, #0]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80036ba:	f06f 0140 	mvn.w	r1, #64	; 0x40
{
 80036be:	b430      	push	{r4, r5}
 80036c0:	6019      	str	r1, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80036c2:	68da      	ldr	r2, [r3, #12]
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80036c4:	4d13      	ldr	r5, [pc, #76]	; (8003714 <UASPEP_INIT+0x5c>)
 80036c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ca:	60da      	str	r2, [r3, #12]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036d2:	615a      	str	r2, [r3, #20]
 80036d4:	6902      	ldr	r2, [r0, #16]
 80036d6:	f815 c002 	ldrb.w	ip, [r5, r2]
 80036da:	6882      	ldr	r2, [r0, #8]
 80036dc:	4462      	add	r2, ip
/* Enable DMA UART to start the TX request */
 LL_USART_EnableDMAReq_TX (pHandle->USARTx);

/* Write the USART_TDR register address in the DMA control register to configure it as
the destination of the transfer. */
  LL_DMA_SetPeriphAddress ( pHandle->txDMA, pHandle->txChannel , ( uint32_t ) &pHandle->USARTx->DR );
 80036de:	1d1c      	adds	r4, r3, #4
 80036e0:	6094      	str	r4, [r2, #8]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80036e2:	68c2      	ldr	r2, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80036e4:	6019      	str	r1, [r3, #0]
 80036e6:	f815 c002 	ldrb.w	ip, [r5, r2]
 80036ea:	6842      	ldr	r2, [r0, #4]
 80036ec:	f852 000c 	ldr.w	r0, [r2, ip]
 80036f0:	f040 0010 	orr.w	r0, r0, #16
 80036f4:	f842 000c 	str.w	r0, [r2, ip]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80036f8:	6958      	ldr	r0, [r3, #20]
 80036fa:	4462      	add	r2, ip
 80036fc:	f040 0001 	orr.w	r0, r0, #1
 8003700:	6158      	str	r0, [r3, #20]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003702:	6094      	str	r4, [r2, #8]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003704:	6019      	str	r1, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
}
 800370c:	bc30      	pop	{r4, r5}
 800370e:	615a      	str	r2, [r3, #20]
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	08008044 	.word	0x08008044

08003718 <UASPEP_SEND_PACKET>:

 LL_USART_EnableDMAReq_RX (pHandle->USARTx);
}

bool UASPEP_SEND_PACKET (void *pHWHandle, void *data, uint16_t length)
{
 8003718:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  bool result;
  if ( LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel) )
 800371a:	6905      	ldr	r5, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 800371c:	4f17      	ldr	r7, [pc, #92]	; (800377c <UASPEP_SEND_PACKET+0x64>)
 800371e:	6884      	ldr	r4, [r0, #8]
 8003720:	5d7b      	ldrb	r3, [r7, r5]
 8003722:	58e6      	ldr	r6, [r4, r3]
 8003724:	07f6      	lsls	r6, r6, #31
 8003726:	4423      	add	r3, r4
 8003728:	d419      	bmi.n	800375e <UASPEP_SEND_PACKET+0x46>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800372a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	0c09      	lsrs	r1, r1, #16
 8003730:	0409      	lsls	r1, r1, #16
  register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003732:	2d03      	cmp	r5, #3
 8003734:	ea41 0102 	orr.w	r1, r1, r2
 8003738:	6059      	str	r1, [r3, #4]
 800373a:	f104 0308 	add.w	r3, r4, #8
 800373e:	bf88      	it	hi
 8003740:	f104 030c 	addhi.w	r3, r4, #12
  WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8003744:	f015 0503 	ands.w	r5, r5, #3
 8003748:	d10c      	bne.n	8003764 <UASPEP_SEND_PACKET+0x4c>
 800374a:	2220      	movs	r2, #32
 800374c:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800374e:	6903      	ldr	r3, [r0, #16]
 8003750:	5cfa      	ldrb	r2, [r7, r3]
 8003752:	58a3      	ldr	r3, [r4, r2]
  else {
    LL_DMA_SetMemoryAddress( pHandle->txDMA, pHandle->txChannel, (uint32_t) data );
    LL_DMA_SetDataLength( pHandle->txDMA, pHandle->txChannel, length );
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel) ;
    LL_DMA_EnableStream( pHandle->txDMA, pHandle->txChannel );
   result = true;
 8003754:	2001      	movs	r0, #1
 8003756:	4303      	orrs	r3, r0
 8003758:	50a3      	str	r3, [r4, r2]
  }
  return result;
}
 800375a:	bcf0      	pop	{r4, r5, r6, r7}
 800375c:	4770      	bx	lr
    result = false;
 800375e:	2000      	movs	r0, #0
}
 8003760:	bcf0      	pop	{r4, r5, r6, r7}
 8003762:	4770      	bx	lr
 8003764:	2d01      	cmp	r5, #1
 8003766:	d006      	beq.n	8003776 <UASPEP_SEND_PACKET+0x5e>
 8003768:	2d02      	cmp	r5, #2
 800376a:	bf0c      	ite	eq
 800376c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8003770:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8003774:	e7ea      	b.n	800374c <UASPEP_SEND_PACKET+0x34>
 8003776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800377a:	e7e7      	b.n	800374c <UASPEP_SEND_PACKET+0x34>
 800377c:	08008044 	.word	0x08008044

08003780 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER (void *pHWHandle, void* buffer, uint16_t length)
{
 8003780:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003782:	68c3      	ldr	r3, [r0, #12]
 8003784:	4d09      	ldr	r5, [pc, #36]	; (80037ac <UASPEP_RECEIVE_BUFFER+0x2c>)
 8003786:	6844      	ldr	r4, [r0, #4]
 8003788:	5ce8      	ldrb	r0, [r5, r3]
 800378a:	eb04 0c00 	add.w	ip, r4, r0
 800378e:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003792:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003796:	0c1b      	lsrs	r3, r3, #16
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	4313      	orrs	r3, r2
 800379c:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80037a0:	5823      	ldr	r3, [r4, r0]
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  LL_DMA_SetMemoryAddress( pHandle->rxDMA, pHandle->rxChannel, (uint32_t) buffer );
  LL_DMA_SetDataLength(  pHandle->rxDMA, pHandle->rxChannel, length );
  LL_DMA_EnableStream(  pHandle->rxDMA, pHandle->rxChannel );
}
 80037a8:	bc30      	pop	{r4, r5}
 80037aa:	4770      	bx	lr
 80037ac:	08008044 	.word	0x08008044

080037b0 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE (void *pHWHandle)
{
   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
   LL_USART_ClearFlag_IDLE (pHandle->USARTx);
 80037b0:	6803      	ldr	r3, [r0, #0]
{
 80037b2:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80037b8:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80037be:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	f042 0210 	orr.w	r2, r2, #16
 80037c6:	60da      	str	r2, [r3, #12]
   LL_USART_EnableIT_IDLE (pHandle->USARTx);
}
 80037c8:	b002      	add	sp, #8
 80037ca:	4770      	bx	lr

080037cc <SystemInit>:

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037cc:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <SystemInit+0xc>)
 80037ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037d2:	609a      	str	r2, [r3, #8]
#endif
}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037dc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037de:	4a0e      	ldr	r2, [pc, #56]	; (8003818 <HAL_InitTick+0x3c>)
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_InitTick+0x40>)
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
{
 80037e6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037ec:	fbb0 f0f2 	udiv	r0, r0, r2
 80037f0:	fbb3 f0f0 	udiv	r0, r3, r0
 80037f4:	f000 fad4 	bl	8003da0 <HAL_SYSTICK_Config>
 80037f8:	b908      	cbnz	r0, 80037fe <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fa:	2d0f      	cmp	r5, #15
 80037fc:	d901      	bls.n	8003802 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80037fe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003804:	4602      	mov	r2, r0
 8003806:	4629      	mov	r1, r5
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	f000 fa7c 	bl	8003d08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_InitTick+0x44>)
 8003812:	4620      	mov	r0, r4
 8003814:	601d      	str	r5, [r3, #0]
}
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	20000534 	.word	0x20000534
 800381c:	20000530 	.word	0x20000530
 8003820:	20000538 	.word	0x20000538

08003824 <HAL_Init>:
{
 8003824:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_Init+0x30>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003836:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800383e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003840:	2003      	movs	r0, #3
 8003842:	f000 fa4f 	bl	8003ce4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003846:	2004      	movs	r0, #4
 8003848:	f7ff ffc8 	bl	80037dc <HAL_InitTick>
  HAL_MspInit();
 800384c:	f7ff fc5e 	bl	800310c <HAL_MspInit>
}
 8003850:	2000      	movs	r0, #0
 8003852:	bd08      	pop	{r3, pc}
 8003854:	40023c00 	.word	0x40023c00

08003858 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003858:	4a03      	ldr	r2, [pc, #12]	; (8003868 <HAL_IncTick+0x10>)
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <HAL_IncTick+0x14>)
 800385c:	6811      	ldr	r1, [r2, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	440b      	add	r3, r1
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20001b10 	.word	0x20001b10
 800386c:	20000534 	.word	0x20000534

08003870 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003870:	4b01      	ldr	r3, [pc, #4]	; (8003878 <HAL_GetTick+0x8>)
 8003872:	6818      	ldr	r0, [r3, #0]
}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20001b10 	.word	0x20001b10

0800387c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800387c:	2800      	cmp	r0, #0
 800387e:	f000 809f 	beq.w	80039c0 <HAL_ADC_Init+0x144>
{
 8003882:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003884:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003886:	4604      	mov	r4, r0
 8003888:	b13d      	cbz	r5, 800389a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800388a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800388c:	06db      	lsls	r3, r3, #27
 800388e:	d50c      	bpl.n	80038aa <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003890:	2300      	movs	r3, #0
 8003892:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003896:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003898:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800389a:	f7ff fc55 	bl	8003148 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800389e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80038a2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038a6:	06db      	lsls	r3, r3, #27
 80038a8:	d4f2      	bmi.n	8003890 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 80038aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038ac:	4a48      	ldr	r2, [pc, #288]	; (80039d0 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 80038ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038b2:	f023 0302 	bic.w	r3, r3, #2
 80038b6:	f043 0302 	orr.w	r3, r3, #2
 80038ba:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038bc:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038be:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038c0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80038c4:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038c6:	6851      	ldr	r1, [r2, #4]
 80038c8:	6860      	ldr	r0, [r4, #4]
 80038ca:	4301      	orrs	r1, r0
 80038cc:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038ce:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038d0:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038d2:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80038e0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 80038e8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4302      	orrs	r2, r0
 80038ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038f0:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038f2:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038f4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80038f8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038fa:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038fe:	4302      	orrs	r2, r0
 8003900:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003902:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <HAL_ADC_Init+0x158>)
 8003904:	4291      	cmp	r1, r2
 8003906:	d052      	beq.n	80039ae <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003908:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800390a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800390c:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8003910:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	4311      	orrs	r1, r2
 8003916:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800391e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	432a      	orrs	r2, r5
 8003924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	f022 0202 	bic.w	r2, r2, #2
 800392c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	7e21      	ldrb	r1, [r4, #24]
 8003932:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003936:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003938:	f894 2020 	ldrb.w	r2, [r4, #32]
 800393c:	2a00      	cmp	r2, #0
 800393e:	d041      	beq.n	80039c4 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003940:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003942:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003944:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003948:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800394a:	6858      	ldr	r0, [r3, #4]
 800394c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003950:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003952:	1e51      	subs	r1, r2, #1
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800395a:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800395c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800395e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003960:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003962:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396a:	3901      	subs	r1, #1
 800396c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003970:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003972:	6899      	ldr	r1, [r3, #8]
 8003974:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003978:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003980:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003984:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800398c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800398e:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003990:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003992:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003996:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003998:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800399a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800399c:	f023 0303 	bic.w	r3, r3, #3
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80039a6:	2300      	movs	r3, #0
 80039a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80039ac:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	e7b2      	b.n	8003926 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80039c0:	2001      	movs	r0, #1
}
 80039c2:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	e7c6      	b.n	800395c <HAL_ADC_Init+0xe0>
 80039ce:	bf00      	nop
 80039d0:	40012300 	.word	0x40012300
 80039d4:	0f000001 	.word	0x0f000001

080039d8 <HAL_ADC_ConfigChannel>:
{
 80039d8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 80039da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80039de:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80039e0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80039e2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80039e4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80039e6:	f000 809c 	beq.w	8003b22 <HAL_ADC_ConfigChannel+0x14a>
 80039ea:	2301      	movs	r3, #1
 80039ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039f0:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039f2:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039f4:	2c09      	cmp	r4, #9
 80039f6:	d82d      	bhi.n	8003a54 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039f8:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039fa:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039fc:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003a00:	f04f 0c07 	mov.w	ip, #7
 8003a04:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003a08:	ea25 050c 	bic.w	r5, r5, ip
 8003a0c:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a0e:	691d      	ldr	r5, [r3, #16]
 8003a10:	fa02 f20e 	lsl.w	r2, r2, lr
 8003a14:	432a      	orrs	r2, r5
 8003a16:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8003a18:	684a      	ldr	r2, [r1, #4]
 8003a1a:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a1c:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8003a1e:	d82f      	bhi.n	8003a80 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a26:	3a05      	subs	r2, #5
 8003a28:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a2c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a30:	fa0e f202 	lsl.w	r2, lr, r2
 8003a34:	ea21 0202 	bic.w	r2, r1, r2
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a3c:	ea4c 0202 	orr.w	r2, ip, r2
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a42:	4a39      	ldr	r2, [pc, #228]	; (8003b28 <HAL_ADC_ConfigChannel+0x150>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d030      	beq.n	8003aaa <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003a4e:	4618      	mov	r0, r3
}
 8003a50:	b003      	add	sp, #12
 8003a52:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a54:	fa1f fc84 	uxth.w	ip, r4
 8003a58:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003a5c:	68dd      	ldr	r5, [r3, #12]
 8003a5e:	f1a2 0e1e 	sub.w	lr, r2, #30
 8003a62:	2207      	movs	r2, #7
 8003a64:	fa02 f20e 	lsl.w	r2, r2, lr
 8003a68:	ea25 0202 	bic.w	r2, r5, r2
 8003a6c:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a6e:	688a      	ldr	r2, [r1, #8]
 8003a70:	68dd      	ldr	r5, [r3, #12]
 8003a72:	fa02 f20e 	lsl.w	r2, r2, lr
 8003a76:	432a      	orrs	r2, r5
 8003a78:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003a7a:	684a      	ldr	r2, [r1, #4]
 8003a7c:	2a06      	cmp	r2, #6
 8003a7e:	d9cf      	bls.n	8003a20 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8003a80:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8003a86:	d836      	bhi.n	8003af6 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a8a:	3a23      	subs	r2, #35	; 0x23
 8003a8c:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a8e:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a92:	fa05 f202 	lsl.w	r2, r5, r2
 8003a96:	ea21 0202 	bic.w	r2, r1, r2
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9e:	ea4c 0202 	orr.w	r2, ip, r2
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aa4:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <HAL_ADC_ConfigChannel+0x150>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d1ce      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x70>
 8003aaa:	2c12      	cmp	r4, #18
 8003aac:	d032      	beq.n	8003b14 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003aae:	f1a4 0310 	sub.w	r3, r4, #16
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d8c8      	bhi.n	8003a48 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_ADC_ConfigChannel+0x154>)
 8003ab8:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003aba:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003abc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ac0:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003ac2:	d1c1      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_ADC_ConfigChannel+0x158>)
 8003ac6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8003ad0:	f202 3283 	addw	r2, r2, #899	; 0x383
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	0c9b      	lsrs	r3, r3, #18
 8003ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003ae2:	9b01      	ldr	r3, [sp, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0af      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003ae8:	9b01      	ldr	r3, [sp, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003aee:	9b01      	ldr	r3, [sp, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f9      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x110>
 8003af4:	e7a8      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003af6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af8:	3a41      	subs	r2, #65	; 0x41
 8003afa:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003afc:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b00:	fa05 f202 	lsl.w	r2, r5, r2
 8003b04:	ea21 0202 	bic.w	r2, r1, r2
 8003b08:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	ea4c 0202 	orr.w	r2, ip, r2
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b12:	e796      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b14:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b20:	e792      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003b22:	2002      	movs	r0, #2
}
 8003b24:	b003      	add	sp, #12
 8003b26:	bd30      	pop	{r4, r5, pc}
 8003b28:	40012000 	.word	0x40012000
 8003b2c:	40012300 	.word	0x40012300
 8003b30:	20000530 	.word	0x20000530

08003b34 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003b34:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b3a:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f000 80c8 	beq.w	8003cd2 <HAL_ADCEx_InjectedConfigChannel+0x19e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003b48:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003b4a:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003b4c:	2d09      	cmp	r5, #9
 8003b4e:	d868      	bhi.n	8003c22 <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003b50:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003b52:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003b54:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8003b58:	2707      	movs	r7, #7
 8003b5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8003b5e:	ea24 0407 	bic.w	r4, r4, r7
 8003b62:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003b64:	691c      	ldr	r4, [r3, #16]
 8003b66:	fa02 f20c 	lsl.w	r2, r2, ip
 8003b6a:	4322      	orrs	r2, r4
 8003b6c:	611a      	str	r2, [r3, #16]
 8003b6e:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003b72:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003b76:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003b78:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003b7e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003b80:	f10e 32ff 	add.w	r2, lr, #4294967295
 8003b84:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003b88:	1ce2      	adds	r2, r4, #3
 8003b8a:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003b8e:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003b94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003b98:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003b9c:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003ba0:	fa0e f202 	lsl.w	r2, lr, r2
 8003ba4:	ea27 0202 	bic.w	r2, r7, r2
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bac:	ea4c 0202 	orr.w	r2, ip, r2
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003bb2:	4a49      	ldr	r2, [pc, #292]	; (8003cd8 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8003bb4:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003bbe:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003bc0:	d066      	beq.n	8003c90 <HAL_ADCEx_InjectedConfigChannel+0x15c>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003bc2:	4316      	orrs	r6, r2
 8003bc4:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003bc6:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003bc8:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003bca:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003bce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	4332      	orrs	r2, r6
 8003bd4:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003bd6:	7d4a      	ldrb	r2, [r1, #21]
 8003bd8:	2a00      	cmp	r2, #0
 8003bda:	d034      	beq.n	8003c46 <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003be2:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003be4:	7d0a      	ldrb	r2, [r1, #20]
 8003be6:	2a00      	cmp	r2, #0
 8003be8:	d034      	beq.n	8003c54 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003bea:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8003bec:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003bee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bf2:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003bf4:	d034      	beq.n	8003c60 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 8003bf6:	2c03      	cmp	r4, #3
 8003bf8:	d059      	beq.n	8003cae <HAL_ADCEx_InjectedConfigChannel+0x17a>
 8003bfa:	2c01      	cmp	r4, #1
 8003bfc:	d04c      	beq.n	8003c98 <HAL_ADCEx_InjectedConfigChannel+0x164>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003bfe:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003c00:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003c02:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003c06:	f022 020f 	bic.w	r2, r2, #15
 8003c0a:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003c0c:	6a1a      	ldr	r2, [r3, #32]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003c12:	4a32      	ldr	r2, [pc, #200]	; (8003cdc <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d030      	beq.n	8003c7a <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c1e:	4618      	mov	r0, r3
}
 8003c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003c22:	fa1f fc85 	uxth.w	ip, r5
 8003c26:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003c2a:	f1a2 041e 	sub.w	r4, r2, #30
 8003c2e:	2707      	movs	r7, #7
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	40a7      	lsls	r7, r4
 8003c34:	ea22 0207 	bic.w	r2, r2, r7
 8003c38:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003c3a:	688a      	ldr	r2, [r1, #8]
 8003c3c:	40a2      	lsls	r2, r4
 8003c3e:	68dc      	ldr	r4, [r3, #12]
 8003c40:	4322      	orrs	r2, r4
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	e794      	b.n	8003b70 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4c:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003c4e:	7d0a      	ldrb	r2, [r1, #20]
 8003c50:	2a00      	cmp	r2, #0
 8003c52:	d1ca      	bne.n	8003bea <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003c54:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003c56:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003c58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c5c:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003c5e:	d1ca      	bne.n	8003bf6 <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003c60:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003c62:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003c64:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003c68:	f022 020f 	bic.w	r2, r2, #15
 8003c6c:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d1ce      	bne.n	8003c18 <HAL_ADCEx_InjectedConfigChannel+0xe4>
 8003c7a:	2d12      	cmp	r5, #18
 8003c7c:	d022      	beq.n	8003cc4 <HAL_ADCEx_InjectedConfigChannel+0x190>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003c7e:	3d10      	subs	r5, #16
 8003c80:	2d01      	cmp	r5, #1
 8003c82:	d8c9      	bhi.n	8003c18 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c84:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 8003c86:	6853      	ldr	r3, [r2, #4]
 8003c88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c8c:	6053      	str	r3, [r2, #4]
 8003c8e:	e7c3      	b.n	8003c18 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003c90:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	e79e      	b.n	8003bd6 <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003c98:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003c9a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003c9c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003ca0:	f022 020f 	bic.w	r2, r2, #15
 8003ca4:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	615a      	str	r2, [r3, #20]
      break;
 8003cac:	e7b1      	b.n	8003c12 <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003cae:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003cb0:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003cb2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003cb6:	f022 020f 	bic.w	r2, r2, #15
 8003cba:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	61da      	str	r2, [r3, #28]
      break;
 8003cc2:	e7a6      	b.n	8003c12 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003cc4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003cc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ccc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003cd0:	e7a2      	b.n	8003c18 <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 8003cd2:	2002      	movs	r0, #2
}
 8003cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	000f0001 	.word	0x000f0001
 8003cdc:	40012000 	.word	0x40012000
 8003ce0:	40012300 	.word	0x40012300

08003ce4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce4:	4907      	ldr	r1, [pc, #28]	; (8003d04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003ce6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cea:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cf2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003cfe:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d08:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <HAL_NVIC_SetPriority+0x74>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d10:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d12:	f1c3 0e07 	rsb	lr, r3, #7
 8003d16:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d1e:	bf28      	it	cs
 8003d20:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d24:	f1bc 0f06 	cmp.w	ip, #6
 8003d28:	d91b      	bls.n	8003d62 <HAL_NVIC_SetPriority+0x5a>
 8003d2a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d2c:	f04f 3cff 	mov.w	ip, #4294967295
 8003d30:	fa0c fc03 	lsl.w	ip, ip, r3
 8003d34:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	f04f 3cff 	mov.w	ip, #4294967295
 8003d3c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003d40:	ea21 010c 	bic.w	r1, r1, ip
 8003d44:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003d46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003d4c:	db0c      	blt.n	8003d68 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003d52:	0109      	lsls	r1, r1, #4
 8003d54:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003d58:	b2c9      	uxtb	r1, r1
 8003d5a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d62:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d64:	4613      	mov	r3, r2
 8003d66:	e7e7      	b.n	8003d38 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_NVIC_SetPriority+0x78>)
 8003d6a:	f000 000f 	and.w	r0, r0, #15
 8003d6e:	0109      	lsls	r1, r1, #4
 8003d70:	4403      	add	r3, r0
 8003d72:	b2c9      	uxtb	r1, r1
 8003d74:	7619      	strb	r1, [r3, #24]
 8003d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d7a:	bf00      	nop
 8003d7c:	e000ed00 	.word	0xe000ed00
 8003d80:	e000ecfc 	.word	0xe000ecfc

08003d84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003d84:	2800      	cmp	r0, #0
 8003d86:	db08      	blt.n	8003d9a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d88:	0941      	lsrs	r1, r0, #5
 8003d8a:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <HAL_NVIC_EnableIRQ+0x18>)
 8003d8c:	f000 001f 	and.w	r0, r0, #31
 8003d90:	2301      	movs	r3, #1
 8003d92:	fa03 f000 	lsl.w	r0, r3, r0
 8003d96:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003d9a:	4770      	bx	lr
 8003d9c:	e000e100 	.word	0xe000e100

08003da0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da0:	3801      	subs	r0, #1
 8003da2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003da6:	d20f      	bcs.n	8003dc8 <HAL_SYSTICK_Config+0x28>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003da8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003daa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dae:	4c07      	ldr	r4, [pc, #28]	; (8003dcc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003db0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003db6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dba:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dbc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dbe:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003dc2:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc4:	6119      	str	r1, [r3, #16]
 8003dc6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003dc8:	2001      	movs	r0, #1
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop

08003dd4 <HAL_SYSTICK_IRQHandler>:
{
 8003dd4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003dd6:	f7ff fffb 	bl	8003dd0 <HAL_SYSTICK_Callback>
}
 8003dda:	bd08      	pop	{r3, pc}

08003ddc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003de0:	f7ff fd46 	bl	8003870 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003de4:	2c00      	cmp	r4, #0
 8003de6:	d052      	beq.n	8003e8e <HAL_DMA_Init+0xb2>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003de8:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dea:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 8003dec:	2100      	movs	r1, #0
 8003dee:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003df2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e00:	e005      	b.n	8003e0e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e02:	f7ff fd35 	bl	8003870 <HAL_GetTick>
 8003e06:	1b43      	subs	r3, r0, r5
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d839      	bhi.n	8003e80 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	07d1      	lsls	r1, r2, #31
 8003e12:	d4f6      	bmi.n	8003e02 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e14:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003e18:	68e1      	ldr	r1, [r4, #12]
 8003e1a:	4302      	orrs	r2, r0
 8003e1c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1e:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e22:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e24:	432a      	orrs	r2, r5
 8003e26:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e28:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8003e2a:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2c:	4302      	orrs	r2, r0
 8003e2e:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e30:	4933      	ldr	r1, [pc, #204]	; (8003f00 <HAL_DMA_Init+0x124>)
 8003e32:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e34:	6a25      	ldr	r5, [r4, #32]
 8003e36:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e38:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e3c:	2904      	cmp	r1, #4
 8003e3e:	d028      	beq.n	8003e92 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e40:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e42:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e44:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e48:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e4a:	b2d8      	uxtb	r0, r3
 8003e4c:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8003e4e:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e50:	3810      	subs	r0, #16
 8003e52:	fba2 5200 	umull	r5, r2, r2, r0
 8003e56:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e58:	492b      	ldr	r1, [pc, #172]	; (8003f08 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e5e:	5c89      	ldrb	r1, [r1, r2]
 8003e60:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e62:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8003e66:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e68:	bf88      	it	hi
 8003e6a:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6c:	223f      	movs	r2, #63	; 0x3f
 8003e6e:	408a      	lsls	r2, r1
 8003e70:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e72:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e74:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8003e76:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e78:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e82:	2220      	movs	r2, #32
 8003e84:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e86:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8003e8a:	4618      	mov	r0, r3
}
 8003e8c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003e8e:	2001      	movs	r0, #1
}
 8003e90:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e92:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8003e96:	4329      	orrs	r1, r5
 8003e98:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8003e9a:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003e9c:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8003e9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ea0:	f021 0107 	bic.w	r1, r1, #7
 8003ea4:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8003ea6:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	d0cd      	beq.n	8003e4a <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eae:	b178      	cbz	r0, 8003ed0 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eb0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003eb4:	d016      	beq.n	8003ee4 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003eb6:	2a02      	cmp	r2, #2
 8003eb8:	d903      	bls.n	8003ec2 <HAL_DMA_Init+0xe6>
 8003eba:	2a03      	cmp	r2, #3
 8003ebc:	d1c5      	bne.n	8003e4a <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ebe:	01ea      	lsls	r2, r5, #7
 8003ec0:	d5c3      	bpl.n	8003e4a <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ec4:	2240      	movs	r2, #64	; 0x40
 8003ec6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003ec8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8003ecc:	4618      	mov	r0, r3
}
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8003ed0:	2a01      	cmp	r2, #1
 8003ed2:	d003      	beq.n	8003edc <HAL_DMA_Init+0x100>
 8003ed4:	f032 0202 	bics.w	r2, r2, #2
 8003ed8:	d1b7      	bne.n	8003e4a <HAL_DMA_Init+0x6e>
 8003eda:	e7f0      	b.n	8003ebe <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003edc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003ee0:	d1b3      	bne.n	8003e4a <HAL_DMA_Init+0x6e>
 8003ee2:	e7ee      	b.n	8003ec2 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8003ee4:	2a03      	cmp	r2, #3
 8003ee6:	d8b0      	bhi.n	8003e4a <HAL_DMA_Init+0x6e>
 8003ee8:	a001      	add	r0, pc, #4	; (adr r0, 8003ef0 <HAL_DMA_Init+0x114>)
 8003eea:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003ec3 	.word	0x08003ec3
 8003ef4:	08003ebf 	.word	0x08003ebf
 8003ef8:	08003ec3 	.word	0x08003ec3
 8003efc:	08003edd 	.word	0x08003edd
 8003f00:	f010803f 	.word	0xf010803f
 8003f04:	aaaaaaab 	.word	0xaaaaaaab
 8003f08:	08008064 	.word	0x08008064

08003f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f10:	2200      	movs	r2, #0
 8003f12:	680d      	ldr	r5, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f14:	f8df a240 	ldr.w	sl, [pc, #576]	; 8004158 <HAL_GPIO_Init+0x24c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f18:	4e90      	ldr	r6, [pc, #576]	; (800415c <HAL_GPIO_Init+0x250>)
{
 8003f1a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	e005      	b.n	8003f2c <HAL_GPIO_Init+0x20>
 8003f20:	3301      	adds	r3, #1
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	f102 0202 	add.w	r2, r2, #2
 8003f28:	f000 80a5 	beq.w	8004076 <HAL_GPIO_Init+0x16a>
    ioposition = 0x01U << position;
 8003f2c:	2401      	movs	r4, #1
 8003f2e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f30:	ea04 0b05 	and.w	fp, r4, r5
    if(iocurrent == ioposition)
 8003f34:	43ac      	bics	r4, r5
 8003f36:	d1f3      	bne.n	8003f20 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f38:	684f      	ldr	r7, [r1, #4]
 8003f3a:	f027 0e10 	bic.w	lr, r7, #16
 8003f3e:	f10e 34ff 	add.w	r4, lr, #4294967295
 8003f42:	2c01      	cmp	r4, #1
 8003f44:	f240 809a 	bls.w	800407c <HAL_GPIO_Init+0x170>
      temp = GPIOx->PUPDR;
 8003f48:	f8d0 e00c 	ldr.w	lr, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4c:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f4e:	f04f 0c03 	mov.w	ip, #3
 8003f52:	fa0c fc02 	lsl.w	ip, ip, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f56:	4094      	lsls	r4, r2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f58:	ea2e 0e0c 	bic.w	lr, lr, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f5c:	ea44 040e 	orr.w	r4, r4, lr
      GPIOx->PUPDR = temp;
 8003f60:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f62:	ea6f 040c 	mvn.w	r4, ip
      temp = GPIOx->MODER;
 8003f66:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f6a:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f6e:	f007 0403 	and.w	r4, r7, #3
 8003f72:	4094      	lsls	r4, r2
 8003f74:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003f78:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f7a:	00fc      	lsls	r4, r7, #3
 8003f7c:	d5d0      	bpl.n	8003f20 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7e:	2400      	movs	r4, #0
 8003f80:	9403      	str	r4, [sp, #12]
 8003f82:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
 8003f86:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003f8a:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8003f8e:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
 8003f92:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8003f96:	9403      	str	r4, [sp, #12]
 8003f98:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f9a:	f023 0403 	bic.w	r4, r3, #3
 8003f9e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003fa2:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fa6:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003faa:	f8d4 8008 	ldr.w	r8, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fae:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003fb2:	f04f 0c0f 	mov.w	ip, #15
 8003fb6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003fba:	ea28 0c0c 	bic.w	ip, r8, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fbe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004160 <HAL_GPIO_Init+0x254>
 8003fc2:	4540      	cmp	r0, r8
 8003fc4:	d029      	beq.n	800401a <HAL_GPIO_Init+0x10e>
 8003fc6:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8003fca:	4540      	cmp	r0, r8
 8003fcc:	f000 809a 	beq.w	8004104 <HAL_GPIO_Init+0x1f8>
 8003fd0:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8004164 <HAL_GPIO_Init+0x258>
 8003fd4:	4540      	cmp	r0, r8
 8003fd6:	f000 809c 	beq.w	8004112 <HAL_GPIO_Init+0x206>
 8003fda:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8004168 <HAL_GPIO_Init+0x25c>
 8003fde:	4540      	cmp	r0, r8
 8003fe0:	f000 809e 	beq.w	8004120 <HAL_GPIO_Init+0x214>
 8003fe4:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800416c <HAL_GPIO_Init+0x260>
 8003fe8:	4540      	cmp	r0, r8
 8003fea:	f000 80a0 	beq.w	800412e <HAL_GPIO_Init+0x222>
 8003fee:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8004170 <HAL_GPIO_Init+0x264>
 8003ff2:	4540      	cmp	r0, r8
 8003ff4:	f000 80a2 	beq.w	800413c <HAL_GPIO_Init+0x230>
 8003ff8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8004174 <HAL_GPIO_Init+0x268>
 8003ffc:	4540      	cmp	r0, r8
 8003ffe:	f000 80a4 	beq.w	800414a <HAL_GPIO_Init+0x23e>
 8004002:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8004178 <HAL_GPIO_Init+0x26c>
 8004006:	4540      	cmp	r0, r8
 8004008:	bf0c      	ite	eq
 800400a:	f04f 0807 	moveq.w	r8, #7
 800400e:	f04f 0808 	movne.w	r8, #8
 8004012:	fa08 fe0e 	lsl.w	lr, r8, lr
 8004016:	ea4c 0c0e 	orr.w	ip, ip, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800401a:	f8c4 c008 	str.w	ip, [r4, #8]
        temp = EXTI->IMR;
 800401e:	6834      	ldr	r4, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8004020:	ea6f 0c0b 	mvn.w	ip, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004024:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8004028:	bf0c      	ite	eq
 800402a:	ea0c 0404 	andeq.w	r4, ip, r4
        {
          temp |= iocurrent;
 800402e:	ea4b 0404 	orrne.w	r4, fp, r4
        }
        EXTI->IMR = temp;
 8004032:	6034      	str	r4, [r6, #0]

        temp = EXTI->EMR;
 8004034:	6874      	ldr	r4, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004036:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800403a:	bf0c      	ite	eq
 800403c:	ea0c 0404 	andeq.w	r4, ip, r4
        {
          temp |= iocurrent;
 8004040:	ea4b 0404 	orrne.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 8004044:	6074      	str	r4, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004046:	68b4      	ldr	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004048:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800404c:	bf0c      	ite	eq
 800404e:	ea0c 0404 	andeq.w	r4, ip, r4
        {
          temp |= iocurrent;
 8004052:	ea4b 0404 	orrne.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8004056:	60b4      	str	r4, [r6, #8]

        temp = EXTI->FTSR;
 8004058:	68f4      	ldr	r4, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800405a:	02bf      	lsls	r7, r7, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800405c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8004060:	bf54      	ite	pl
 8004062:	ea0c 0404 	andpl.w	r4, ip, r4
        {
          temp |= iocurrent;
 8004066:	ea4b 0404 	orrmi.w	r4, fp, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406a:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 800406c:	60f4      	str	r4, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406e:	f102 0202 	add.w	r2, r2, #2
 8004072:	f47f af5b 	bne.w	8003f2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004076:	b005      	add	sp, #20
 8004078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800407c:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004080:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004082:	f04f 0903 	mov.w	r9, #3
 8004086:	fa09 f902 	lsl.w	r9, r9, r2
 800408a:	ea2c 0c09 	bic.w	ip, ip, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 800408e:	4094      	lsls	r4, r2
 8004090:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8004094:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004096:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004098:	ea24 0c0b 	bic.w	ip, r4, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800409c:	f3c7 1400 	ubfx	r4, r7, #4, #1
 80040a0:	409c      	lsls	r4, r3
 80040a2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80040a6:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80040a8:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040aa:	f8d1 c008 	ldr.w	ip, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ae:	ea24 0809 	bic.w	r8, r4, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80040b6:	ea4c 0c08 	orr.w	ip, ip, r8
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040ba:	f1be 0f02 	cmp.w	lr, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040be:	ea6f 0409 	mvn.w	r4, r9
      GPIOx->PUPDR = temp;
 80040c2:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040c6:	f47f af4e 	bne.w	8003f66 <HAL_GPIO_Init+0x5a>
        temp = GPIOx->AFR[position >> 3U];
 80040ca:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80040ce:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040d2:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80040d6:	f8de c020 	ldr.w	ip, [lr, #32]
 80040da:	f8cd c004 	str.w	ip, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040de:	f8d1 c010 	ldr.w	ip, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040e2:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80040e6:	f04f 090f 	mov.w	r9, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040ea:	fa0c fc08 	lsl.w	ip, ip, r8
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ee:	fa09 f808 	lsl.w	r8, r9, r8
 80040f2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80040f6:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040fa:	ea4c 0c09 	orr.w	ip, ip, r9
        GPIOx->AFR[position >> 3U] = temp;
 80040fe:	f8ce c020 	str.w	ip, [lr, #32]
 8004102:	e730      	b.n	8003f66 <HAL_GPIO_Init+0x5a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004104:	f04f 0801 	mov.w	r8, #1
 8004108:	fa08 fe0e 	lsl.w	lr, r8, lr
 800410c:	ea4c 0c0e 	orr.w	ip, ip, lr
 8004110:	e783      	b.n	800401a <HAL_GPIO_Init+0x10e>
 8004112:	f04f 0802 	mov.w	r8, #2
 8004116:	fa08 fe0e 	lsl.w	lr, r8, lr
 800411a:	ea4c 0c0e 	orr.w	ip, ip, lr
 800411e:	e77c      	b.n	800401a <HAL_GPIO_Init+0x10e>
 8004120:	f04f 0803 	mov.w	r8, #3
 8004124:	fa08 fe0e 	lsl.w	lr, r8, lr
 8004128:	ea4c 0c0e 	orr.w	ip, ip, lr
 800412c:	e775      	b.n	800401a <HAL_GPIO_Init+0x10e>
 800412e:	f04f 0804 	mov.w	r8, #4
 8004132:	fa08 fe0e 	lsl.w	lr, r8, lr
 8004136:	ea4c 0c0e 	orr.w	ip, ip, lr
 800413a:	e76e      	b.n	800401a <HAL_GPIO_Init+0x10e>
 800413c:	f04f 0805 	mov.w	r8, #5
 8004140:	fa08 fe0e 	lsl.w	lr, r8, lr
 8004144:	ea4c 0c0e 	orr.w	ip, ip, lr
 8004148:	e767      	b.n	800401a <HAL_GPIO_Init+0x10e>
 800414a:	f04f 0806 	mov.w	r8, #6
 800414e:	fa08 fe0e 	lsl.w	lr, r8, lr
 8004152:	ea4c 0c0e 	orr.w	ip, ip, lr
 8004156:	e760      	b.n	800401a <HAL_GPIO_Init+0x10e>
 8004158:	40023800 	.word	0x40023800
 800415c:	40013c00 	.word	0x40013c00
 8004160:	40020000 	.word	0x40020000
 8004164:	40020800 	.word	0x40020800
 8004168:	40020c00 	.word	0x40020c00
 800416c:	40021000 	.word	0x40021000
 8004170:	40021400 	.word	0x40021400
 8004174:	40021800 	.word	0x40021800
 8004178:	40021c00 	.word	0x40021c00

0800417c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800417c:	2800      	cmp	r0, #0
 800417e:	f000 819c 	beq.w	80044ba <HAL_RCC_OscConfig+0x33e>
{
 8004182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004186:	6803      	ldr	r3, [r0, #0]
 8004188:	07dd      	lsls	r5, r3, #31
{
 800418a:	b082      	sub	sp, #8
 800418c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418e:	d52f      	bpl.n	80041f0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004190:	499e      	ldr	r1, [pc, #632]	; (800440c <HAL_RCC_OscConfig+0x290>)
 8004192:	688a      	ldr	r2, [r1, #8]
 8004194:	f002 020c 	and.w	r2, r2, #12
 8004198:	2a04      	cmp	r2, #4
 800419a:	f000 80ed 	beq.w	8004378 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	688a      	ldr	r2, [r1, #8]
 80041a0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a4:	2a08      	cmp	r2, #8
 80041a6:	f000 80e3 	beq.w	8004370 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041aa:	6863      	ldr	r3, [r4, #4]
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b0:	f000 80ec 	beq.w	800438c <HAL_RCC_OscConfig+0x210>
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b8:	f000 816f 	beq.w	800449a <HAL_RCC_OscConfig+0x31e>
 80041bc:	4d93      	ldr	r5, [pc, #588]	; (800440c <HAL_RCC_OscConfig+0x290>)
 80041be:	682a      	ldr	r2, [r5, #0]
 80041c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041c4:	602a      	str	r2, [r5, #0]
 80041c6:	682a      	ldr	r2, [r5, #0]
 80041c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041cc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f040 80e1 	bne.w	8004396 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7ff fb4c 	bl	8003870 <HAL_GetTick>
 80041d8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041da:	e005      	b.n	80041e8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041dc:	f7ff fb48 	bl	8003870 <HAL_GetTick>
 80041e0:	1b80      	subs	r0, r0, r6
 80041e2:	2864      	cmp	r0, #100	; 0x64
 80041e4:	f200 8101 	bhi.w	80043ea <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	039b      	lsls	r3, r3, #14
 80041ec:	d4f6      	bmi.n	80041dc <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	079f      	lsls	r7, r3, #30
 80041f2:	d528      	bpl.n	8004246 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f4:	4a85      	ldr	r2, [pc, #532]	; (800440c <HAL_RCC_OscConfig+0x290>)
 80041f6:	6891      	ldr	r1, [r2, #8]
 80041f8:	f011 0f0c 	tst.w	r1, #12
 80041fc:	f000 8090 	beq.w	8004320 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004200:	6891      	ldr	r1, [r2, #8]
 8004202:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004206:	2908      	cmp	r1, #8
 8004208:	f000 8086 	beq.w	8004318 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800420c:	68e3      	ldr	r3, [r4, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 810e 	beq.w	8004430 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004214:	4b7e      	ldr	r3, [pc, #504]	; (8004410 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004216:	4e7d      	ldr	r6, [pc, #500]	; (800440c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8004218:	2201      	movs	r2, #1
 800421a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800421c:	f7ff fb28 	bl	8003870 <HAL_GetTick>
 8004220:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004222:	e005      	b.n	8004230 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004224:	f7ff fb24 	bl	8003870 <HAL_GetTick>
 8004228:	1b40      	subs	r0, r0, r5
 800422a:	2802      	cmp	r0, #2
 800422c:	f200 80dd 	bhi.w	80043ea <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	6833      	ldr	r3, [r6, #0]
 8004232:	0798      	lsls	r0, r3, #30
 8004234:	d5f6      	bpl.n	8004224 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004236:	6833      	ldr	r3, [r6, #0]
 8004238:	6922      	ldr	r2, [r4, #16]
 800423a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800423e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004242:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	071a      	lsls	r2, r3, #28
 8004248:	d451      	bmi.n	80042ee <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424a:	0758      	lsls	r0, r3, #29
 800424c:	d52f      	bpl.n	80042ae <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424e:	4a6f      	ldr	r2, [pc, #444]	; (800440c <HAL_RCC_OscConfig+0x290>)
 8004250:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004252:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004256:	d07f      	beq.n	8004358 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8004258:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425a:	4e6e      	ldr	r6, [pc, #440]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800425c:	6833      	ldr	r3, [r6, #0]
 800425e:	05d9      	lsls	r1, r3, #23
 8004260:	f140 80b3 	bpl.w	80043ca <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004264:	68a3      	ldr	r3, [r4, #8]
 8004266:	2b01      	cmp	r3, #1
 8004268:	f000 80c3 	beq.w	80043f2 <HAL_RCC_OscConfig+0x276>
 800426c:	2b05      	cmp	r3, #5
 800426e:	f000 8126 	beq.w	80044be <HAL_RCC_OscConfig+0x342>
 8004272:	4e66      	ldr	r6, [pc, #408]	; (800440c <HAL_RCC_OscConfig+0x290>)
 8004274:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	6732      	str	r2, [r6, #112]	; 0x70
 800427c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800427e:	f022 0204 	bic.w	r2, r2, #4
 8004282:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 80b9 	bne.w	80043fc <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428a:	f7ff faf1 	bl	8003870 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004292:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004294:	e005      	b.n	80042a2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7ff faeb 	bl	8003870 <HAL_GetTick>
 800429a:	1bc0      	subs	r0, r0, r7
 800429c:	4540      	cmp	r0, r8
 800429e:	f200 80a4 	bhi.w	80043ea <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80042a4:	0798      	lsls	r0, r3, #30
 80042a6:	d4f6      	bmi.n	8004296 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	f040 8100 	bne.w	80044ae <HAL_RCC_OscConfig+0x332>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	69a0      	ldr	r0, [r4, #24]
 80042b0:	b1c8      	cbz	r0, 80042e6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b2:	4d56      	ldr	r5, [pc, #344]	; (800440c <HAL_RCC_OscConfig+0x290>)
 80042b4:	68ab      	ldr	r3, [r5, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	f000 80c9 	beq.w	8004452 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_OscConfig+0x294>)
 80042c2:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80042c6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c8:	f000 8103 	beq.w	80044d2 <HAL_RCC_OscConfig+0x356>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7ff fad0 	bl	8003870 <HAL_GetTick>
 80042d0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d2:	e005      	b.n	80042e0 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d4:	f7ff facc 	bl	8003870 <HAL_GetTick>
 80042d8:	1b00      	subs	r0, r0, r4
 80042da:	2802      	cmp	r0, #2
 80042dc:	f200 8085 	bhi.w	80043ea <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	019b      	lsls	r3, r3, #6
 80042e4:	d4f6      	bmi.n	80042d4 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80042e6:	2000      	movs	r0, #0
}
 80042e8:	b002      	add	sp, #8
 80042ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ee:	6963      	ldr	r3, [r4, #20]
 80042f0:	b30b      	cbz	r3, 8004336 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f4:	4e45      	ldr	r6, [pc, #276]	; (800440c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80042f6:	2201      	movs	r2, #1
 80042f8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80042fc:	f7ff fab8 	bl	8003870 <HAL_GetTick>
 8004300:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004302:	e004      	b.n	800430e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004304:	f7ff fab4 	bl	8003870 <HAL_GetTick>
 8004308:	1b40      	subs	r0, r0, r5
 800430a:	2802      	cmp	r0, #2
 800430c:	d86d      	bhi.n	80043ea <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800430e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004310:	079b      	lsls	r3, r3, #30
 8004312:	d5f7      	bpl.n	8004304 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	e798      	b.n	800424a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004318:	6852      	ldr	r2, [r2, #4]
 800431a:	0256      	lsls	r6, r2, #9
 800431c:	f53f af76 	bmi.w	800420c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004320:	4a3a      	ldr	r2, [pc, #232]	; (800440c <HAL_RCC_OscConfig+0x290>)
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	0795      	lsls	r5, r2, #30
 8004326:	d544      	bpl.n	80043b2 <HAL_RCC_OscConfig+0x236>
 8004328:	68e2      	ldr	r2, [r4, #12]
 800432a:	2a01      	cmp	r2, #1
 800432c:	d041      	beq.n	80043b2 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 800432e:	2001      	movs	r0, #1
}
 8004330:	b002      	add	sp, #8
 8004332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004336:	4a36      	ldr	r2, [pc, #216]	; (8004410 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004338:	4e34      	ldr	r6, [pc, #208]	; (800440c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800433a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800433e:	f7ff fa97 	bl	8003870 <HAL_GetTick>
 8004342:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	e004      	b.n	8004350 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004346:	f7ff fa93 	bl	8003870 <HAL_GetTick>
 800434a:	1b40      	subs	r0, r0, r5
 800434c:	2802      	cmp	r0, #2
 800434e:	d84c      	bhi.n	80043ea <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004350:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004352:	079f      	lsls	r7, r3, #30
 8004354:	d4f7      	bmi.n	8004346 <HAL_RCC_OscConfig+0x1ca>
 8004356:	e7dd      	b.n	8004314 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800435c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004360:	6413      	str	r3, [r2, #64]	; 0x40
 8004362:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800436c:	2501      	movs	r5, #1
 800436e:	e774      	b.n	800425a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004370:	684a      	ldr	r2, [r1, #4]
 8004372:	0250      	lsls	r0, r2, #9
 8004374:	f57f af19 	bpl.w	80041aa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	4a24      	ldr	r2, [pc, #144]	; (800440c <HAL_RCC_OscConfig+0x290>)
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	0391      	lsls	r1, r2, #14
 800437e:	f57f af37 	bpl.w	80041f0 <HAL_RCC_OscConfig+0x74>
 8004382:	6862      	ldr	r2, [r4, #4]
 8004384:	2a00      	cmp	r2, #0
 8004386:	f47f af33 	bne.w	80041f0 <HAL_RCC_OscConfig+0x74>
 800438a:	e7d0      	b.n	800432e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438c:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_RCC_OscConfig+0x290>)
 800438e:	6813      	ldr	r3, [r2, #0]
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004396:	f7ff fa6b 	bl	8003870 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4e1c      	ldr	r6, [pc, #112]	; (800440c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800439c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	e004      	b.n	80043aa <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a0:	f7ff fa66 	bl	8003870 <HAL_GetTick>
 80043a4:	1b40      	subs	r0, r0, r5
 80043a6:	2864      	cmp	r0, #100	; 0x64
 80043a8:	d81f      	bhi.n	80043ea <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	6833      	ldr	r3, [r6, #0]
 80043ac:	039a      	lsls	r2, r3, #14
 80043ae:	d5f7      	bpl.n	80043a0 <HAL_RCC_OscConfig+0x224>
 80043b0:	e71d      	b.n	80041ee <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	4916      	ldr	r1, [pc, #88]	; (800440c <HAL_RCC_OscConfig+0x290>)
 80043b4:	6920      	ldr	r0, [r4, #16]
 80043b6:	680a      	ldr	r2, [r1, #0]
 80043b8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80043bc:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80043c0:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c2:	071a      	lsls	r2, r3, #28
 80043c4:	f57f af41 	bpl.w	800424a <HAL_RCC_OscConfig+0xce>
 80043c8:	e791      	b.n	80042ee <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ca:	6833      	ldr	r3, [r6, #0]
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80043d2:	f7ff fa4d 	bl	8003870 <HAL_GetTick>
 80043d6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d8:	6833      	ldr	r3, [r6, #0]
 80043da:	05da      	lsls	r2, r3, #23
 80043dc:	f53f af42 	bmi.w	8004264 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e0:	f7ff fa46 	bl	8003870 <HAL_GetTick>
 80043e4:	1bc0      	subs	r0, r0, r7
 80043e6:	2802      	cmp	r0, #2
 80043e8:	d9f6      	bls.n	80043d8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80043ea:	2003      	movs	r0, #3
}
 80043ec:	b002      	add	sp, #8
 80043ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f2:	4a06      	ldr	r2, [pc, #24]	; (800440c <HAL_RCC_OscConfig+0x290>)
 80043f4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80043fc:	f7ff fa38 	bl	8003870 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004400:	4f02      	ldr	r7, [pc, #8]	; (800440c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004402:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	e00b      	b.n	8004422 <HAL_RCC_OscConfig+0x2a6>
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800
 8004410:	42470000 	.word	0x42470000
 8004414:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004418:	f7ff fa2a 	bl	8003870 <HAL_GetTick>
 800441c:	1b80      	subs	r0, r0, r6
 800441e:	4540      	cmp	r0, r8
 8004420:	d8e3      	bhi.n	80043ea <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004424:	079b      	lsls	r3, r3, #30
 8004426:	d5f7      	bpl.n	8004418 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004428:	2d00      	cmp	r5, #0
 800442a:	f43f af40 	beq.w	80042ae <HAL_RCC_OscConfig+0x132>
 800442e:	e03e      	b.n	80044ae <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_DISABLE();
 8004430:	4a3e      	ldr	r2, [pc, #248]	; (800452c <HAL_RCC_OscConfig+0x3b0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	4e3f      	ldr	r6, [pc, #252]	; (8004530 <HAL_RCC_OscConfig+0x3b4>)
        __HAL_RCC_HSI_DISABLE();
 8004434:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004436:	f7ff fa1b 	bl	8003870 <HAL_GetTick>
 800443a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443c:	e004      	b.n	8004448 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443e:	f7ff fa17 	bl	8003870 <HAL_GetTick>
 8004442:	1b40      	subs	r0, r0, r5
 8004444:	2802      	cmp	r0, #2
 8004446:	d8d0      	bhi.n	80043ea <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004448:	6833      	ldr	r3, [r6, #0]
 800444a:	0799      	lsls	r1, r3, #30
 800444c:	d4f7      	bmi.n	800443e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	e6f9      	b.n	8004246 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004452:	2801      	cmp	r0, #1
 8004454:	f43f af48 	beq.w	80042e8 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8004458:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	69e2      	ldr	r2, [r4, #28]
 800445c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8004460:	4291      	cmp	r1, r2
 8004462:	f47f af64 	bne.w	800432e <HAL_RCC_OscConfig+0x1b2>
 8004466:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004468:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446c:	4291      	cmp	r1, r2
 800446e:	f47f af5e 	bne.w	800432e <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004472:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004474:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004478:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800447a:	428a      	cmp	r2, r1
 800447c:	f47f af57 	bne.w	800432e <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004480:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004482:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004486:	4291      	cmp	r1, r2
 8004488:	f47f af51 	bne.w	800432e <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800448c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800448e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
        return HAL_ERROR;
 8004492:	1a18      	subs	r0, r3, r0
 8004494:	bf18      	it	ne
 8004496:	2001      	movne	r0, #1
 8004498:	e726      	b.n	80042e8 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	4b25      	ldr	r3, [pc, #148]	; (8004530 <HAL_RCC_OscConfig+0x3b4>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044aa:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ac:	e773      	b.n	8004396 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ae:	4a20      	ldr	r2, [pc, #128]	; (8004530 <HAL_RCC_OscConfig+0x3b4>)
 80044b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80044b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b6:	6413      	str	r3, [r2, #64]	; 0x40
 80044b8:	e6f9      	b.n	80042ae <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80044ba:	2001      	movs	r0, #1
}
 80044bc:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044be:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <HAL_RCC_OscConfig+0x3b4>)
 80044c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c2:	f042 0204 	orr.w	r2, r2, #4
 80044c6:	671a      	str	r2, [r3, #112]	; 0x70
 80044c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d0:	e794      	b.n	80043fc <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80044d2:	f7ff f9cd 	bl	8003870 <HAL_GetTick>
 80044d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d8:	e004      	b.n	80044e4 <HAL_RCC_OscConfig+0x368>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044da:	f7ff f9c9 	bl	8003870 <HAL_GetTick>
 80044de:	1b80      	subs	r0, r0, r6
 80044e0:	2802      	cmp	r0, #2
 80044e2:	d882      	bhi.n	80043ea <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	0199      	lsls	r1, r3, #6
 80044e8:	d4f7      	bmi.n	80044da <HAL_RCC_OscConfig+0x35e>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ea:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80044ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80044f0:	430b      	orrs	r3, r1
 80044f2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80044f6:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80044fa:	0852      	lsrs	r2, r2, #1
 80044fc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004500:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004502:	490a      	ldr	r1, [pc, #40]	; (800452c <HAL_RCC_OscConfig+0x3b0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004508:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800450a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800450c:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800450e:	f7ff f9af 	bl	8003870 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4d07      	ldr	r5, [pc, #28]	; (8004530 <HAL_RCC_OscConfig+0x3b4>)
        tickstart = HAL_GetTick();
 8004514:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	e005      	b.n	8004524 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004518:	f7ff f9aa 	bl	8003870 <HAL_GetTick>
 800451c:	1b00      	subs	r0, r0, r4
 800451e:	2802      	cmp	r0, #2
 8004520:	f63f af63 	bhi.w	80043ea <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	019a      	lsls	r2, r3, #6
 8004528:	d5f6      	bpl.n	8004518 <HAL_RCC_OscConfig+0x39c>
 800452a:	e6dc      	b.n	80042e6 <HAL_RCC_OscConfig+0x16a>
 800452c:	42470000 	.word	0x42470000
 8004530:	40023800 	.word	0x40023800

08004534 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004534:	4b01      	ldr	r3, [pc, #4]	; (800453c <HAL_RCC_EnableCSS+0x8>)
 8004536:	2201      	movs	r2, #1
 8004538:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800453a:	4770      	bx	lr
 800453c:	42470000 	.word	0x42470000

08004540 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004540:	4916      	ldr	r1, [pc, #88]	; (800459c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8004542:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004544:	688b      	ldr	r3, [r1, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b04      	cmp	r3, #4
 800454c:	d01b      	beq.n	8004586 <HAL_RCC_GetSysClockFreq+0x46>
 800454e:	2b08      	cmp	r3, #8
 8004550:	d117      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004552:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004554:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004556:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004558:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800455c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004560:	d113      	bne.n	800458a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	480f      	ldr	r0, [pc, #60]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x60>)
 8004564:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004568:	fba1 0100 	umull	r0, r1, r1, r0
 800456c:	f7fb fe2c 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_RCC_GetSysClockFreq+0x5c>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004578:	3301      	adds	r3, #1
 800457a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800457c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004580:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004582:	4807      	ldr	r0, [pc, #28]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8004584:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004586:	4807      	ldr	r0, [pc, #28]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004588:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458a:	4806      	ldr	r0, [pc, #24]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x64>)
 800458c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004590:	2300      	movs	r3, #0
 8004592:	fba1 0100 	umull	r0, r1, r1, r0
 8004596:	f7fb fe17 	bl	80001c8 <__aeabi_uldivmod>
 800459a:	e7e9      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x30>
 800459c:	40023800 	.word	0x40023800
 80045a0:	00f42400 	.word	0x00f42400
 80045a4:	017d7840 	.word	0x017d7840

080045a8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80045a8:	2800      	cmp	r0, #0
 80045aa:	f000 8087 	beq.w	80046bc <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ae:	4a48      	ldr	r2, [pc, #288]	; (80046d0 <HAL_RCC_ClockConfig+0x128>)
 80045b0:	6813      	ldr	r3, [r2, #0]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	428b      	cmp	r3, r1
{
 80045b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045bc:	460d      	mov	r5, r1
 80045be:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	d209      	bcs.n	80045d6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	b2cb      	uxtb	r3, r1
 80045c4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	428b      	cmp	r3, r1
 80045ce:	d002      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80045d0:	2001      	movs	r0, #1
}
 80045d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	0798      	lsls	r0, r3, #30
 80045da:	d514      	bpl.n	8004606 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	0759      	lsls	r1, r3, #29
 80045de:	d504      	bpl.n	80045ea <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e0:	493c      	ldr	r1, [pc, #240]	; (80046d4 <HAL_RCC_ClockConfig+0x12c>)
 80045e2:	688a      	ldr	r2, [r1, #8]
 80045e4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80045e8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ea:	071a      	lsls	r2, r3, #28
 80045ec:	d504      	bpl.n	80045f8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ee:	4939      	ldr	r1, [pc, #228]	; (80046d4 <HAL_RCC_ClockConfig+0x12c>)
 80045f0:	688a      	ldr	r2, [r1, #8]
 80045f2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80045f6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f8:	4936      	ldr	r1, [pc, #216]	; (80046d4 <HAL_RCC_ClockConfig+0x12c>)
 80045fa:	68a0      	ldr	r0, [r4, #8]
 80045fc:	688a      	ldr	r2, [r1, #8]
 80045fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004602:	4302      	orrs	r2, r0
 8004604:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004606:	07df      	lsls	r7, r3, #31
 8004608:	d521      	bpl.n	800464e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	2a01      	cmp	r2, #1
 800460e:	d057      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004610:	1e93      	subs	r3, r2, #2
 8004612:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004614:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <HAL_RCC_ClockConfig+0x12c>)
 8004616:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004618:	d94d      	bls.n	80046b6 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461a:	0799      	lsls	r1, r3, #30
 800461c:	d5d8      	bpl.n	80045d0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4e2d      	ldr	r6, [pc, #180]	; (80046d4 <HAL_RCC_ClockConfig+0x12c>)
 8004620:	68b3      	ldr	r3, [r6, #8]
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	4313      	orrs	r3, r2
 8004628:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800462a:	f7ff f921 	bl	8003870 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004632:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004634:	e004      	b.n	8004640 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004636:	f7ff f91b 	bl	8003870 <HAL_GetTick>
 800463a:	1bc0      	subs	r0, r0, r7
 800463c:	4540      	cmp	r0, r8
 800463e:	d844      	bhi.n	80046ca <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004640:	68b3      	ldr	r3, [r6, #8]
 8004642:	6862      	ldr	r2, [r4, #4]
 8004644:	f003 030c 	and.w	r3, r3, #12
 8004648:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800464c:	d1f3      	bne.n	8004636 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800464e:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <HAL_RCC_ClockConfig+0x128>)
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	42ab      	cmp	r3, r5
 8004658:	d906      	bls.n	8004668 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	b2eb      	uxtb	r3, r5
 800465c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	42ab      	cmp	r3, r5
 8004666:	d1b3      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	075a      	lsls	r2, r3, #29
 800466c:	d506      	bpl.n	800467c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800466e:	4919      	ldr	r1, [pc, #100]	; (80046d4 <HAL_RCC_ClockConfig+0x12c>)
 8004670:	68e0      	ldr	r0, [r4, #12]
 8004672:	688a      	ldr	r2, [r1, #8]
 8004674:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004678:	4302      	orrs	r2, r0
 800467a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467c:	071b      	lsls	r3, r3, #28
 800467e:	d507      	bpl.n	8004690 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004680:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <HAL_RCC_ClockConfig+0x12c>)
 8004682:	6921      	ldr	r1, [r4, #16]
 8004684:	6893      	ldr	r3, [r2, #8]
 8004686:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800468a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800468e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004690:	f7ff ff56 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 8004694:	4a0f      	ldr	r2, [pc, #60]	; (80046d4 <HAL_RCC_ClockConfig+0x12c>)
 8004696:	4c10      	ldr	r4, [pc, #64]	; (80046d8 <HAL_RCC_ClockConfig+0x130>)
 8004698:	6892      	ldr	r2, [r2, #8]
 800469a:	4910      	ldr	r1, [pc, #64]	; (80046dc <HAL_RCC_ClockConfig+0x134>)
 800469c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80046a0:	4603      	mov	r3, r0
 80046a2:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80046a4:	480e      	ldr	r0, [pc, #56]	; (80046e0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046a6:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80046a8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046aa:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80046ac:	f7ff f896 	bl	80037dc <HAL_InitTick>
  return HAL_OK;
 80046b0:	2000      	movs	r0, #0
}
 80046b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b6:	0198      	lsls	r0, r3, #6
 80046b8:	d4b1      	bmi.n	800461e <HAL_RCC_ClockConfig+0x76>
 80046ba:	e789      	b.n	80045d0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80046bc:	2001      	movs	r0, #1
}
 80046be:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <HAL_RCC_ClockConfig+0x12c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	039e      	lsls	r6, r3, #14
 80046c6:	d4aa      	bmi.n	800461e <HAL_RCC_ClockConfig+0x76>
 80046c8:	e782      	b.n	80045d0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80046ca:	2003      	movs	r0, #3
 80046cc:	e781      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2a>
 80046ce:	bf00      	nop
 80046d0:	40023c00 	.word	0x40023c00
 80046d4:	40023800 	.word	0x40023800
 80046d8:	0800804c 	.word	0x0800804c
 80046dc:	20000530 	.word	0x20000530
 80046e0:	20000538 	.word	0x20000538

080046e4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80046e4:	4b01      	ldr	r3, [pc, #4]	; (80046ec <HAL_RCC_GetHCLKFreq+0x8>)
}
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000530 	.word	0x20000530

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80046f2:	4905      	ldr	r1, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4a05      	ldr	r2, [pc, #20]	; (800470c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80046f8:	6808      	ldr	r0, [r1, #0]
 80046fa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80046fe:	5cd3      	ldrb	r3, [r2, r3]
}
 8004700:	40d8      	lsrs	r0, r3
 8004702:	4770      	bx	lr
 8004704:	40023800 	.word	0x40023800
 8004708:	20000530 	.word	0x20000530
 800470c:	0800805c 	.word	0x0800805c

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004710:	4b04      	ldr	r3, [pc, #16]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004712:	4905      	ldr	r1, [pc, #20]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004718:	6808      	ldr	r0, [r1, #0]
 800471a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800471e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004720:	40d8      	lsrs	r0, r3
 8004722:	4770      	bx	lr
 8004724:	40023800 	.word	0x40023800
 8004728:	20000530 	.word	0x20000530
 800472c:	0800805c 	.word	0x0800805c

08004730 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004730:	2800      	cmp	r0, #0
 8004732:	d074      	beq.n	800481e <HAL_TIM_Base_Init+0xee>
{
 8004734:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004736:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800473a:	4604      	mov	r4, r0
 800473c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004740:	2b00      	cmp	r3, #0
 8004742:	d067      	beq.n	8004814 <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004744:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004746:	4937      	ldr	r1, [pc, #220]	; (8004824 <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	2302      	movs	r3, #2
 800474a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800474e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004750:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004752:	d04b      	beq.n	80047ec <HAL_TIM_Base_Init+0xbc>
 8004754:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004758:	d031      	beq.n	80047be <HAL_TIM_Base_Init+0x8e>
 800475a:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800475e:	428a      	cmp	r2, r1
 8004760:	d02d      	beq.n	80047be <HAL_TIM_Base_Init+0x8e>
 8004762:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004766:	428a      	cmp	r2, r1
 8004768:	d029      	beq.n	80047be <HAL_TIM_Base_Init+0x8e>
 800476a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800476e:	428a      	cmp	r2, r1
 8004770:	d025      	beq.n	80047be <HAL_TIM_Base_Init+0x8e>
 8004772:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8004776:	428a      	cmp	r2, r1
 8004778:	d038      	beq.n	80047ec <HAL_TIM_Base_Init+0xbc>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800477e:	428a      	cmp	r2, r1
 8004780:	d021      	beq.n	80047c6 <HAL_TIM_Base_Init+0x96>
 8004782:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004786:	428a      	cmp	r2, r1
 8004788:	d01d      	beq.n	80047c6 <HAL_TIM_Base_Init+0x96>
 800478a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800478e:	428a      	cmp	r2, r1
 8004790:	d019      	beq.n	80047c6 <HAL_TIM_Base_Init+0x96>
 8004792:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8004796:	428a      	cmp	r2, r1
 8004798:	d015      	beq.n	80047c6 <HAL_TIM_Base_Init+0x96>
 800479a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800479e:	428a      	cmp	r2, r1
 80047a0:	d011      	beq.n	80047c6 <HAL_TIM_Base_Init+0x96>
 80047a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047a6:	428a      	cmp	r2, r1
 80047a8:	d00d      	beq.n	80047c6 <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047aa:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ac:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80047b4:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80047ba:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047bc:	e010      	b.n	80047e0 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 80047be:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80047c4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047c6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80047d8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80047da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047dc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80047de:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e0:	2301      	movs	r3, #1
 80047e2:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80047e8:	2000      	movs	r0, #0
}
 80047ea:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80047ec:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ee:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80047f4:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fa:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047fc:	69a1      	ldr	r1, [r4, #24]
 80047fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004802:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004804:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004806:	68e3      	ldr	r3, [r4, #12]
 8004808:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800480a:	6863      	ldr	r3, [r4, #4]
 800480c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800480e:	6963      	ldr	r3, [r4, #20]
 8004810:	6313      	str	r3, [r2, #48]	; 0x30
 8004812:	e7e5      	b.n	80047e0 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004814:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004818:	f7fe fd02 	bl	8003220 <HAL_TIM_Base_MspInit>
 800481c:	e792      	b.n	8004744 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800481e:	2001      	movs	r0, #1
}
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000

08004828 <HAL_TIM_PWM_MspInit>:
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop

0800482c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800482c:	2800      	cmp	r0, #0
 800482e:	d074      	beq.n	800491a <HAL_TIM_PWM_Init+0xee>
{
 8004830:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004832:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004836:	4604      	mov	r4, r0
 8004838:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800483c:	2b00      	cmp	r3, #0
 800483e:	d067      	beq.n	8004910 <HAL_TIM_PWM_Init+0xe4>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004842:	4937      	ldr	r1, [pc, #220]	; (8004920 <HAL_TIM_PWM_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	2302      	movs	r3, #2
 8004846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800484a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800484c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800484e:	d04b      	beq.n	80048e8 <HAL_TIM_PWM_Init+0xbc>
 8004850:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004854:	d031      	beq.n	80048ba <HAL_TIM_PWM_Init+0x8e>
 8004856:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800485a:	428a      	cmp	r2, r1
 800485c:	d02d      	beq.n	80048ba <HAL_TIM_PWM_Init+0x8e>
 800485e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004862:	428a      	cmp	r2, r1
 8004864:	d029      	beq.n	80048ba <HAL_TIM_PWM_Init+0x8e>
 8004866:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800486a:	428a      	cmp	r2, r1
 800486c:	d025      	beq.n	80048ba <HAL_TIM_PWM_Init+0x8e>
 800486e:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8004872:	428a      	cmp	r2, r1
 8004874:	d038      	beq.n	80048e8 <HAL_TIM_PWM_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004876:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800487a:	428a      	cmp	r2, r1
 800487c:	d021      	beq.n	80048c2 <HAL_TIM_PWM_Init+0x96>
 800487e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004882:	428a      	cmp	r2, r1
 8004884:	d01d      	beq.n	80048c2 <HAL_TIM_PWM_Init+0x96>
 8004886:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800488a:	428a      	cmp	r2, r1
 800488c:	d019      	beq.n	80048c2 <HAL_TIM_PWM_Init+0x96>
 800488e:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8004892:	428a      	cmp	r2, r1
 8004894:	d015      	beq.n	80048c2 <HAL_TIM_PWM_Init+0x96>
 8004896:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800489a:	428a      	cmp	r2, r1
 800489c:	d011      	beq.n	80048c2 <HAL_TIM_PWM_Init+0x96>
 800489e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80048a2:	428a      	cmp	r2, r1
 80048a4:	d00d      	beq.n	80048c2 <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a6:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ae:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80048b0:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80048b2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048b6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b8:	e010      	b.n	80048dc <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 80048ba:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048c0:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80048d4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80048d6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048da:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80048dc:	2301      	movs	r3, #1
 80048de:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80048e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80048e4:	2000      	movs	r0, #0
}
 80048e6:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80048e8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ea:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048f0:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80048f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f8:	69a1      	ldr	r1, [r4, #24]
 80048fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048fe:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004900:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004902:	68e3      	ldr	r3, [r4, #12]
 8004904:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004906:	6863      	ldr	r3, [r4, #4]
 8004908:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800490a:	6963      	ldr	r3, [r4, #20]
 800490c:	6313      	str	r3, [r2, #48]	; 0x30
 800490e:	e7e5      	b.n	80048dc <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004910:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004914:	f7ff ff88 	bl	8004828 <HAL_TIM_PWM_MspInit>
 8004918:	e792      	b.n	8004840 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 800491a:	2001      	movs	r0, #1
}
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000

08004924 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004924:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	f000 80ca 	beq.w	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x19e>
 800492e:	f04f 0c01 	mov.w	ip, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004932:	2302      	movs	r3, #2
{
 8004934:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004936:	f880 c03c 	strb.w	ip, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800493a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800493e:	2a0c      	cmp	r2, #12
 8004940:	d832      	bhi.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x84>
 8004942:	e8df f002 	tbb	[pc, r2]
 8004946:	3107      	.short	0x3107
 8004948:	31683131 	.word	0x31683131
 800494c:	31943131 	.word	0x31943131
 8004950:	3131      	.short	0x3131
 8004952:	3a          	.byte	0x3a
 8004953:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004954:	6803      	ldr	r3, [r0, #0]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004956:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004960:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004962:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004964:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004966:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800496a:	4334      	orrs	r4, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800496c:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800496e:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8004972:	4332      	orrs	r2, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004974:	4e6e      	ldr	r6, [pc, #440]	; (8004b30 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004976:	42b3      	cmp	r3, r6
 8004978:	f000 80a5 	beq.w	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800497c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004980:	42b3      	cmp	r3, r6
 8004982:	f000 80a0 	beq.w	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004986:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004988:	619c      	str	r4, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800498a:	684c      	ldr	r4, [r1, #4]
 800498c:	635c      	str	r4, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004990:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004992:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004994:	f044 0408 	orr.w	r4, r4, #8
 8004998:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800499a:	6999      	ldr	r1, [r3, #24]
 800499c:	f021 0104 	bic.w	r1, r1, #4
 80049a0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	432a      	orrs	r2, r5
 80049a6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80049a8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80049aa:	2201      	movs	r2, #1
 80049ac:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80049b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80049b4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80049b6:	4618      	mov	r0, r3
}
 80049b8:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ba:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049bc:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049c4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80049c6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80049c8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80049ca:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049cc:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d4:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80049d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049da:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049de:	4e54      	ldr	r6, [pc, #336]	; (8004b30 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80049e0:	42b3      	cmp	r3, r6
 80049e2:	f000 808f 	beq.w	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
 80049e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80049ea:	42b3      	cmp	r3, r6
 80049ec:	f000 808a 	beq.w	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f0:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f2:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049f4:	684c      	ldr	r4, [r1, #4]
 80049f6:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049fa:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049fc:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049fe:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004a02:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a04:	69d9      	ldr	r1, [r3, #28]
 8004a06:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004a0a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004a12:	61da      	str	r2, [r3, #28]
      break;
 8004a14:	e7c8      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x84>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a16:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a18:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1a:	6a1a      	ldr	r2, [r3, #32]
 8004a1c:	f022 0210 	bic.w	r2, r2, #16
 8004a20:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004a22:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004a24:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004a26:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a28:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a2c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a30:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004a32:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a36:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a3a:	4e3d      	ldr	r6, [pc, #244]	; (8004b30 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004a3c:	42b3      	cmp	r3, r6
 8004a3e:	d051      	beq.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8004a40:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a44:	42b3      	cmp	r3, r6
 8004a46:	d04d      	beq.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CR2 = tmpcr2;
 8004a48:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004a4a:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004a4c:	684c      	ldr	r4, [r1, #4]
 8004a4e:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004a50:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a52:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a54:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a56:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004a5a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a5c:	6999      	ldr	r1, [r3, #24]
 8004a5e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004a62:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004a6a:	619a      	str	r2, [r3, #24]
      break;
 8004a6c:	e79c      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x84>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a6e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004a70:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a78:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004a7c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004a7e:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a80:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004a84:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a86:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004a88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a8c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a90:	4e27      	ldr	r6, [pc, #156]	; (8004b30 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004a92:	42b3      	cmp	r3, r6
 8004a94:	d03c      	beq.n	8004b10 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 8004a96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a9a:	42b3      	cmp	r3, r6
 8004a9c:	d038      	beq.n	8004b10 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CR2 = tmpcr2;
 8004a9e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004aa0:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004aa2:	684c      	ldr	r4, [r1, #4]
 8004aa4:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004aa6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aa8:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aaa:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aac:	f044 0408 	orr.w	r4, r4, #8
 8004ab0:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ab2:	69d9      	ldr	r1, [r3, #28]
 8004ab4:	f021 0104 	bic.w	r1, r1, #4
 8004ab8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	432a      	orrs	r2, r5
 8004abe:	61da      	str	r2, [r3, #28]
      break;
 8004ac0:	e772      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x84>
  __HAL_LOCK(htim);
 8004ac2:	2002      	movs	r0, #2
}
 8004ac4:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004ac6:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ac8:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004acc:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ace:	e9d1 c605 	ldrd	ip, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ad2:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad6:	ea4c 0c06 	orr.w	ip, ip, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ada:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ade:	ea4c 0505 	orr.w	r5, ip, r5
 8004ae2:	e750      	b.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aea:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aee:	e9d1 c605 	ldrd	ip, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004af2:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af6:	ea4c 0c06 	orr.w	ip, ip, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004afe:	ea45 058c 	orr.w	r5, r5, ip, lsl #2
 8004b02:	e7a1      	b.n	8004a48 <HAL_TIM_PWM_ConfigChannel+0x124>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b04:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b06:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b0a:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004b0e:	e76f      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0xcc>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b10:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b16:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b1a:	e9d1 c605 	ldrd	ip, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b1e:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b22:	ea4c 0c06 	orr.w	ip, ip, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b2a:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
 8004b2e:	e7b6      	b.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0x17a>
 8004b30:	40010000 	.word	0x40010000

08004b34 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004b34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d074      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xf2>
{
 8004b3c:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8004b3e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8004b40:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004b42:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004b44:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004b4e:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b50:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8004b54:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004b58:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004b5a:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004b5c:	d065      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0xf6>
 8004b5e:	d831      	bhi.n	8004bc4 <HAL_TIM_ConfigClockSource+0x90>
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d048      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0xc2>
 8004b64:	d921      	bls.n	8004baa <HAL_TIM_ConfigClockSource+0x76>
 8004b66:	2b50      	cmp	r3, #80	; 0x50
 8004b68:	d116      	bne.n	8004b98 <HAL_TIM_ConfigClockSource+0x64>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6a:	684c      	ldr	r4, [r1, #4]
 8004b6c:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b6e:	6a11      	ldr	r1, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b70:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004b74:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b76:	6a14      	ldr	r4, [r2, #32]
 8004b78:	f024 0401 	bic.w	r4, r4, #1
 8004b7c:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	6993      	ldr	r3, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b84:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b88:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004b8a:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b8c:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b92:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b96:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8004b98:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ba0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004ba4:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004ba6:	4618      	mov	r0, r3
}
 8004ba8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d002      	beq.n	8004bb4 <HAL_TIM_ConfigClockSource+0x80>
 8004bae:	d91e      	bls.n	8004bee <HAL_TIM_ConfigClockSource+0xba>
 8004bb0:	2b30      	cmp	r3, #48	; 0x30
 8004bb2:	d1f1      	bne.n	8004b98 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8004bb4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bb6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004bc0:	6093      	str	r3, [r2, #8]
}
 8004bc2:	e7e9      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004bc4:	2b70      	cmp	r3, #112	; 0x70
 8004bc6:	d049      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0x128>
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bcc:	d1e4      	bne.n	8004b98 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bce:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004bd2:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd4:	432b      	orrs	r3, r5
 8004bd6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd8:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bdc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004be0:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be2:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004be4:	6893      	ldr	r3, [r2, #8]
 8004be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bea:	6093      	str	r3, [r2, #8]
      break;
 8004bec:	e7d4      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004bee:	f033 0110 	bics.w	r1, r3, #16
 8004bf2:	d1d1      	bne.n	8004b98 <HAL_TIM_ConfigClockSource+0x64>
 8004bf4:	e7de      	b.n	8004bb4 <HAL_TIM_ConfigClockSource+0x80>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf6:	684c      	ldr	r4, [r1, #4]
 8004bf8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004bfa:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bfc:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004c00:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c02:	6a14      	ldr	r4, [r2, #32]
 8004c04:	f024 0401 	bic.w	r4, r4, #1
 8004c08:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0a:	6993      	ldr	r3, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004c14:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004c16:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004c18:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004c22:	6093      	str	r3, [r2, #8]
}
 8004c24:	e7b8      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8004c26:	2002      	movs	r0, #2
}
 8004c28:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2c:	68cb      	ldr	r3, [r1, #12]
 8004c2e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c30:	f024 0410 	bic.w	r4, r4, #16
 8004c34:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c36:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c38:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c3c:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8004c40:	6a13      	ldr	r3, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004c42:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004c4c:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004c4e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c54:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004c58:	6093      	str	r3, [r2, #8]
}
 8004c5a:	e79d      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c5c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004c60:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c62:	432b      	orrs	r3, r5
 8004c64:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c66:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004c6e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004c70:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004c72:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004c78:	6093      	str	r3, [r2, #8]
      break;
 8004c7a:	e78d      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x64>

08004c7c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004c7c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004c80:	2a01      	cmp	r2, #1
 8004c82:	d049      	beq.n	8004d18 <HAL_TIM_SlaveConfigSynchro+0x9c>
 8004c84:	4603      	mov	r3, r0
{
 8004c86:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8004c8a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004c90:	2001      	movs	r0, #1
 8004c92:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004c96:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004c98:	684d      	ldr	r5, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004c9a:	680e      	ldr	r6, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ca0:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004ca2:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004ca6:	4332      	orrs	r2, r6
  switch (sSlaveConfig->InputTrigger)
 8004ca8:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004caa:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004cac:	d04d      	beq.n	8004d4a <HAL_TIM_SlaveConfigSynchro+0xce>
 8004cae:	d825      	bhi.n	8004cfc <HAL_TIM_SlaveConfigSynchro+0x80>
 8004cb0:	2d40      	cmp	r5, #64	; 0x40
 8004cb2:	d033      	beq.n	8004d1c <HAL_TIM_SlaveConfigSynchro+0xa0>
 8004cb4:	2d50      	cmp	r5, #80	; 0x50
 8004cb6:	d110      	bne.n	8004cda <HAL_TIM_SlaveConfigSynchro+0x5e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb8:	6888      	ldr	r0, [r1, #8]
 8004cba:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8004cbc:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cbe:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004cc2:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc4:	6a20      	ldr	r0, [r4, #32]
 8004cc6:	f020 0001 	bic.w	r0, r0, #1
 8004cca:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ccc:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004cd6:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004cd8:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004cda:	68e2      	ldr	r2, [r4, #12]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce0:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004ce2:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8004ce4:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004ce6:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004ce8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cec:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004cee:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004cf2:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8004cf6:	4608      	mov	r0, r1
}
 8004cf8:	bc70      	pop	{r4, r5, r6}
 8004cfa:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004cfc:	2d70      	cmp	r5, #112	; 0x70
 8004cfe:	d1ec      	bne.n	8004cda <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d00:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004d04:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d06:	432a      	orrs	r2, r5
 8004d08:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d0a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004d12:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004d14:	60a2      	str	r2, [r4, #8]
 8004d16:	e7e0      	b.n	8004cda <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 8004d18:	2002      	movs	r0, #2
}
 8004d1a:	4770      	bx	lr
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d1c:	2e05      	cmp	r6, #5
 8004d1e:	d00d      	beq.n	8004d3c <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 8004d20:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d22:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d24:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d26:	f020 0001 	bic.w	r0, r0, #1
 8004d2a:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004d2c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d32:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004d36:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004d38:	6225      	str	r5, [r4, #32]
      break;
 8004d3a:	e7ce      	b.n	8004cda <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 8004d3c:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8004d3e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d46:	bc70      	pop	{r4, r5, r6}
 8004d48:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d4a:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4c:	690a      	ldr	r2, [r1, #16]
 8004d4e:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d50:	f020 0010 	bic.w	r0, r0, #16
 8004d54:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d56:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d58:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d5c:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8004d60:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004d62:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d68:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004d6c:	6222      	str	r2, [r4, #32]
 8004d6e:	e7b4      	b.n	8004cda <HAL_TIM_SlaveConfigSynchro+0x5e>

08004d70 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d70:	4a34      	ldr	r2, [pc, #208]	; (8004e44 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8004d72:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d74:	4290      	cmp	r0, r2
{
 8004d76:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d78:	d04c      	beq.n	8004e14 <TIM_Base_SetConfig+0xa4>
 8004d7a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004d7e:	d034      	beq.n	8004dea <TIM_Base_SetConfig+0x7a>
 8004d80:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004d84:	4290      	cmp	r0, r2
 8004d86:	d030      	beq.n	8004dea <TIM_Base_SetConfig+0x7a>
 8004d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d8c:	4290      	cmp	r0, r2
 8004d8e:	d02c      	beq.n	8004dea <TIM_Base_SetConfig+0x7a>
 8004d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d94:	4290      	cmp	r0, r2
 8004d96:	d028      	beq.n	8004dea <TIM_Base_SetConfig+0x7a>
 8004d98:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004d9c:	4290      	cmp	r0, r2
 8004d9e:	d039      	beq.n	8004e14 <TIM_Base_SetConfig+0xa4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004da4:	4290      	cmp	r0, r2
 8004da6:	d024      	beq.n	8004df2 <TIM_Base_SetConfig+0x82>
 8004da8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dac:	4290      	cmp	r0, r2
 8004dae:	d020      	beq.n	8004df2 <TIM_Base_SetConfig+0x82>
 8004db0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004db4:	4290      	cmp	r0, r2
 8004db6:	d01c      	beq.n	8004df2 <TIM_Base_SetConfig+0x82>
 8004db8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004dbc:	4290      	cmp	r0, r2
 8004dbe:	d018      	beq.n	8004df2 <TIM_Base_SetConfig+0x82>
 8004dc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dc4:	4290      	cmp	r0, r2
 8004dc6:	d014      	beq.n	8004df2 <TIM_Base_SetConfig+0x82>
 8004dc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dcc:	4290      	cmp	r0, r2
 8004dce:	d010      	beq.n	8004df2 <TIM_Base_SetConfig+0x82>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd2:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dda:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004ddc:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004dde:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de0:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004de2:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004de4:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004de6:	6143      	str	r3, [r0, #20]
}
 8004de8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004dea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004df0:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df2:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df4:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e00:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e02:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004e04:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004e06:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004e08:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e0a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004e0e:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004e10:	6143      	str	r3, [r0, #20]
}
 8004e12:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004e14:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e16:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e1c:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e22:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e24:	694a      	ldr	r2, [r1, #20]
 8004e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e2a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004e2c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e2e:	688b      	ldr	r3, [r1, #8]
 8004e30:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e32:	680b      	ldr	r3, [r1, #0]
 8004e34:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004e36:	690b      	ldr	r3, [r1, #16]
 8004e38:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004e3a:	2301      	movs	r3, #1
}
 8004e3c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004e3e:	6143      	str	r3, [r0, #20]
}
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40010000 	.word	0x40010000

08004e48 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e48:	6a03      	ldr	r3, [r0, #32]
 8004e4a:	f023 0310 	bic.w	r3, r3, #16
 8004e4e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004e50:	6a03      	ldr	r3, [r0, #32]
{
 8004e52:	b430      	push	{r4, r5}
  tmpcr2 =  TIMx->CR2;
 8004e54:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004e56:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e58:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e5a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e62:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004e64:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e6c:	4d0e      	ldr	r5, [pc, #56]	; (8004ea8 <TIM_OC2_SetConfig+0x60>)
 8004e6e:	42a8      	cmp	r0, r5
 8004e70:	d00a      	beq.n	8004e88 <TIM_OC2_SetConfig+0x40>
 8004e72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e76:	42a8      	cmp	r0, r5
 8004e78:	d006      	beq.n	8004e88 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8004e7a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004e7c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004e7e:	6182      	str	r2, [r0, #24]
}
 8004e80:	bc30      	pop	{r4, r5}
  TIMx->CCR2 = OC_Config->Pulse;
 8004e82:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004e84:	6203      	str	r3, [r0, #32]
}
 8004e86:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e88:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e8e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e92:	e9d1 c505 	ldrd	ip, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e96:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e9a:	ea4c 0c05 	orr.w	ip, ip, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ea2:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 8004ea6:	e7e8      	b.n	8004e7a <TIM_OC2_SetConfig+0x32>
 8004ea8:	40010000 	.word	0x40010000

08004eac <TIM_TI1_SetConfig>:
{
 8004eac:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eae:	6a04      	ldr	r4, [r0, #32]
 8004eb0:	f024 0401 	bic.w	r4, r4, #1
 8004eb4:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004eb6:	4c1b      	ldr	r4, [pc, #108]	; (8004f24 <TIM_TI1_SetConfig+0x78>)
  tmpccmr1 = TIMx->CCMR1;
 8004eb8:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8004eba:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ebc:	42a0      	cmp	r0, r4
 8004ebe:	d01d      	beq.n	8004efc <TIM_TI1_SetConfig+0x50>
 8004ec0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004ec4:	d01a      	beq.n	8004efc <TIM_TI1_SetConfig+0x50>
 8004ec6:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8004eca:	42a0      	cmp	r0, r4
 8004ecc:	d016      	beq.n	8004efc <TIM_TI1_SetConfig+0x50>
 8004ece:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ed2:	42a0      	cmp	r0, r4
 8004ed4:	d012      	beq.n	8004efc <TIM_TI1_SetConfig+0x50>
 8004ed6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004eda:	42a0      	cmp	r0, r4
 8004edc:	d00e      	beq.n	8004efc <TIM_TI1_SetConfig+0x50>
 8004ede:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8004ee2:	42a0      	cmp	r0, r4
 8004ee4:	d00a      	beq.n	8004efc <TIM_TI1_SetConfig+0x50>
 8004ee6:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8004eea:	42a0      	cmp	r0, r4
 8004eec:	d006      	beq.n	8004efc <TIM_TI1_SetConfig+0x50>
 8004eee:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004ef2:	42a0      	cmp	r0, r4
 8004ef4:	d002      	beq.n	8004efc <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ef6:	f045 0201 	orr.w	r2, r5, #1
 8004efa:	e003      	b.n	8004f04 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004efc:	f025 0c03 	bic.w	ip, r5, #3
    tmpccmr1 |= TIM_ICSelection;
 8004f00:	ea4c 0202 	orr.w	r2, ip, r2
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f04:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f06:	f026 0c0a 	bic.w	ip, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f0e:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f10:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f14:	4313      	orrs	r3, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f16:	ea41 010c 	orr.w	r1, r1, ip
  TIMx->CCMR1 = tmpccmr1;
 8004f1a:	6183      	str	r3, [r0, #24]
}
 8004f1c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004f1e:	6201      	str	r1, [r0, #32]
}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40010000 	.word	0x40010000

08004f28 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop

08004f2c <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d055      	beq.n	8004fdc <HAL_TIMEx_HallSensor_Init+0xb0>
{
 8004f30:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8004f36:	b088      	sub	sp, #32
 8004f38:	460d      	mov	r5, r1
 8004f3a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d046      	beq.n	8004fd2 <HAL_TIMEx_HallSensor_Init+0xa6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f44:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004f46:	2302      	movs	r3, #2
 8004f48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004f50:	f7ff ff0e 	bl	8004d70 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004f54:	68ab      	ldr	r3, [r5, #8]
 8004f56:	6829      	ldr	r1, [r5, #0]
 8004f58:	6820      	ldr	r0, [r4, #0]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	f7ff ffa6 	bl	8004eac <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f60:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004f62:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f64:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004f66:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f68:	f022 020c 	bic.w	r2, r2, #12
 8004f6c:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004f6e:	6983      	ldr	r3, [r0, #24]
 8004f70:	4333      	orrs	r3, r6
 8004f72:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004f74:	6843      	ldr	r3, [r0, #4]
 8004f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7a:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004f7c:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004f7e:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f84:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004f86:	6883      	ldr	r3, [r0, #8]
 8004f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004f8e:	6883      	ldr	r3, [r0, #8]
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004f96:	6883      	ldr	r3, [r0, #8]
 8004f98:	f043 0304 	orr.w	r3, r3, #4
 8004f9c:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004f9e:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004fa0:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004fa2:	2370      	movs	r3, #112	; 0x70
 8004fa4:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004fa6:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004faa:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004fae:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004fb0:	f7ff ff4a 	bl	8004e48 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fbc:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004fbe:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	2101      	movs	r1, #1
  return HAL_OK;
 8004fc2:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004fc4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004fc8:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004fca:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 8004fce:	b008      	add	sp, #32
 8004fd0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004fd6:	f7ff ffa7 	bl	8004f28 <HAL_TIMEx_HallSensor_MspInit>
 8004fda:	e7b3      	b.n	8004f44 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004fdc:	2001      	movs	r0, #1
}
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d037      	beq.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004fea:	2202      	movs	r2, #2
{
 8004fec:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004fee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004ff2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004ff6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ffc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005000:	4a16      	ldr	r2, [pc, #88]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01a      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d017      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800500c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8005014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005018:	4293      	cmp	r3, r2
 800501a:	d00f      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800501c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8005024:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800502c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8005034:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005038:	4293      	cmp	r3, r2
 800503a:	d104      	bne.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800503c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800503e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005042:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005044:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005046:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005048:	2201      	movs	r2, #1
 800504a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800504e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005052:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005054:	4618      	mov	r0, r3
}
 8005056:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005058:	2002      	movs	r0, #2
}
 800505a:	4770      	bx	lr
 800505c:	40010000 	.word	0x40010000

08005060 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005060:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d022      	beq.n	80050ae <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8005068:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800506a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005072:	4602      	mov	r2, r0
 8005074:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005076:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005078:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800507a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800507e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005084:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005086:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800508c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800508e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005090:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005096:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800509c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800509e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050a0:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80050a2:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80050a4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80050a8:	4608      	mov	r0, r1
}
 80050aa:	bc10      	pop	{r4}
 80050ac:	4770      	bx	lr
  __HAL_LOCK(htim);
 80050ae:	2002      	movs	r0, #2
}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop

080050b4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b4:	2800      	cmp	r0, #0
 80050b6:	f000 80af 	beq.w	8005218 <HAL_UART_Init+0x164>
{
 80050ba:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050bc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80050c0:	4604      	mov	r4, r0
 80050c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 809e 	beq.w	8005208 <HAL_UART_Init+0x154>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050cc:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ce:	68e0      	ldr	r0, [r4, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050d0:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80050d2:	2224      	movs	r2, #36	; 0x24
 80050d4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050de:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e0:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050e2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80050e8:	4301      	orrs	r1, r0
 80050ea:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80050ec:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050ee:	69e0      	ldr	r0, [r4, #28]
 80050f0:	432a      	orrs	r2, r5
 80050f2:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80050f4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050f8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80050fa:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050fe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005100:	430a      	orrs	r2, r1
 8005102:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	69a1      	ldr	r1, [r4, #24]
 8005108:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800510c:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005112:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005114:	4a41      	ldr	r2, [pc, #260]	; (800521c <HAL_UART_Init+0x168>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005116:	d04f      	beq.n	80051b8 <HAL_UART_Init+0x104>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005118:	4293      	cmp	r3, r2
 800511a:	d032      	beq.n	8005182 <HAL_UART_Init+0xce>
 800511c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005120:	4293      	cmp	r3, r2
 8005122:	d02e      	beq.n	8005182 <HAL_UART_Init+0xce>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005124:	f7ff fae4 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	4d3d      	ldr	r5, [pc, #244]	; (8005220 <HAL_UART_Init+0x16c>)
 800512c:	2119      	movs	r1, #25
 800512e:	009a      	lsls	r2, r3, #2
 8005130:	fba0 0101 	umull	r0, r1, r0, r1
 8005134:	0f9b      	lsrs	r3, r3, #30
 8005136:	f7fb f847 	bl	80001c8 <__aeabi_uldivmod>
 800513a:	fba5 3100 	umull	r3, r1, r5, r0
 800513e:	0949      	lsrs	r1, r1, #5
 8005140:	2264      	movs	r2, #100	; 0x64
 8005142:	fb02 0211 	mls	r2, r2, r1, r0
 8005146:	0112      	lsls	r2, r2, #4
 8005148:	3232      	adds	r2, #50	; 0x32
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	fba5 0202 	umull	r0, r2, r5, r2
 8005150:	0109      	lsls	r1, r1, #4
 8005152:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8005156:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800515e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005166:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005168:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800516c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800516e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005172:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005174:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005176:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800517a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 800517e:	4628      	mov	r0, r5
}
 8005180:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005182:	f7ff fac5 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005186:	6863      	ldr	r3, [r4, #4]
 8005188:	2119      	movs	r1, #25
 800518a:	009a      	lsls	r2, r3, #2
 800518c:	fba0 0101 	umull	r0, r1, r0, r1
 8005190:	0f9b      	lsrs	r3, r3, #30
 8005192:	f7fb f819 	bl	80001c8 <__aeabi_uldivmod>
 8005196:	4922      	ldr	r1, [pc, #136]	; (8005220 <HAL_UART_Init+0x16c>)
 8005198:	fba1 3200 	umull	r3, r2, r1, r0
 800519c:	0952      	lsrs	r2, r2, #5
 800519e:	2564      	movs	r5, #100	; 0x64
 80051a0:	fb05 0012 	mls	r0, r5, r2, r0
 80051a4:	0100      	lsls	r0, r0, #4
 80051a6:	3032      	adds	r0, #50	; 0x32
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	fba1 1000 	umull	r1, r0, r1, r0
 80051ae:	0112      	lsls	r2, r2, #4
 80051b0:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 80051b4:	6098      	str	r0, [r3, #8]
 80051b6:	e7cf      	b.n	8005158 <HAL_UART_Init+0xa4>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d02a      	beq.n	8005212 <HAL_UART_Init+0x15e>
 80051bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d026      	beq.n	8005212 <HAL_UART_Init+0x15e>
      pclk = HAL_RCC_GetPCLK1Freq();
 80051c4:	f7ff fa94 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051c8:	6862      	ldr	r2, [r4, #4]
 80051ca:	2119      	movs	r1, #25
 80051cc:	1892      	adds	r2, r2, r2
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	415b      	adcs	r3, r3
 80051d4:	fba0 0101 	umull	r0, r1, r0, r1
 80051d8:	f7fa fff6 	bl	80001c8 <__aeabi_uldivmod>
 80051dc:	4b10      	ldr	r3, [pc, #64]	; (8005220 <HAL_UART_Init+0x16c>)
 80051de:	fba3 2100 	umull	r2, r1, r3, r0
 80051e2:	094d      	lsrs	r5, r1, #5
 80051e4:	2264      	movs	r2, #100	; 0x64
 80051e6:	fb02 0215 	mls	r2, r2, r5, r0
 80051ea:	00d2      	lsls	r2, r2, #3
 80051ec:	3232      	adds	r2, #50	; 0x32
 80051ee:	fba3 3202 	umull	r3, r2, r3, r2
 80051f2:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80051f6:	0912      	lsrs	r2, r2, #4
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80051fe:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005202:	440a      	add	r2, r1
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	e7a7      	b.n	8005158 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8005208:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800520c:	f7fe f89a 	bl	8003344 <HAL_UART_MspInit>
 8005210:	e75c      	b.n	80050cc <HAL_UART_Init+0x18>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005212:	f7ff fa7d 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 8005216:	e7d7      	b.n	80051c8 <HAL_UART_Init+0x114>
    return HAL_ERROR;
 8005218:	2001      	movs	r0, #1
}
 800521a:	4770      	bx	lr
 800521c:	40011000 	.word	0x40011000
 8005220:	51eb851f 	.word	0x51eb851f

08005224 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8005224:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8005226:	8840      	ldrh	r0, [r0, #2]
 8005228:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 800522c:	0c00      	lsrs	r0, r0, #16
 800522e:	4770      	bx	lr

08005230 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(CircleLimitation_Handle_t * pHandle, qd_t Vqd)
{
 8005230:	b570      	push	{r4, r5, r6, lr}
  int32_t vd_square_limit;
  int32_t new_q;
  int32_t new_d;
  qd_t Local_Vqd=Vqd;

  MaxModule = pHandle->MaxModule;
 8005232:	8803      	ldrh	r3, [r0, #0]
 8005234:	140d      	asrs	r5, r1, #16
{
 8005236:	b084      	sub	sp, #16
 8005238:	b20c      	sxth	r4, r1

  square_q = (int32_t)(Vqd.q) * Vqd.q;
  square_d = (int32_t)(Vqd.d) * Vqd.d;
 800523a:	fb05 f205 	mul.w	r2, r5, r5
  square_limit = MaxModule * MaxModule;
 800523e:	fb03 f303 	mul.w	r3, r3, r3
{
 8005242:	9101      	str	r1, [sp, #4]
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
  square_sum = square_q + square_d;
 8005244:	fb04 2104 	mla	r1, r4, r4, r2

  if (square_sum > square_limit)
 8005248:	428b      	cmp	r3, r1
 800524a:	da10      	bge.n	800526e <Circle_Limitation+0x3e>
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
 800524c:	8846      	ldrh	r6, [r0, #2]
 800524e:	fb06 f006 	mul.w	r0, r6, r6
  {
    if(square_d <= vd_square_limit)
 8005252:	4282      	cmp	r2, r0
 8005254:	dd14      	ble.n	8005280 <Circle_Limitation+0x50>
      new_d = Vqd.d;
    }
    else
    {
      new_d = pHandle->MaxVd;
      if(Vqd.d < 0)
 8005256:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
      square_temp = (square_limit - vd_square_limit)/1048576;
      new_q = SqrtTable[square_temp];
#else
      square_temp = square_limit - vd_square_limit;
      new_q = MCM_Sqrt(square_temp);
 8005258:	eba3 0000 	sub.w	r0, r3, r0
        new_d = -new_d;
 800525c:	bfb8      	it	lt
 800525e:	4276      	neglt	r6, r6
      new_q = MCM_Sqrt(square_temp);
 8005260:	f7fc f960 	bl	8001524 <MCM_Sqrt>
#endif
      if(Vqd.q < 0)
 8005264:	2c00      	cmp	r4, #0
      {
        new_q = - new_q;
 8005266:	bfb8      	it	lt
 8005268:	4240      	neglt	r0, r0
      }
    }
    Local_Vqd.q = new_q;
    Local_Vqd.d = new_d;
 800526a:	b235      	sxth	r5, r6
    Local_Vqd.q = new_q;
 800526c:	b204      	sxth	r4, r0
  }
  return(Local_Vqd);
 800526e:	b2a4      	uxth	r4, r4
 8005270:	2000      	movs	r0, #0
 8005272:	f364 000f 	bfi	r0, r4, #0, #16
 8005276:	b2ad      	uxth	r5, r5
 8005278:	f365 401f 	bfi	r0, r5, #16, #16
}
 800527c:	b004      	add	sp, #16
 800527e:	bd70      	pop	{r4, r5, r6, pc}
      new_q = MCM_Sqrt(square_temp);
 8005280:	1a98      	subs	r0, r3, r2
 8005282:	f7fc f94f 	bl	8001524 <MCM_Sqrt>
      if(Vqd.q < 0)
 8005286:	2c00      	cmp	r4, #0
 8005288:	daf0      	bge.n	800526c <Circle_Limitation+0x3c>
        new_q = -new_q;
 800528a:	4240      	negs	r0, r0
 800528c:	e7ee      	b.n	800526c <Circle_Limitation+0x3c>
 800528e:	bf00      	nop

08005290 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8005290:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8005292:	f8b0 c016 	ldrh.w	ip, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 8005296:	7843      	ldrb	r3, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 8005298:	f8b0 e014 	ldrh.w	lr, [r0, #20]

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800529c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800529e:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 80052a2:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80052a6:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 80052aa:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80052ae:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 80052b0:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80052b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80052b6:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 80052ba:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 80052be:	d96d      	bls.n	800539c <HALL_Init+0x10c>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 80052c0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80052c4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80052c8:	f242 7410 	movw	r4, #10000	; 0x2710
 80052cc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80052d0:	fbb4 fcfc 	udiv	ip, r4, ip
 80052d4:	fa1f f48c 	uxth.w	r4, ip
 80052d8:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80052dc:	4c31      	ldr	r4, [pc, #196]	; (80053a4 <HALL_Init+0x114>)
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80052de:	69c5      	ldr	r5, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 80052e0:	f8a0 e0b0 	strh.w	lr, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80052e4:	fb0c f101 	mul.w	r1, ip, r1
 80052e8:	fba4 4101 	umull	r4, r1, r4, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80052ec:	4c2e      	ldr	r4, [pc, #184]	; (80053a8 <HALL_Init+0x118>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80052ee:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80052f2:	0989      	lsrs	r1, r1, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80052f4:	fba4 4202 	umull	r4, r2, r4, r2
 80052f8:	0892      	lsrs	r2, r2, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80052fa:	040c      	lsls	r4, r1, #16
 80052fc:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005300:	eb02 0482 	add.w	r4, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005304:	fbb2 f2fc 	udiv	r2, r2, ip
 8005308:	fb05 f202 	mul.w	r2, r5, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800530c:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
                       / hMaxReliableElSpeedUnit);

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005310:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005314:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005318:	0064      	lsls	r4, r4, #1
                       / hMaxReliableElSpeedUnit);
 800531a:	fbb4 f4fe 	udiv	r4, r4, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800531e:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005322:	fb0c f202 	mul.w	r2, ip, r2
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8005326:	8c84      	ldrh	r4, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005328:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800532c:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800532e:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005330:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8005334:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 8005338:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800533c:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 800533e:	2401      	movs	r4, #1
 8005340:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 8005344:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
 8005348:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 800534a:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800534c:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 800534e:	2100      	movs	r1, #0
 8005350:	4322      	orrs	r2, r4
 8005352:	615a      	str	r2, [r3, #20]
 8005354:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	f042 0204 	orr.w	r2, r2, #4
 800535c:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	f042 0202 	orr.w	r2, r2, #2
 8005364:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	4322      	orrs	r2, r4
 800536a:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 800536c:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 800536e:	6a1a      	ldr	r2, [r3, #32]
 8005370:	4322      	orrs	r2, r4
 8005372:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4322      	orrs	r2, r4
 8005378:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 800537a:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800537e:	b163      	cbz	r3, 800539a <HALL_Init+0x10a>
 8005380:	3b01      	subs	r3, #1
 8005382:	b2d9      	uxtb	r1, r3
 8005384:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8005388:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800538c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005390:	304c      	adds	r0, #76	; 0x4c
 8005392:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8005396:	4298      	cmp	r0, r3
 8005398:	d1fb      	bne.n	8005392 <HALL_Init+0x102>
  }
}
 800539a:	bd30      	pop	{r4, r5, pc}
 800539c:	f04f 0c96 	mov.w	ip, #150	; 0x96
    pHandle->HallTimeout = 150u;
 80053a0:	4664      	mov	r4, ip
 80053a2:	e799      	b.n	80052d8 <HALL_Init+0x48>
 80053a4:	10624dd3 	.word	0x10624dd3
 80053a8:	aaaaaaab 	.word	0xaaaaaaab

080053ac <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80053ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80053ae:	68d1      	ldr	r1, [r2, #12]
 80053b0:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 80053b4:	2300      	movs	r3, #0
{
 80053b6:	b430      	push	{r4, r5}

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 80053b8:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
 80053bc:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 80053be:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 80053c0:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->Direction = POSITIVE;
 80053c4:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->RatioInc = false;
 80053c8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 80053cc:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->FirstCapt = 0u;
 80053d0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 80053d4:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 80053d6:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 80053da:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 80053dc:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 80053e0:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 80053e4:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 80053e8:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 80053ea:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80053ec:	6813      	ldr	r3, [r2, #0]
 80053ee:	430b      	orrs	r3, r1
 80053f0:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80053f2:	68d3      	ldr	r3, [r2, #12]
 80053f4:	f043 0302 	orr.w	r3, r3, #2
 80053f8:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 80053fa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80053fe:	bb0b      	cbnz	r3, 8005444 <HALL_Clear+0x98>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005400:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005402:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8005404:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005406:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005408:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800540a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800540c:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800540e:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8005412:	bf0c      	ite	eq
 8005414:	2401      	moveq	r4, #1
 8005416:	2400      	movne	r4, #0
 8005418:	43ab      	bics	r3, r5
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8005428:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800542a:	bf08      	it	eq
 800542c:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8005430:	1e5a      	subs	r2, r3, #1
 8005432:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8005436:	2a05      	cmp	r2, #5
 8005438:	d85c      	bhi.n	80054f4 <HALL_Clear+0x148>
 800543a:	e8df f002 	tbb	[pc, r2]
 800543e:	3329      	.short	0x3329
 8005440:	1f51473d 	.word	0x1f51473d
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005444:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005446:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005448:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800544a:	6914      	ldr	r4, [r2, #16]
 800544c:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800544e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005450:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005452:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005454:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005456:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005458:	bf0c      	ite	eq
 800545a:	2101      	moveq	r1, #1
 800545c:	2100      	movne	r1, #0
 800545e:	43ab      	bics	r3, r5
 8005460:	bf0c      	ite	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	2300      	movne	r3, #0
 8005466:	43a2      	bics	r2, r4
 8005468:	bf0c      	ite	eq
 800546a:	2201      	moveq	r2, #1
 800546c:	2200      	movne	r2, #0
 800546e:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005470:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005474:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005478:	4313      	orrs	r3, r2
 800547a:	e7d9      	b.n	8005430 <HALL_Clear+0x84>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800547c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800547e:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8005482:	3b3f      	subs	r3, #63	; 0x3f
 8005484:	b21b      	sxth	r3, r3
 8005486:	8083      	strh	r3, [r0, #4]
}
 8005488:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800548a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800548e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005490:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005492:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8005496:	333f      	adds	r3, #63	; 0x3f
 8005498:	b21b      	sxth	r3, r3
}
 800549a:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 800549c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800549e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80054a2:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80054a4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054a6:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80054aa:	3b2a      	subs	r3, #42	; 0x2a
 80054ac:	b21b      	sxth	r3, r3
}
 80054ae:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80054b0:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80054b2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80054b6:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80054b8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054ba:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80054be:	332a      	adds	r3, #42	; 0x2a
 80054c0:	b21b      	sxth	r3, r3
}
 80054c2:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80054c4:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80054c6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80054ca:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80054cc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054ce:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80054d2:	3b15      	subs	r3, #21
 80054d4:	b21b      	sxth	r3, r3
}
 80054d6:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80054d8:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80054da:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80054de:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80054e0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054e2:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80054e6:	3315      	adds	r3, #21
 80054e8:	b21b      	sxth	r3, r3
}
 80054ea:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80054ec:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80054ee:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80054f2:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 80054f4:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80054f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 80054fa:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 80054fe:	e7c3      	b.n	8005488 <HALL_Clear+0xdc>

08005500 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005500:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8005504:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005508:	428a      	cmp	r2, r1
{
 800550a:	4603      	mov	r3, r0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800550c:	8880      	ldrh	r0, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 800550e:	d00e      	beq.n	800552e <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005510:	f8b3 c0aa 	ldrh.w	ip, [r3, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005514:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005518:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800551a:	4408      	add	r0, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800551c:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800551e:	f8b3 c0ac 	ldrh.w	ip, [r3, #172]	; 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005522:	f8a3 10aa 	strh.w	r1, [r3, #170]	; 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005526:	4460      	add	r0, ip
 8005528:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800552a:	8098      	strh	r0, [r3, #4]
}
 800552c:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 800552e:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8005532:	4410      	add	r0, r2
 8005534:	b200      	sxth	r0, r0
 8005536:	8098      	strh	r0, [r3, #4]
}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop

0800553c <HALL_CalcAvrgMecSpeedUnit>:
{
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8005540:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8005544:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8005546:	b180      	cbz	r0, 800556a <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 800554a:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	429a      	cmp	r2, r3
 8005552:	d811      	bhi.n	8005578 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 8005558:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 800555a:	4629      	mov	r1, r5
 800555c:	4620      	mov	r0, r4
 800555e:	f001 fc3b 	bl	8006dd8 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005562:	f9b5 3000 	ldrsh.w	r3, [r5]
 8005566:	81a3      	strh	r3, [r4, #12]
}
 8005568:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800556a:	78e3      	ldrb	r3, [r4, #3]
 800556c:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 800556e:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8005570:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8005572:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005574:	81a3      	strh	r3, [r4, #12]
}
 8005576:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8005578:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 800557c:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 800557e:	b31b      	cbz	r3, 80055c8 <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005580:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005584:	4293      	cmp	r3, r2
 8005586:	d01d      	beq.n	80055c4 <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 8005588:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 800558c:	b9f2      	cbnz	r2, 80055cc <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800558e:	88a2      	ldrh	r2, [r4, #4]
 8005590:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 8005594:	1a89      	subs	r1, r1, r2
 8005596:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8005598:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800559c:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 80055a0:	fb91 f1f2 	sdiv	r1, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80055a4:	8b62      	ldrh	r2, [r4, #26]
 80055a6:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80055ae:	69e1      	ldr	r1, [r4, #28]
 80055b0:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80055b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055b6:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80055b8:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80055bc:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80055c0:	802b      	strh	r3, [r5, #0]
 80055c2:	e7ca      	b.n	800555a <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80055c4:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 80055c8:	802b      	strh	r3, [r5, #0]
 80055ca:	e7c6      	b.n	800555a <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 80055cc:	2100      	movs	r1, #0
 80055ce:	e7e9      	b.n	80055a4 <HALL_CalcAvrgMecSpeedUnit+0x68>

080055d0 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80055d0:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d047      	beq.n	8005668 <HALL_TIMx_CC_IRQHandler+0x98>
{
 80055d8:	b570      	push	{r4, r5, r6, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80055da:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 80055de:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 80055e2:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80055e6:	b333      	cbz	r3, 8005636 <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80055e8:	e9d0 340e 	ldrd	r3, r4, [r0, #56]	; 0x38
 80055ec:	691d      	ldr	r5, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80055ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055f0:	691a      	ldr	r2, [r3, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80055f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80055f4:	691e      	ldr	r6, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80055f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055f8:	4393      	bics	r3, r2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80055fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055fc:	bf0c      	ite	eq
 80055fe:	2201      	moveq	r2, #1
 8005600:	2200      	movne	r2, #0
 8005602:	43b3      	bics	r3, r6
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	43ac      	bics	r4, r5
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 800560c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8005610:	bf0c      	ite	eq
 8005612:	2201      	moveq	r2, #1
 8005614:	2200      	movne	r2, #0
 8005616:	0092      	lsls	r2, r2, #2
 8005618:	f082 0204 	eor.w	r2, r2, #4
 800561c:	4313      	orrs	r3, r2
 800561e:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 8005622:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005624:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 8005626:	2b05      	cmp	r3, #5
 8005628:	f200 8174 	bhi.w	8005914 <HALL_TIMx_CC_IRQHandler+0x344>
 800562c:	e8df f003 	tbb	[pc, r3]
 8005630:	4d5c6e80 	.word	0x4d5c6e80
 8005634:	1e3b      	.short	0x1e3b
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005636:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 800563a:	6912      	ldr	r2, [r2, #16]
 800563c:	4393      	bics	r3, r2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 800563e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005640:	691c      	ldr	r4, [r3, #16]
 8005642:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005644:	bf0c      	ite	eq
 8005646:	2201      	moveq	r2, #1
 8005648:	2200      	movne	r2, #0
 800564a:	43a3      	bics	r3, r4
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005658:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800565a:	6914      	ldr	r4, [r2, #16]
 800565c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800565e:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005660:	bf08      	it	eq
 8005662:	f043 0301 	orreq.w	r3, r3, #1
 8005666:	e7da      	b.n	800561e <HALL_TIMx_CC_IRQHandler+0x4e>
}
 8005668:	2000      	movs	r0, #0
 800566a:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 800566c:	f1bc 0f02 	cmp.w	ip, #2
 8005670:	f000 808b 	beq.w	800578a <HALL_TIMx_CC_IRQHandler+0x1ba>
        else if ( bPrevHallState == STATE_4 )
 8005674:	f1bc 0f04 	cmp.w	ip, #4
 8005678:	f000 80ac 	beq.w	80057d4 <HALL_TIMx_CC_IRQHandler+0x204>
    PrevDirection = pHandle->Direction;
 800567c:	460b      	mov	r3, r1
    if (pHandle->HallMtpa == true)
 800567e:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 8005682:	b112      	cbz	r2, 800568a <HALL_TIMx_CC_IRQHandler+0xba>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8005684:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 8005688:	8082      	strh	r2, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 800568a:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 800568e:	2a00      	cmp	r2, #0
 8005690:	f040 80ac 	bne.w	80057ec <HALL_TIMx_CC_IRQHandler+0x21c>
      pHandle->FirstCapt++;
 8005694:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8005698:	3301      	adds	r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80056a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 80056a2:	2000      	movs	r0, #0
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
        if ( bPrevHallState == STATE_4 )
 80056a6:	f1bc 0f04 	cmp.w	ip, #4
 80056aa:	d078      	beq.n	800579e <HALL_TIMx_CC_IRQHandler+0x1ce>
        else if ( bPrevHallState == STATE_1 )
 80056ac:	f1bc 0f01 	cmp.w	ip, #1
 80056b0:	d1e4      	bne.n	800567c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80056b2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80056b4:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 80056b8:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 80056ba:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80056bc:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80056c0:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80056c4:	f04f 33ff 	mov.w	r3, #4294967295
 80056c8:	e04d      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_6 )
 80056ca:	f1bc 0f06 	cmp.w	ip, #6
 80056ce:	d077      	beq.n	80057c0 <HALL_TIMx_CC_IRQHandler+0x1f0>
        else if ( bPrevHallState == STATE_5 )
 80056d0:	f1bc 0f05 	cmp.w	ip, #5
 80056d4:	d1d2      	bne.n	800567c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 80056d6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80056d8:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80056dc:	22ff      	movs	r2, #255	; 0xff
 80056de:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295
 80056e6:	e03e      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_1 )
 80056e8:	f1bc 0f01 	cmp.w	ip, #1
 80056ec:	d05e      	beq.n	80057ac <HALL_TIMx_CC_IRQHandler+0x1dc>
        else if ( bPrevHallState == STATE_2 )
 80056ee:	f1bc 0f02 	cmp.w	ip, #2
 80056f2:	d1c3      	bne.n	800567c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80056f4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80056f6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80056fa:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 80056fc:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80056fe:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005702:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	e02c      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_3 )
 800570c:	f1bc 0f03 	cmp.w	ip, #3
 8005710:	d031      	beq.n	8005776 <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if ( bPrevHallState == STATE_6 )
 8005712:	f1bc 0f06 	cmp.w	ip, #6
 8005716:	d1b1      	bne.n	800567c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005718:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800571a:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 800571e:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8005720:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005722:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005726:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
 800572e:	e01a      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_5 )
 8005730:	f1bc 0f05 	cmp.w	ip, #5
 8005734:	d00e      	beq.n	8005754 <HALL_TIMx_CC_IRQHandler+0x184>
        else if ( bPrevHallState == STATE_3 )
 8005736:	f1bc 0f03 	cmp.w	ip, #3
 800573a:	d19f      	bne.n	800567c <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800573c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800573e:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8005742:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8005744:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005746:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800574a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800574e:	f04f 33ff 	mov.w	r3, #4294967295
 8005752:	e008      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8005754:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8005756:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 800575a:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800575c:	322a      	adds	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 800575e:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8005762:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    if (pHandle->Direction != PrevDirection)
 8005766:	4299      	cmp	r1, r3
 8005768:	d089      	beq.n	800567e <HALL_TIMx_CC_IRQHandler+0xae>
      pHandle->BufferFilled = 0 ;
 800576a:	2200      	movs	r2, #0
 800576c:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005770:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 8005774:	e783      	b.n	800567e <HALL_TIMx_CC_IRQHandler+0xae>
                                                  + S16_60_PHASE_SHIFT );
 8005776:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8005778:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 800577c:	2301      	movs	r3, #1
                                                  + S16_60_PHASE_SHIFT );
 800577e:	327f      	adds	r2, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8005780:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8005784:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8005788:	e7ed      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800578a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800578c:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 8005790:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005792:	3a55      	subs	r2, #85	; 0x55
          pHandle->Direction = POSITIVE;
 8005794:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005798:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800579c:	e7e3      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 800579e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80057a0:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80057aa:	e7dc      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80057ac:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80057ae:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80057b2:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80057b6:	3355      	adds	r3, #85	; 0x55
 80057b8:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80057bc:	4663      	mov	r3, ip
 80057be:	e7d2      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80057c0:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80057c2:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 80057c6:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80057c8:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 80057ca:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80057ce:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80057d2:	e7c8      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80057d4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80057d6:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 80057da:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 80057dc:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80057de:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80057e2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ea:	e7bc      	b.n	8005766 <HALL_TIMx_CC_IRQHandler+0x196>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80057ec:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80057f0:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 80057f4:	4562      	cmp	r2, ip
 80057f6:	d205      	bcs.n	8005804 <HALL_TIMx_CC_IRQHandler+0x234>
        pHandle->BufferFilled++;
 80057f8:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80057fc:	3201      	adds	r2, #1
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
 8005804:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005806:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005808:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 800580c:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005810:	0412      	lsls	r2, r2, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8005812:	b289      	uxth	r1, r1
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005814:	fa12 f286 	uxtah	r2, r2, r6
      if ( pHandle->OVFCounter != 0u )
 8005818:	f005 0eff 	and.w	lr, r5, #255	; 0xff
 800581c:	2d00      	cmp	r5, #0
 800581e:	d043      	beq.n	80058a8 <HALL_TIMx_CC_IRQHandler+0x2d8>
        hAux = hPrscBuf + 1u;
 8005820:	3101      	adds	r1, #1
        wCaptBuf *= hAux;
 8005822:	b289      	uxth	r1, r1
 8005824:	fb01 f202 	mul.w	r2, r1, r2
        if ( pHandle->RatioInc )
 8005828:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 800582c:	2900      	cmp	r1, #0
 800582e:	d045      	beq.n	80058bc <HALL_TIMx_CC_IRQHandler+0x2ec>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8005830:	2100      	movs	r1, #0
 8005832:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 8005836:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 800583a:	4291      	cmp	r1, r2
 800583c:	d82f      	bhi.n	800589e <HALL_TIMx_CC_IRQHandler+0x2ce>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800583e:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8005842:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005846:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 800584a:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 800584e:	4295      	cmp	r5, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005850:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8005854:	bf88      	it	hi
 8005856:	fb03 f502 	mulhi.w	r5, r3, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800585a:	eba4 0406 	sub.w	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 800585e:	f101 0101 	add.w	r1, r1, #1
 8005862:	b2c9      	uxtb	r1, r1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005864:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8005868:	bf8a      	itet	hi
 800586a:	1964      	addhi	r4, r4, r5
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 800586c:	435d      	mulls	r5, r3
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800586e:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 8005872:	458c      	cmp	ip, r1
 8005874:	f8ce 5050 	str.w	r5, [lr, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 8005878:	bf08      	it	eq
 800587a:	2100      	moveq	r1, #0
 800587c:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 8005880:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8005884:	b331      	cbz	r1, 80058d4 <HALL_TIMx_CC_IRQHandler+0x304>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8005886:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 800588a:	458c      	cmp	ip, r1
 800588c:	d937      	bls.n	80058fe <HALL_TIMx_CC_IRQHandler+0x32e>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 800588e:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 8005892:	fbb1 f2f2 	udiv	r2, r1, r2
 8005896:	fb12 f303 	smulbb	r3, r2, r3
 800589a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 800589e:	2300      	movs	r3, #0
 80058a0:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 80058a4:	2000      	movs	r0, #0
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80058a8:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 80058ac:	b1ad      	cbz	r5, 80058da <HALL_TIMx_CC_IRQHandler+0x30a>
          hAux = hPrscBuf + 2u;
 80058ae:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 80058b0:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 80058b2:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 80058b6:	fb01 f202 	mul.w	r2, r1, r2
          pHandle->RatioDec = false;
 80058ba:	e7bc      	b.n	8005836 <HALL_TIMx_CC_IRQHandler+0x266>
 80058bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 80058be:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 80058c2:	428d      	cmp	r5, r1
 80058c4:	d9b7      	bls.n	8005836 <HALL_TIMx_CC_IRQHandler+0x266>
 80058c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 80058c8:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80058ca:	62a1      	str	r1, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 80058cc:	2101      	movs	r1, #1
 80058ce:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
 80058d2:	e7b0      	b.n	8005836 <HALL_TIMx_CC_IRQHandler+0x266>
            pHandle->AvrElSpeedDpp = 0;
 80058d4:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 80058d8:	e7e1      	b.n	800589e <HALL_TIMx_CC_IRQHandler+0x2ce>
          uint16_t hAux = hPrscBuf + 1u;
 80058da:	3101      	adds	r1, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 80058dc:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 80058de:	b289      	uxth	r1, r1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 80058e0:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 80058e4:	fb01 f202 	mul.w	r2, r1, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 80058e8:	d2a5      	bcs.n	8005836 <HALL_TIMx_CC_IRQHandler+0x266>
  return (uint32_t)(READ_REG(TIMx->PSC));
 80058ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d0a2      	beq.n	8005836 <HALL_TIMx_CC_IRQHandler+0x266>
 80058f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 80058f2:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80058f4:	62a1      	str	r1, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 80058f6:	2101      	movs	r1, #1
 80058f8:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
 80058fc:	e79b      	b.n	8005836 <HALL_TIMx_CC_IRQHandler+0x266>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 80058fe:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8005902:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8005906:	fb92 fcfc 	sdiv	ip, r2, ip
 800590a:	fb93 f3fc 	sdiv	r3, r3, ip
 800590e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8005912:	e7c4      	b.n	800589e <HALL_TIMx_CC_IRQHandler+0x2ce>
        pHandle->SensorIsReliable = false;
 8005914:	2300      	movs	r3, #0
 8005916:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 800591a:	e6af      	b.n	800567c <HALL_TIMx_CC_IRQHandler+0xac>

0800591c <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 800591c:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8005920:	b1e3      	cbz	r3, 800595c <HALL_TIMx_UP_IRQHandler+0x40>
{
 8005922:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 8005924:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005928:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 800592a:	3301      	adds	r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005932:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005934:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 8005938:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 800593c:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005940:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8005944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005948:	fb04 2202 	mla	r2, r4, r2, r2
 800594c:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8005950:	b29b      	uxth	r3, r3
 8005952:	4299      	cmp	r1, r3
 8005954:	d204      	bcs.n	8005960 <HALL_TIMx_UP_IRQHandler+0x44>
}
 8005956:	2000      	movs	r0, #0
 8005958:	bc30      	pop	{r4, r5}
 800595a:	4770      	bx	lr
 800595c:	2000      	movs	r0, #0
 800595e:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005960:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 8005964:	2200      	movs	r2, #0
 8005966:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005968:	bb0b      	cbnz	r3, 80059ae <HALL_TIMx_UP_IRQHandler+0x92>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800596a:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800596c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800596e:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005970:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005972:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005974:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005976:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005978:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 800597c:	bf0c      	ite	eq
 800597e:	2401      	moveq	r4, #1
 8005980:	2400      	movne	r4, #0
 8005982:	43ab      	bics	r3, r5
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8005992:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005994:	bf08      	it	eq
 8005996:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 800599a:	1e5a      	subs	r2, r3, #1
 800599c:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 80059a0:	2a05      	cmp	r2, #5
 80059a2:	d86f      	bhi.n	8005a84 <HALL_TIMx_UP_IRQHandler+0x168>
 80059a4:	e8df f002 	tbb	[pc, r2]
 80059a8:	52596067 	.word	0x52596067
 80059ac:	1f4b      	.short	0x1f4b
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80059ae:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80059b0:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80059b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80059b4:	6914      	ldr	r4, [r2, #16]
 80059b6:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80059b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80059ba:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80059bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059be:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80059c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80059c2:	bf0c      	ite	eq
 80059c4:	2101      	moveq	r1, #1
 80059c6:	2100      	movne	r1, #0
 80059c8:	43ab      	bics	r3, r5
 80059ca:	bf0c      	ite	eq
 80059cc:	2301      	moveq	r3, #1
 80059ce:	2300      	movne	r3, #0
 80059d0:	43a2      	bics	r2, r4
 80059d2:	bf0c      	ite	eq
 80059d4:	2201      	moveq	r2, #1
 80059d6:	2200      	movne	r2, #0
 80059d8:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80059da:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80059de:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80059e2:	4313      	orrs	r3, r2
 80059e4:	e7d9      	b.n	800599a <HALL_TIMx_UP_IRQHandler+0x7e>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80059e6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059e8:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80059ec:	3b3f      	subs	r3, #63	; 0x3f
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80059f2:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80059f6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 80059fa:	2200      	movs	r2, #0
 80059fc:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 8005a00:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005a04:	b17c      	cbz	r4, 8005a26 <HALL_TIMx_UP_IRQHandler+0x10a>
 8005a06:	1e62      	subs	r2, r4, #1
 8005a08:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8005a0a:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8005a0e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8005a12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005a16:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8005a1a:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d1fb      	bne.n	8005a1a <HALL_TIMx_UP_IRQHandler+0xfe>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005a22:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005a2c:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005a30:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8005a34:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8005a38:	bc30      	pop	{r4, r5}
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005a3e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005a40:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8005a44:	3315      	adds	r3, #21
 8005a46:	b21b      	sxth	r3, r3
 8005a48:	8083      	strh	r3, [r0, #4]
      break;
 8005a4a:	e7d2      	b.n	80059f2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005a4c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005a4e:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8005a52:	3b15      	subs	r3, #21
 8005a54:	b21b      	sxth	r3, r3
 8005a56:	8083      	strh	r3, [r0, #4]
      break;
 8005a58:	e7cb      	b.n	80059f2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005a5a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005a5c:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8005a60:	332a      	adds	r3, #42	; 0x2a
 8005a62:	b21b      	sxth	r3, r3
 8005a64:	8083      	strh	r3, [r0, #4]
      break;
 8005a66:	e7c4      	b.n	80059f2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005a68:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005a6a:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8005a6e:	3b2a      	subs	r3, #42	; 0x2a
 8005a70:	b21b      	sxth	r3, r3
 8005a72:	8083      	strh	r3, [r0, #4]
      break;
 8005a74:	e7bd      	b.n	80059f2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005a76:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005a78:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8005a7c:	333f      	adds	r3, #63	; 0x3f
 8005a7e:	b21b      	sxth	r3, r3
 8005a80:	8083      	strh	r3, [r0, #4]
      break;
 8005a82:	e7b6      	b.n	80059f2 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->SensorIsReliable = false;
 8005a84:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005a86:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8005a8a:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 8005a8e:	e7b0      	b.n	80059f2 <HALL_TIMx_UP_IRQHandler+0xd6>

08005a90 <MCP_ReceivedPacket>:
#include "register_interface.h"
#include "mc_config.h"
#include "mcp_config.h"

void MCP_ReceivedPacket(MCP_Handle_t * pHandle)
{
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	4604      	mov	r4, r0
  uint8_t motorID;
  uint8_t MCPResponse;
  uint8_t userCommand=0;
  int16_t txSyncFreeSpace;
  
  if (pHandle->rxLength != 0)
 8005a94:	8980      	ldrh	r0, [r0, #12]
{
 8005a96:	b082      	sub	sp, #8
  if (pHandle->rxLength != 0)
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d05c      	beq.n	8005b56 <MCP_ReceivedPacket+0xc6>
  {
    packetHeader = (uint16_t *) pHandle->rxBuffer;  
 8005a9c:	6865      	ldr	r5, [r4, #4]
    command = *packetHeader & CMD_MASK;
 8005a9e:	882b      	ldrh	r3, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005aa0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
    command = *packetHeader & CMD_MASK;
 8005aa4:	f023 0207 	bic.w	r2, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005aa8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    command = *packetHeader & CMD_MASK;
 8005aac:	b292      	uxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005aae:	d05c      	beq.n	8005b6a <MCP_ReceivedPacket+0xda>
    MCI_Handle_t * pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005ab0:	6821      	ldr	r1, [r4, #0]
    MCI_Handle_t * pMCI = &Mci[motorID];
 8005ab2:	4e5f      	ldr	r6, [pc, #380]	; (8005c30 <MCP_ReceivedPacket+0x1a0>)
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005ab4:	8989      	ldrh	r1, [r1, #12]
    motorID = (*packetHeader & MOTOR_MASK)-1;
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	3b01      	subs	r3, #1
    MCI_Handle_t * pMCI = &Mci[motorID];
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005ac2:	3802      	subs	r0, #2
 8005ac4:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005ac6:	3502      	adds	r5, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005ac8:	3901      	subs	r1, #1
    MCI_Handle_t * pMCI = &Mci[motorID];
 8005aca:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    /* Initialization of the tx length, command which send back data has to set the txLength (case of Read register)*/
    pHandle->txLength = 0;
    
    switch (command) 
 8005ace:	2a60      	cmp	r2, #96	; 0x60
    pHandle->txLength = 0;
 8005ad0:	f04f 0300 	mov.w	r3, #0
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005ad4:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005ad6:	6065      	str	r5, [r4, #4]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005ad8:	b289      	uxth	r1, r1
    pHandle->txLength = 0;
 8005ada:	81e3      	strh	r3, [r4, #14]
    switch (command) 
 8005adc:	d83d      	bhi.n	8005b5a <MCP_ReceivedPacket+0xca>
 8005ade:	2a60      	cmp	r2, #96	; 0x60
 8005ae0:	d832      	bhi.n	8005b48 <MCP_ReceivedPacket+0xb8>
 8005ae2:	e8df f002 	tbb	[pc, r2]
 8005ae6:	3187      	.short	0x3187
 8005ae8:	31313131 	.word	0x31313131
 8005aec:	318f3131 	.word	0x318f3131
 8005af0:	31313131 	.word	0x31313131
 8005af4:	31a03131 	.word	0x31a03131
 8005af8:	31313131 	.word	0x31313131
 8005afc:	315d3131 	.word	0x315d3131
 8005b00:	31313131 	.word	0x31313131
 8005b04:	31573131 	.word	0x31573131
 8005b08:	31313131 	.word	0x31313131
 8005b0c:	317c3131 	.word	0x317c3131
 8005b10:	31313131 	.word	0x31313131
 8005b14:	31533131 	.word	0x31533131
 8005b18:	31313131 	.word	0x31313131
 8005b1c:	31763131 	.word	0x31763131
 8005b20:	31313131 	.word	0x31313131
 8005b24:	31943131 	.word	0x31943131
 8005b28:	31313131 	.word	0x31313131
 8005b2c:	319a3131 	.word	0x319a3131
 8005b30:	31313131 	.word	0x31313131
 8005b34:	313f3131 	.word	0x313f3131
 8005b38:	31313131 	.word	0x31313131
 8005b3c:	313f3131 	.word	0x313f3131
 8005b40:	31313131 	.word	0x31313131
 8005b44:	3131      	.short	0x3131
 8005b46:	3f          	.byte	0x3f
 8005b47:	00          	.byte	0x00
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2002      	movs	r0, #2
    	  }
        break;
      default :
        MCPResponse = MCP_CMD_UNKNOWN;
      }
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b4c:	68a2      	ldr	r2, [r4, #8]
 8005b4e:	54d0      	strb	r0, [r2, r3]
      pHandle->txLength++;
 8005b50:	89e3      	ldrh	r3, [r4, #14]
 8005b52:	3301      	adds	r3, #1
 8005b54:	81e3      	strh	r3, [r4, #14]
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
    /* Nothing to do, txBuffer and txLength have not been modified */
  } 
}
 8005b56:	b002      	add	sp, #8
 8005b58:	bd70      	pop	{r4, r5, r6, pc}
    switch (command) 
 8005b5a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005b5e:	bf18      	it	ne
 8005b60:	2002      	movne	r0, #2
 8005b62:	d1f3      	bne.n	8005b4c <MCP_ReceivedPacket+0xbc>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005b64:	b20a      	sxth	r2, r1
  uint8_t userCommand=0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e026      	b.n	8005bb8 <MCP_ReceivedPacket+0x128>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005b6a:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005b6c:	3802      	subs	r0, #2
        userCommand = (command >> 3) & 0x1f;
 8005b6e:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005b72:	8999      	ldrh	r1, [r3, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005b74:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005b76:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 8005b78:	2300      	movs	r3, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005b7a:	f012 0f1e 	tst.w	r2, #30
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005b7e:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005b80:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 8005b82:	81e3      	strh	r3, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005b84:	d014      	beq.n	8005bb0 <MCP_ReceivedPacket+0x120>
        MCPResponse = MCP_CMD_OK;
 8005b86:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8005b88:	200d      	movs	r0, #13
 8005b8a:	e7df      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
          if (MCI_GetSTMState(pMCI) == IDLE)
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f7fb fb6d 	bl	800126c <MCI_GetSTMState>
 8005b92:	b128      	cbz	r0, 8005ba0 <MCP_ReceivedPacket+0x110>
            MCI_StopMotor(pMCI);
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7fb fb21 	bl	80011dc <MCI_StopMotor>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005b9a:	89e3      	ldrh	r3, [r4, #14]
            MCPResponse = MCP_CMD_OK;
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	e7d5      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
            MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7fb fb11 	bl	80011c8 <MCI_StartMotor>
 8005ba6:	f080 0001 	eor.w	r0, r0, #1
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005baa:	89e3      	ldrh	r3, [r4, #14]
            MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005bac:	b2c0      	uxtb	r0, r0
 8005bae:	e7cd      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005bb0:	3901      	subs	r1, #1
        userCommand = (command >> 3) & 0x1f;
 8005bb2:	f002 031f 	and.w	r3, r2, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005bb6:	b20a      	sxth	r2, r1
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005bb8:	491e      	ldr	r1, [pc, #120]	; (8005c34 <MCP_ReceivedPacket+0x1a4>)
 8005bba:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8005bbe:	2e00      	cmp	r6, #0
 8005bc0:	d0e1      	beq.n	8005b86 <MCP_ReceivedPacket+0xf6>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8005bc2:	68a3      	ldr	r3, [r4, #8]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	f104 030e 	add.w	r3, r4, #14
 8005bcc:	47b0      	blx	r6
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005bce:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8005bd0:	e7bc      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
          MCI_FaultAcknowledged(pMCI);
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7fb fb06 	bl	80011e4 <MCI_FaultAcknowledged>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005bd8:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8005bda:	2000      	movs	r0, #0
        break;
 8005bdc:	e7b6      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
          if (MCI_GetSTMState(pMCI) == RUN)
 8005bde:	4630      	mov	r0, r6
 8005be0:	f7fb fb44 	bl	800126c <MCI_GetSTMState>
 8005be4:	2806      	cmp	r0, #6
 8005be6:	d1d8      	bne.n	8005b9a <MCP_ReceivedPacket+0x10a>
            MCI_StopRamp(pMCI);
 8005be8:	4630      	mov	r0, r6
 8005bea:	f7fb fb4f 	bl	800128c <MCI_StopRamp>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005bee:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	e7ab      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005bf4:	68a3      	ldr	r3, [r4, #8]
    	pHandle->txLength = 4;
 8005bf6:	2104      	movs	r1, #4
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005bf8:	2201      	movs	r2, #1
    	pHandle->txLength = 4;
 8005bfa:	81e1      	strh	r1, [r4, #14]
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005bfc:	701a      	strb	r2, [r3, #0]
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005bfe:	89e3      	ldrh	r3, [r4, #14]
    	MCPResponse = MCP_CMD_OK;
 8005c00:	2000      	movs	r0, #0
      break;
 8005c02:	e7a3      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
        MCPResponse = RI_SetRegCommandParser (pHandle,txSyncFreeSpace); 
 8005c04:	4620      	mov	r0, r4
 8005c06:	f7fc f9e5 	bl	8001fd4 <RI_SetRegCommandParser>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005c0a:	89e3      	ldrh	r3, [r4, #14]
      break;
 8005c0c:	e79e      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
        MCI_EncoderAlign(pMCI);
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f7fb faec 	bl	80011ec <MCI_EncoderAlign>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005c14:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005c16:	2000      	movs	r0, #0
        break;
 8005c18:	e798      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
        MCI_Clear_Iqdref(pMCI);
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f7fb fb9e 	bl	800135c <MCI_Clear_Iqdref>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005c20:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005c22:	2000      	movs	r0, #0
        break;
 8005c24:	e792      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
        MCPResponse = RI_GetRegCommandParser (pHandle,txSyncFreeSpace); 
 8005c26:	4620      	mov	r0, r4
 8005c28:	f7fc fce6 	bl	80025f8 <RI_GetRegCommandParser>
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005c2c:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005c2e:	e78d      	b.n	8005b4c <MCP_ReceivedPacket+0xbc>
 8005c30:	200007d0 	.word	0x200007d0
 8005c34:	20001a60 	.word	0x20001a60

08005c38 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog (MCPA_Handle_t *pHandle)
{
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005c3a:	7fc3      	ldrb	r3, [r0, #31]
 8005c3c:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8005c40:	429a      	cmp	r2, r3
{
 8005c42:	4604      	mov	r4, r0
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005c44:	d002      	beq.n	8005c4c <MCPA_dataLog+0x14>
    }     
  }
  else 
  {
    /* nothing to log just waiting next call to MCPA_datalog*/
    pHandle->HFIndex++;
 8005c46:	3301      	adds	r3, #1
 8005c48:	77c3      	strb	r3, [r0, #31]
  }
}  
 8005c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pHandle->bufferIndex == 0)
 8005c4c:	8b05      	ldrh	r5, [r0, #24]
    pHandle->HFIndex = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	77c3      	strb	r3, [r0, #31]
    if (pHandle->bufferIndex == 0)
 8005c52:	b1a5      	cbz	r5, 8005c7e <MCPA_dataLog+0x46>
 8005c54:	6961      	ldr	r1, [r4, #20]
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8005c56:	8ba2      	ldrh	r2, [r4, #28]
 8005c58:	42aa      	cmp	r2, r5
 8005c5a:	d24e      	bcs.n	8005cfa <MCPA_dataLog+0xc2>
 8005c5c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->MFRateBuff == 254) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8005c60:	2bfe      	cmp	r3, #254	; 0xfe
 8005c62:	d066      	beq.n	8005d32 <MCPA_dataLog+0xfa>
       *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005c64:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005c68:	534b      	strh	r3, [r1, r5]
       pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8005c6a:	8b22      	ldrh	r2, [r4, #24]
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	3202      	adds	r2, #2
 8005c70:	2309      	movs	r3, #9
 8005c72:	6845      	ldr	r5, [r0, #4]
 8005c74:	b292      	uxth	r2, r2
 8005c76:	47a8      	blx	r5
       pHandle->bufferIndex = 0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	8323      	strh	r3, [r4, #24]
}  
 8005c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer, (void **) &pHandle->currentBuffer, MCTL_ASYNC))
 8005c7e:	4601      	mov	r1, r0
 8005c80:	2209      	movs	r2, #9
 8005c82:	f851 0b14 	ldr.w	r0, [r1], #20
 8005c86:	6803      	ldr	r3, [r0, #0]
 8005c88:	4798      	blx	r3
 8005c8a:	b390      	cbz	r0, 8005cf2 <MCPA_dataLog+0xba>
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8005c8c:	4b4b      	ldr	r3, [pc, #300]	; (8005dbc <MCPA_dataLog+0x184>)
 8005c8e:	6961      	ldr	r1, [r4, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	600b      	str	r3, [r1, #0]
        if (pHandle->Mark != pHandle->MarkBuff)
 8005c94:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8005c98:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
        pHandle->MFIndex = 0; /* Restart the motif from scratch at each buffer*/
 8005c9c:	f884 5020 	strb.w	r5, [r4, #32]
        pHandle->bufferIndex = 4; 
 8005ca0:	2304      	movs	r3, #4
        if (pHandle->Mark != pHandle->MarkBuff)
 8005ca2:	4290      	cmp	r0, r2
        pHandle->bufferIndex = 4; 
 8005ca4:	8323      	strh	r3, [r4, #24]
        if (pHandle->Mark != pHandle->MarkBuff)
 8005ca6:	d101      	bne.n	8005cac <MCPA_dataLog+0x74>
 8005ca8:	461d      	mov	r5, r3
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8005caa:	e7d4      	b.n	8005c56 <MCPA_dataLog+0x1e>
          pHandle->HFNumBuff = pHandle->HFNum;
 8005cac:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
          pHandle->MFNumBuff = pHandle->MFNum;
 8005cb0:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
          pHandle->HFRateBuff = pHandle->HFRate;
 8005cb4:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
          pHandle->MarkBuff = pHandle->Mark;
 8005cb8:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
          pHandle->HFNumBuff = pHandle->HFNum;
 8005cbc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8005cc0:	185a      	adds	r2, r3, r1
          pHandle->MFNumBuff = pHandle->MFNum;
 8005cc2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005cc6:	8b63      	ldrh	r3, [r4, #26]
          pHandle->MFRateBuff = pHandle->MFRate;
 8005cc8:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
          pHandle->HFRateBuff = pHandle->HFRate;
 8005ccc:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8005cd0:	0092      	lsls	r2, r2, #2
          pHandle->MFRateBuff = pHandle->MFRate;
 8005cd2:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005cd6:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8005cd8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8005cdc:	f001 fad3 	bl	8007286 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8005ce0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8005ce4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8005ce8:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8005cec:	441a      	add	r2, r3
 8005cee:	f001 faca 	bl	8007286 <memcpy>
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8005cf2:	8b25      	ldrh	r5, [r4, #24]
 8005cf4:	2d00      	cmp	r5, #0
 8005cf6:	d1ad      	bne.n	8005c54 <MCPA_dataLog+0x1c>
}  
 8005cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (i=0; i<pHandle->HFNumBuff; i++)
 8005cfa:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
      logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005cfe:	194b      	adds	r3, r1, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8005d00:	b36e      	cbz	r6, 8005d5e <MCPA_dataLog+0x126>
 8005d02:	68a2      	ldr	r2, [r4, #8]
 8005d04:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8005d08:	3a04      	subs	r2, #4
        *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]);
 8005d0a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8005d0e:	8800      	ldrh	r0, [r0, #0]
 8005d10:	f823 0b02 	strh.w	r0, [r3], #2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8005d14:	8b25      	ldrh	r5, [r4, #24]
 8005d16:	3502      	adds	r5, #2
 8005d18:	b2ad      	uxth	r5, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8005d1a:	4563      	cmp	r3, ip
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8005d1c:	8325      	strh	r5, [r4, #24]
      for (i=0; i<pHandle->HFNumBuff; i++)
 8005d1e:	d1f4      	bne.n	8005d0a <MCPA_dataLog+0xd2>
      if (pHandle->MFRateBuff < 254) 
 8005d20:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005d24:	8ba2      	ldrh	r2, [r4, #28]
      if (pHandle->MFRateBuff < 254) 
 8005d26:	2bfd      	cmp	r3, #253	; 0xfd
 8005d28:	4618      	mov	r0, r3
 8005d2a:	d91d      	bls.n	8005d68 <MCPA_dataLog+0x130>
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005d2c:	4295      	cmp	r5, r2
 8005d2e:	d897      	bhi.n	8005c60 <MCPA_dataLog+0x28>
}  
 8005d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d32:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005d36:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8005d3a:	4418      	add	r0, r3
 8005d3c:	4298      	cmp	r0, r3
 8005d3e:	dd91      	ble.n	8005c64 <MCPA_dataLog+0x2c>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005d40:	68a7      	ldr	r7, [r4, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d42:	6926      	ldr	r6, [r4, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005d44:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	514a      	str	r2, [r1, r5]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d4c:	1c5a      	adds	r2, r3, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d4e:	5cf3      	ldrb	r3, [r6, r3]
 8005d50:	441d      	add	r5, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d52:	b2d3      	uxtb	r3, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d54:	b2ad      	uxth	r5, r5
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d56:	4283      	cmp	r3, r0
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d58:	8325      	strh	r5, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d5a:	dbf3      	blt.n	8005d44 <MCPA_dataLog+0x10c>
 8005d5c:	e782      	b.n	8005c64 <MCPA_dataLog+0x2c>
      if (pHandle->MFRateBuff < 254) 
 8005d5e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8005d62:	28fd      	cmp	r0, #253	; 0xfd
 8005d64:	f63f af71 	bhi.w	8005c4a <MCPA_dataLog+0x12>
        if (pHandle->MFIndex == pHandle->MFRateBuff)  
 8005d68:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005d6c:	4283      	cmp	r3, r0
 8005d6e:	d007      	beq.n	8005d80 <MCPA_dataLog+0x148>
          pHandle->MFIndex ++;
 8005d70:	3301      	adds	r3, #1
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005d72:	8b25      	ldrh	r5, [r4, #24]
          pHandle->MFIndex ++;
 8005d74:	f884 3020 	strb.w	r3, [r4, #32]
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005d78:	42aa      	cmp	r2, r5
 8005d7a:	f4ff af73 	bcc.w	8005c64 <MCPA_dataLog+0x2c>
}  
 8005d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d80:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8005d84:	4437      	add	r7, r6
          pHandle->MFIndex = 0;
 8005d86:	2300      	movs	r3, #0
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d88:	42b7      	cmp	r7, r6
          pHandle->MFIndex = 0;
 8005d8a:	f884 3020 	strb.w	r3, [r4, #32]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005d8e:	dd12      	ble.n	8005db6 <MCPA_dataLog+0x17e>
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005d90:	f8d4 e008 	ldr.w	lr, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005d94:	f8d4 c010 	ldr.w	ip, [r4, #16]
            logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005d98:	8b25      	ldrh	r5, [r4, #24]
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005d9a:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	514b      	str	r3, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005da2:	f81c 3006 	ldrb.w	r3, [ip, r6]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005da6:	1c70      	adds	r0, r6, #1
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005da8:	441d      	add	r5, r3
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005daa:	b2c6      	uxtb	r6, r0
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005dac:	b2ad      	uxth	r5, r5
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005dae:	42be      	cmp	r6, r7
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005db0:	8325      	strh	r5, [r4, #24]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005db2:	dbf2      	blt.n	8005d9a <MCPA_dataLog+0x162>
 8005db4:	e7e0      	b.n	8005d78 <MCPA_dataLog+0x140>
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005db6:	8b25      	ldrh	r5, [r4, #24]
 8005db8:	e7de      	b.n	8005d78 <MCPA_dataLog+0x140>
 8005dba:	bf00      	nop
 8005dbc:	20001b14 	.word	0x20001b14

08005dc0 <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8005dc0:	8b03      	ldrh	r3, [r0, #24]
 8005dc2:	b19b      	cbz	r3, 8005dec <MCPA_flushDataLog+0x2c>
{
 8005dc4:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8005dc6:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8005dca:	2afe      	cmp	r2, #254	; 0xfe
 8005dcc:	4604      	mov	r4, r0
 8005dce:	d00e      	beq.n	8005dee <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005dd0:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005dd2:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005dd6:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8005dd8:	8b22      	ldrh	r2, [r4, #24]
 8005dda:	6820      	ldr	r0, [r4, #0]
 8005ddc:	3202      	adds	r2, #2
 8005dde:	2309      	movs	r3, #9
 8005de0:	6845      	ldr	r5, [r0, #4]
 8005de2:	b292      	uxth	r2, r2
 8005de4:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	8323      	strh	r3, [r4, #24]
  }   
}
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005dee:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8005df2:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005df6:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005df8:	4494      	add	ip, r2
 8005dfa:	4562      	cmp	r2, ip
 8005dfc:	dae9      	bge.n	8005dd2 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005dfe:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e00:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005e02:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8005e06:	6800      	ldr	r0, [r0, #0]
 8005e08:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e0a:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e0c:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e0e:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e10:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e12:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e14:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e16:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e18:	dbf3      	blt.n	8005e02 <MCPA_flushDataLog+0x42>
 8005e1a:	e7da      	b.n	8005dd2 <MCPA_flushDataLog+0x12>

08005e1c <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}
  
uint8_t MCPA_cfgLog (MCPA_Handle_t *pHandle, uint8_t * cfgdata)
{
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t newID, buffSize;
  uint8_t i;
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
  uint8_t result = MCP_CMD_OK;
  
  buffSize = *((uint16_t *) cfgdata);
 8005e20:	880f      	ldrh	r7, [r1, #0]
{
 8005e22:	4604      	mov	r4, r0
  if (buffSize == 0)
 8005e24:	2f00      	cmp	r7, #0
 8005e26:	d044      	beq.n	8005eb2 <MCPA_cfgLog+0x96>
  { 
    /* Switch Off condition */
    MCPA_stopDataLog(pHandle);
  }
  else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8005e28:	6803      	ldr	r3, [r0, #0]
 8005e2a:	89db      	ldrh	r3, [r3, #14]
 8005e2c:	42bb      	cmp	r3, r7
 8005e2e:	d33d      	bcc.n	8005eac <MCPA_cfgLog+0x90>
  {
    result = MCP_ERROR_NO_TXASYNC_SPACE;
  }  
  else
  {
     pHandle->HFRate = *((uint8_t *) &cfgdata[2]);
 8005e30:	788b      	ldrb	r3, [r1, #2]
 8005e32:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     pHandle->HFNum  = *((uint8_t *) &cfgdata[3]);
 8005e36:	78ca      	ldrb	r2, [r1, #3]
 8005e38:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
     pHandle->MFRate = *((uint8_t *) &cfgdata[4]);
 8005e3c:	790b      	ldrb	r3, [r1, #4]
 8005e3e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8005e42:	794e      	ldrb	r6, [r1, #5]
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8005e44:	7f83      	ldrb	r3, [r0, #30]
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8005e46:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8005e4a:	4416      	add	r6, r2
 8005e4c:	429e      	cmp	r6, r3
 8005e4e:	dc52      	bgt.n	8005ef6 <MCPA_cfgLog+0xda>
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
 8005e50:	3106      	adds	r1, #6
     {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005e52:	2e00      	cmp	r6, #0
 8005e54:	d056      	beq.n	8005f04 <MCPA_cfgLog+0xe8>
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
 8005e56:	2600      	movs	r6, #0
 8005e58:	4688      	mov	r8, r1
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005e5a:	4635      	mov	r5, r6
 8005e5c:	e011      	b.n	8005e82 <MCPA_cfgLog+0x66>
       {
         newID = *((uint16_t *) cfgdata);
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	5558      	strb	r0, [r3, r5]
         logSize = logSize+pHandle->dataSizeTable[i];
 8005e62:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005e64:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005e68:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 8005e6c:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005e6e:	f105 0c01 	add.w	ip, r5, #1
 8005e72:	fa5f f58c 	uxtb.w	r5, ip
 8005e76:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 8005e78:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005e7a:	429d      	cmp	r5, r3
         cfgdata = cfgdata+2; /* Point to the next UID */
 8005e7c:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 8005e7e:	b2d6      	uxtb	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005e80:	da11      	bge.n	8005ea6 <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) cfgdata);
 8005e82:	f838 9b02 	ldrh.w	r9, [r8], #2
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8005e86:	6861      	ldr	r1, [r4, #4]
 8005e88:	4648      	mov	r0, r9
 8005e8a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8005e8e:	f7fc ff37 	bl	8002d00 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8005e92:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005e96:	42ab      	cmp	r3, r5
 8005e98:	f04f 0002 	mov.w	r0, #2
 8005e9c:	d8df      	bhi.n	8005e5e <MCPA_cfgLog+0x42>
 8005e9e:	4648      	mov	r0, r9
 8005ea0:	f7fc ff22 	bl	8002ce8 <RI_GetIDSize>
 8005ea4:	e7db      	b.n	8005e5e <MCPA_cfgLog+0x42>
       }
       if (buffSize < (logSize+2+4) ) /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
 8005ea6:	1d73      	adds	r3, r6, #5
 8005ea8:	429f      	cmp	r7, r3
 8005eaa:	dc1a      	bgt.n	8005ee2 <MCPA_cfgLog+0xc6>
    result = MCP_ERROR_NO_TXASYNC_SPACE;
 8005eac:	2009      	movs	r0, #9
     {
       result = MCP_ERROR_BAD_RAW_FORMAT;
     }
  }
  return result;
}
 8005eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005eb2:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8005eb4:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005eb8:	b153      	cbz	r3, 8005ed0 <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005eba:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005ebc:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005ec0:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8005ec2:	8b22      	ldrh	r2, [r4, #24]
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	3202      	adds	r2, #2
 8005ec8:	6845      	ldr	r5, [r0, #4]
 8005eca:	b292      	uxth	r2, r2
 8005ecc:	2309      	movs	r3, #9
 8005ece:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8005ed0:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8005ed2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8005ed6:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8005ed8:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8005edc:	8320      	strh	r0, [r4, #24]
}
 8005ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
         pHandle->bufferTxTrigger = buffSize-logSize-2; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8005ee2:	1eba      	subs	r2, r7, #2
 8005ee4:	1b92      	subs	r2, r2, r6
 8005ee6:	8362      	strh	r2, [r4, #26]
         pHandle->Mark =   *((uint8_t *) cfgdata);
 8005ee8:	780b      	ldrb	r3, [r1, #0]
 8005eea:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
         if (pHandle->Mark == 0)
 8005eee:	b12b      	cbz	r3, 8005efc <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8005ef0:	2000      	movs	r0, #0
}
 8005ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8005ef6:	200a      	movs	r0, #10
}
 8005ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005efc:	8b23      	ldrh	r3, [r4, #24]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0e6      	beq.n	8005ed0 <MCPA_cfgLog+0xb4>
 8005f02:	e7da      	b.n	8005eba <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005f04:	2305      	movs	r3, #5
 8005f06:	e7cf      	b.n	8005ea8 <MCPA_cfgLog+0x8c>

08005f08 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8005f08:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8005f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8005f0e:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8005f10:	2100      	movs	r1, #0
 8005f12:	f001 f9c6 	bl	80072a2 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8005f16:	2300      	movs	r3, #0
 8005f18:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	bf00      	nop

08005f20 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005f20:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8005f24:	1c53      	adds	r3, r2, #1
 8005f26:	b29b      	uxth	r3, r3
{
 8005f28:	b510      	push	{r4, lr}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8005f2a:	2b7f      	cmp	r3, #127	; 0x7f
{
 8005f2c:	4604      	mov	r4, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8005f2e:	bf88      	it	hi
 8005f30:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005f32:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
{
 8005f36:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8005f38:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8005f3c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005f40:	f104 0efe 	add.w	lr, r4, #254	; 0xfe
 8005f44:	1ea3      	subs	r3, r4, #2
  int32_t wAux = 0;
 8005f46:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005f48:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005f4c:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005f4e:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005f50:	d1fa      	bne.n	8005f48 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	bfb8      	it	lt
 8005f56:	327f      	addlt	r2, #127	; 0x7f
 8005f58:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8005f5a:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8005f5e:	bd10      	pop	{r4, pc}

08005f60 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8005f60:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8005f68:	8a03      	ldrh	r3, [r0, #16]
 8005f6a:	8b42      	ldrh	r2, [r0, #26]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d306      	bcc.n	8005f7e <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8005f70:	8b82      	ldrh	r2, [r0, #28]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d901      	bls.n	8005f7a <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8005f76:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8005f78:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8005f7a:	8ac0      	ldrh	r0, [r0, #22]
 8005f7c:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8005f7e:	2008      	movs	r0, #8
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop

08005f84 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8005f84:	2300      	movs	r3, #0
 8005f86:	8203      	strh	r3, [r0, #16]
}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop

08005f8c <NTC_Init>:
{
 8005f8c:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005f8e:	7803      	ldrb	r3, [r0, #0]
{
 8005f90:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005f92:	b123      	cbz	r3, 8005f9e <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005f94:	8a43      	ldrh	r3, [r0, #18]
 8005f96:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8005f98:	2200      	movs	r2, #0
 8005f9a:	82c2      	strh	r2, [r0, #22]
}
 8005f9c:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005f9e:	3004      	adds	r0, #4
 8005fa0:	f7fc ff78 	bl	8002e94 <RCM_RegisterRegConv>
 8005fa4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7ff ffeb 	bl	8005f84 <NTC_Clear>
}
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8005fb0:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005fb2:	7803      	ldrb	r3, [r0, #0]
{
 8005fb4:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005fb6:	b113      	cbz	r3, 8005fbe <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8005fb8:	2000      	movs	r0, #0
 8005fba:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8005fbc:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005fbe:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005fc2:	f7fd f843 	bl	800304c <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8005fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fca:	4298      	cmp	r0, r3
 8005fcc:	d007      	beq.n	8005fde <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005fce:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8005fd0:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005fd2:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8005fd4:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8005fd8:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8005fdc:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7ff ffc2 	bl	8005f68 <NTC_SetFaultState>
 8005fe4:	82e0      	strh	r0, [r4, #22]
}
 8005fe6:	bd10      	pop	{r4, pc}

08005fe8 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005fe8:	7803      	ldrb	r3, [r0, #0]
 8005fea:	b983      	cbnz	r3, 800600e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8005fec:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005fee:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8005ff0:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005ff4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005ff6:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bfbc      	itt	lt
 8006000:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8006004:	33ff      	addlt	r3, #255	; 0xff
 8006006:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 800600a:	b200      	sxth	r0, r0
 800600c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 800600e:	8a80      	ldrh	r0, [r0, #20]
}
 8006010:	b200      	sxth	r0, r0
 8006012:	4770      	bx	lr

08006014 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006014:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006016:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006018:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800601a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800601c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800601e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006020:	6283      	str	r3, [r0, #40]	; 0x28
}
 8006022:	4770      	bx	lr

08006024 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006024:	8081      	strh	r1, [r0, #4]
}
 8006026:	4770      	bx	lr

08006028 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8006028:	80c1      	strh	r1, [r0, #6]
}
 800602a:	4770      	bx	lr

0800602c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 800602c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop

08006034 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006034:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop

0800603c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 800603c:	6081      	str	r1, [r0, #8]

  return;
}
 800603e:	4770      	bx	lr

08006040 <PID_GetKPDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKpDivisorPOW2: Kp divisor expressed as power of 2
 */
__weak uint16_t PID_GetKPDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
 8006040:	b100      	cbz	r0, 8006044 <PID_GetKPDivisorPOW2+0x4>
 8006042:	8b80      	ldrh	r0, [r0, #28]
}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop

08006048 <PID_SetKPDivisorPOW2>:
 * @retval None
 */
__weak void PID_SetKPDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKpDivisorPOW2 )
{
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8006048:	2301      	movs	r3, #1
 800604a:	408b      	lsls	r3, r1
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 800604c:	8381      	strh	r1, [r0, #28]
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 800604e:	8303      	strh	r3, [r0, #24]
}
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop

08006054 <PID_GetKIDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKiDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKIDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
 8006054:	b100      	cbz	r0, 8006058 <PID_GetKIDivisorPOW2+0x4>
 8006056:	8bc0      	ldrh	r0, [r0, #30]
}
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop

0800605c <PID_SetLowerIntegralTermLimit>:
 * @param  wLowerLimit: new lower integral term limit value
 * @retval None
 */
__weak void PID_SetLowerIntegralTermLimit( PID_Handle_t * pHandle, int32_t wLowerLimit )
{
  pHandle->wLowerIntegralLimit = wLowerLimit;
 800605c:	6101      	str	r1, [r0, #16]
}
 800605e:	4770      	bx	lr

08006060 <PID_SetUpperIntegralTermLimit>:
 * @param  wUpperLimit: new upper integral term limit value
 * @retval None
 */
__weak void PID_SetUpperIntegralTermLimit( PID_Handle_t * pHandle, int32_t wUpperLimit )
{
  pHandle->wUpperIntegralLimit = wUpperLimit;
 8006060:	60c1      	str	r1, [r0, #12]
}
 8006062:	4770      	bx	lr

08006064 <PID_SetKIDivisorPOW2>:
{
 8006064:	b538      	push	{r3, r4, r5, lr}
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8006066:	2301      	movs	r3, #1
{
 8006068:	460c      	mov	r4, r1
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 800606a:	408b      	lsls	r3, r1
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 800606c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006070:	40a1      	lsls	r1, r4
  pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8006072:	83c4      	strh	r4, [r0, #30]
  pHandle->hKiDivisor = ( uint16_t )( wKiDiv );
 8006074:	8343      	strh	r3, [r0, #26]
{
 8006076:	4605      	mov	r5, r0
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8006078:	f7ff fff2 	bl	8006060 <PID_SetUpperIntegralTermLimit>
  PID_SetLowerIntegralTermLimit( pHandle, ( int32_t ) - INT16_MAX * wKiDiv );
 800607c:	4902      	ldr	r1, [pc, #8]	; (8006088 <PID_SetKIDivisorPOW2+0x24>)
 800607e:	4628      	mov	r0, r5
 8006080:	40a1      	lsls	r1, r4
 8006082:	f7ff ffeb 	bl	800605c <PID_SetLowerIntegralTermLimit>
}
 8006086:	bd38      	pop	{r3, r4, r5, pc}
 8006088:	ffff8001 	.word	0xffff8001

0800608c <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 800608c:	8441      	strh	r1, [r0, #34]	; 0x22
}
 800608e:	4770      	bx	lr

08006090 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006090:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <PID_GetKDDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKdDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKDDivisorPOW2(PID_Handle_t * pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
 8006098:	b100      	cbz	r0, 800609c <PID_GetKDDivisorPOW2+0x4>
 800609a:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop

080060a0 <PID_SetKDDivisorPOW2>:
 * @param hKdDivisorPOW2
 */
__weak void PID_SetKDDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKdDivisorPOW2 )
{
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 80060a0:	2301      	movs	r3, #1
 80060a2:	408b      	lsls	r3, r1
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 80060a4:	84c1      	strh	r1, [r0, #38]	; 0x26
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 80060a6:	8483      	strh	r3, [r0, #36]	; 0x24
}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop

080060ac <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80060ac:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 80060b0:	4603      	mov	r3, r0
 80060b2:	b510      	push	{r4, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 80060b4:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80060b8:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80060bc:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80060c0:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 80060c4:	b17c      	cbz	r4, 80060e6 <PI_Controller+0x3a>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80060c6:	fb04 f101 	mul.w	r1, r4, r1
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 80060ca:	689c      	ldr	r4, [r3, #8]

    if ( wIntegral_sum_temp < 0 )
 80060cc:	eb14 0e01 	adds.w	lr, r4, r1
 80060d0:	d41f      	bmi.n	8006112 <PI_Controller+0x66>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 80060d2:	2c00      	cmp	r4, #0
 80060d4:	db29      	blt.n	800612a <PI_Controller+0x7e>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80060d6:	68d9      	ldr	r1, [r3, #12]
 80060d8:	4571      	cmp	r1, lr
 80060da:	db05      	blt.n	80060e8 <PI_Controller+0x3c>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80060dc:	6919      	ldr	r1, [r3, #16]
 80060de:	4571      	cmp	r1, lr
 80060e0:	dc02      	bgt.n	80060e8 <PI_Controller+0x3c>
          wIntegral_sum_temp = INT32_MAX;
 80060e2:	4671      	mov	r1, lr
 80060e4:	e000      	b.n	80060e8 <PI_Controller+0x3c>
 80060e6:	4621      	mov	r1, r4
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80060e8:	8b9c      	ldrh	r4, [r3, #28]
 80060ea:	4122      	asrs	r2, r4
 80060ec:	8bdc      	ldrh	r4, [r3, #30]
 80060ee:	fa41 f404 	asr.w	r4, r1, r4
 80060f2:	4422      	add	r2, r4
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80060f4:	4290      	cmp	r0, r2
 80060f6:	da03      	bge.n	8006100 <PI_Controller+0x54>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80060f8:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80060fa:	4411      	add	r1, r2
 80060fc:	6099      	str	r1, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80060fe:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8006100:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006102:	bfc5      	ittet	gt
 8006104:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 8006108:	1889      	addgt	r1, r1, r2
  return ( ( int16_t )( wOutput_32 ) );
 800610a:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 800610c:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 800610e:	6099      	str	r1, [r3, #8]
}
 8006110:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8006112:	2c00      	cmp	r4, #0
 8006114:	dddf      	ble.n	80060d6 <PI_Controller+0x2a>
        if ( wIntegral_Term > 0 )
 8006116:	2900      	cmp	r1, #0
 8006118:	dddd      	ble.n	80060d6 <PI_Controller+0x2a>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800611a:	68d9      	ldr	r1, [r3, #12]
 800611c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8006120:	42a1      	cmp	r1, r4
 8006122:	d1e1      	bne.n	80060e8 <PI_Controller+0x3c>
          wIntegral_sum_temp = INT32_MAX;
 8006124:	468e      	mov	lr, r1
 8006126:	4671      	mov	r1, lr
 8006128:	e7de      	b.n	80060e8 <PI_Controller+0x3c>
          wIntegral_sum_temp = -INT32_MAX;
 800612a:	4c03      	ldr	r4, [pc, #12]	; (8006138 <PI_Controller+0x8c>)
 800612c:	ea3e 0e21 	bics.w	lr, lr, r1, asr #32
 8006130:	bf28      	it	cs
 8006132:	46a6      	movcs	lr, r4
 8006134:	e7cf      	b.n	80060d6 <PI_Controller+0x2a>
 8006136:	bf00      	nop
 8006138:	80000001 	.word	0x80000001

0800613c <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800613c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8006140:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006142:	8b11      	ldrh	r1, [r2, #24]
 8006144:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006146:	8993      	ldrh	r3, [r2, #12]
 8006148:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800614a:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 800614e:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006150:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006154:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006158:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800615c:	f7ff f862 	bl	8005224 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8006160:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006162:	490f      	ldr	r1, [pc, #60]	; (80061a0 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006164:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8006168:	bfb8      	it	lt
 800616a:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800616e:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8006172:	bfb8      	it	lt
 8006174:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006176:	fb81 1000 	smull	r1, r0, r1, r0
 800617a:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 800617e:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8006180:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006184:	4907      	ldr	r1, [pc, #28]	; (80061a4 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006186:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800618a:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 800618c:	fb81 2103 	smull	r2, r1, r1, r3
 8006190:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006192:	4628      	mov	r0, r5
 8006194:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800619c:	f7ff bec0 	b.w	8005f20 <MPM_CalcElMotorPower>
 80061a0:	1b4e81b5 	.word	0x1b4e81b5
 80061a4:	66666667 	.word	0x66666667

080061a8 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80061a8:	4b17      	ldr	r3, [pc, #92]	; (8006208 <startTimers+0x60>)
 80061aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#ifdef TIM2
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 80061ac:	07d2      	lsls	r2, r2, #31
 80061ae:	d415      	bmi.n	80061dc <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 80061b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80061b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80061ba:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80061bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80061c0:	f002 0201 	and.w	r2, r2, #1
 80061c4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80061c6:	9a01      	ldr	r2, [sp, #4]
 80061c8:	694a      	ldr	r2, [r1, #20]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80061d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
#endif
}
 80061d8:	b002      	add	sp, #8
 80061da:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 80061dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061e0:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80061e2:	6859      	ldr	r1, [r3, #4]
 80061e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80061e8:	f041 0120 	orr.w	r1, r1, #32
 80061ec:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80061ee:	6959      	ldr	r1, [r3, #20]
 80061f0:	f041 0101 	orr.w	r1, r1, #1
 80061f4:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80061f6:	6859      	ldr	r1, [r3, #4]
 80061f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80061fc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40023800 	.word	0x40023800

0800620c <waitForPolarizationEnd>:
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800620c:	3201      	adds	r2, #1
{
 800620e:	b570      	push	{r4, r5, r6, lr}
  hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006210:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006212:	f06f 0602 	mvn.w	r6, #2
 8006216:	0155      	lsls	r5, r2, #5
 8006218:	6106      	str	r6, [r0, #16]

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 800621a:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 800621c:	f893 c000 	ldrb.w	ip, [r3]
 8006220:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006224:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006228:	d80c      	bhi.n	8006244 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800622a:	6904      	ldr	r4, [r0, #16]
 800622c:	07a4      	lsls	r4, r4, #30
 800622e:	d5f5      	bpl.n	800621c <waitForPolarizationEnd+0x10>
      hCalibrationPeriodCounter++;
 8006230:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006234:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006236:	6106      	str	r6, [r0, #16]
 8006238:	d8f0      	bhi.n	800621c <waitForPolarizationEnd+0x10>
      {
        if (*cnt < NB_CONVERSIONS)
 800623a:	781c      	ldrb	r4, [r3, #0]
 800623c:	2c0f      	cmp	r4, #15
 800623e:	d8ed      	bhi.n	800621c <waitForPolarizationEnd+0x10>
        {
          *SWerror = 1u;
 8006240:	2301      	movs	r3, #1
 8006242:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006244:	bd70      	pop	{r4, r5, r6, pc}
 8006246:	bf00      	nop

08006248 <R3_2_GetPhaseCurrents>:
  */
__weak void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t* pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006248:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 800624c:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800624e:	689c      	ldr	r4, [r3, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006250:	6a22      	ldr	r2, [r4, #32]
 8006252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006256:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = pHandle->_Super.Sector;
 8006258:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 800625c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8006260:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8006262:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8006264:	682b      	ldr	r3, [r5, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8006266:	6824      	ldr	r4, [r4, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8006268:	005b      	lsls	r3, r3, #1
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 800626a:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 800626e:	b29b      	uxth	r3, r3
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8006270:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 8006274:	2a05      	cmp	r2, #5
 8006276:	f200 80a6 	bhi.w	80063c6 <R3_2_GetPhaseCurrents+0x17e>
 800627a:	e8df f002 	tbb	[pc, r2]
 800627e:	1c36      	.short	0x1c36
 8006280:	3603031c 	.word	0x3603031c
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006284:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8006286:	1ad3      	subs	r3, r2, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8006288:	4a52      	ldr	r2, [pc, #328]	; (80063d4 <R3_2_GetPhaseCurrents+0x18c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	db5a      	blt.n	8006344 <R3_2_GetPhaseCurrents+0xfc>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800628e:	6f42      	ldr	r2, [r0, #116]	; 0x74

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8006290:	4d50      	ldr	r5, [pc, #320]	; (80063d4 <R3_2_GetPhaseCurrents+0x18c>)
      else  if ( wAux > INT16_MAX )
 8006292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006296:	eba2 0c0c 	sub.w	ip, r2, ip
        pStator_Currents->a = INT16_MAX;
 800629a:	bfa8      	it	ge
 800629c:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      if ( wAux < -INT16_MAX )
 80062a0:	45ac      	cmp	ip, r5
        pStator_Currents->a = ( int16_t )wAux;
 80062a2:	800b      	strh	r3, [r1, #0]
      if ( wAux < -INT16_MAX )
 80062a4:	da55      	bge.n	8006352 <R3_2_GetPhaseCurrents+0x10a>

    default:
      break;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
 80062a6:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = -INT16_MAX;
 80062aa:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80062ac:	fa1f f38e 	uxth.w	r3, lr
 80062b0:	f248 0201 	movw	r2, #32769	; 0x8001
 80062b4:	e031      	b.n	800631a <R3_2_GetPhaseCurrents+0xd2>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80062b6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80062b8:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 80062ba:	4b46      	ldr	r3, [pc, #280]	; (80063d4 <R3_2_GetPhaseCurrents+0x18c>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	db3b      	blt.n	8006338 <R3_2_GetPhaseCurrents+0xf0>
      else  if ( wAux > INT16_MAX )
 80062c0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80062c4:	db6f      	blt.n	80063a6 <R3_2_GetPhaseCurrents+0x15e>
        pStator_Currents->a = INT16_MAX;
 80062c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80062ca:	4613      	mov	r3, r2
 80062cc:	800a      	strh	r2, [r1, #0]
 80062ce:	4614      	mov	r4, r2
 80062d0:	4696      	mov	lr, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80062d2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80062d4:	ebac 0202 	sub.w	r2, ip, r2
 80062d8:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 80062da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80062de:	db4d      	blt.n	800637c <R3_2_GetPhaseCurrents+0x134>
        pStator_Currents->b = INT16_MAX;
 80062e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80062e4:	804a      	strh	r2, [r1, #2]
 80062e6:	4615      	mov	r5, r2
 80062e8:	e017      	b.n	800631a <R3_2_GetPhaseCurrents+0xd2>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80062ea:	6f44      	ldr	r4, [r0, #116]	; 0x74
      if ( wAux < -INT16_MAX )
 80062ec:	4a39      	ldr	r2, [pc, #228]	; (80063d4 <R3_2_GetPhaseCurrents+0x18c>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80062ee:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 80062f0:	4293      	cmp	r3, r2
 80062f2:	db1b      	blt.n	800632c <R3_2_GetPhaseCurrents+0xe4>
      else  if ( wAux > INT16_MAX )
 80062f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f8:	db47      	blt.n	800638a <R3_2_GetPhaseCurrents+0x142>
        pStator_Currents->b = INT16_MAX;
 80062fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80062fe:	461a      	mov	r2, r3
 8006300:	804b      	strh	r3, [r1, #2]
 8006302:	461d      	mov	r5, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8006304:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8006306:	ebac 0404 	sub.w	r4, ip, r4
 800630a:	1ae3      	subs	r3, r4, r3
      if ( wAux > INT16_MAX )
 800630c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006310:	db2c      	blt.n	800636c <R3_2_GetPhaseCurrents+0x124>
        pStator_Currents->a = INT16_MAX;
 8006312:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006316:	800b      	strh	r3, [r1, #0]
 8006318:	469e      	mov	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800631a:	4413      	add	r3, r2
 800631c:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 800631e:	f8a0 e04c 	strh.w	lr, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = pStator_Currents->b;
 8006322:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006326:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800632a:	bd30      	pop	{r4, r5, pc}
        pStator_Currents->b = -INT16_MAX;
 800632c:	4613      	mov	r3, r2
 800632e:	804a      	strh	r2, [r1, #2]
 8006330:	461d      	mov	r5, r3
 8006332:	f248 0201 	movw	r2, #32769	; 0x8001
 8006336:	e7e5      	b.n	8006304 <R3_2_GetPhaseCurrents+0xbc>
        pStator_Currents->a = -INT16_MAX;
 8006338:	461c      	mov	r4, r3
 800633a:	800b      	strh	r3, [r1, #0]
 800633c:	46a6      	mov	lr, r4
 800633e:	f248 0301 	movw	r3, #32769	; 0x8001
 8006342:	e7c6      	b.n	80062d2 <R3_2_GetPhaseCurrents+0x8a>
        pStator_Currents->a = -INT16_MAX;
 8006344:	800a      	strh	r2, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006346:	6f42      	ldr	r2, [r0, #116]	; 0x74
      if ( wAux < -INT16_MAX )
 8006348:	4d22      	ldr	r5, [pc, #136]	; (80063d4 <R3_2_GetPhaseCurrents+0x18c>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800634a:	eba2 0c0c 	sub.w	ip, r2, ip
      if ( wAux < -INT16_MAX )
 800634e:	45ac      	cmp	ip, r5
 8006350:	dba9      	blt.n	80062a6 <R3_2_GetPhaseCurrents+0x5e>
      else  if ( wAux > INT16_MAX )
 8006352:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8006356:	db1c      	blt.n	8006392 <R3_2_GetPhaseCurrents+0x14a>
        pStator_Currents->b = INT16_MAX;
 8006358:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = pStator_Currents->a;
 800635c:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = INT16_MAX;
 8006360:	804b      	strh	r3, [r1, #2]
 8006362:	461a      	mov	r2, r3
 8006364:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006366:	fa1f f38e 	uxth.w	r3, lr
 800636a:	e7d6      	b.n	800631a <R3_2_GetPhaseCurrents+0xd2>
      else  if ( wAux < -INT16_MAX )
 800636c:	4c19      	ldr	r4, [pc, #100]	; (80063d4 <R3_2_GetPhaseCurrents+0x18c>)
 800636e:	42a3      	cmp	r3, r4
 8006370:	da1f      	bge.n	80063b2 <R3_2_GetPhaseCurrents+0x16a>
        pStator_Currents->a = -INT16_MAX;
 8006372:	800c      	strh	r4, [r1, #0]
 8006374:	f248 0301 	movw	r3, #32769	; 0x8001
 8006378:	46a6      	mov	lr, r4
 800637a:	e7ce      	b.n	800631a <R3_2_GetPhaseCurrents+0xd2>
      else  if ( wAux < -INT16_MAX )
 800637c:	4d15      	ldr	r5, [pc, #84]	; (80063d4 <R3_2_GetPhaseCurrents+0x18c>)
 800637e:	42aa      	cmp	r2, r5
 8006380:	da1d      	bge.n	80063be <R3_2_GetPhaseCurrents+0x176>
        pStator_Currents->b = -INT16_MAX;
 8006382:	804d      	strh	r5, [r1, #2]
 8006384:	f248 0201 	movw	r2, #32769	; 0x8001
 8006388:	e7c7      	b.n	800631a <R3_2_GetPhaseCurrents+0xd2>
        pStator_Currents->b = ( int16_t )wAux;
 800638a:	b21d      	sxth	r5, r3
 800638c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800638e:	b29a      	uxth	r2, r3
 8006390:	e7b8      	b.n	8006304 <R3_2_GetPhaseCurrents+0xbc>
  pHandle->_Super.Ia = pStator_Currents->a;
 8006392:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = ( int16_t )wAux;
 8006396:	fa0f f58c 	sxth.w	r5, ip
 800639a:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800639c:	fa1f f38e 	uxth.w	r3, lr
 80063a0:	fa1f f28c 	uxth.w	r2, ip
 80063a4:	e7b9      	b.n	800631a <R3_2_GetPhaseCurrents+0xd2>
        pStator_Currents->a = ( int16_t )wAux;
 80063a6:	fa0f fe84 	sxth.w	lr, r4
 80063aa:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80063ae:	b2a3      	uxth	r3, r4
 80063b0:	e78f      	b.n	80062d2 <R3_2_GetPhaseCurrents+0x8a>
        pStator_Currents->a = ( int16_t )wAux;
 80063b2:	fa0f fe83 	sxth.w	lr, r3
 80063b6:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	e7ad      	b.n	800631a <R3_2_GetPhaseCurrents+0xd2>
        pStator_Currents->b = ( int16_t )wAux;
 80063be:	b215      	sxth	r5, r2
 80063c0:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80063c2:	b292      	uxth	r2, r2
 80063c4:	e7a9      	b.n	800631a <R3_2_GetPhaseCurrents+0xd2>
  pHandle->_Super.Ia = pStator_Currents->a;
 80063c6:	f9b1 e000 	ldrsh.w	lr, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 80063ca:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80063ce:	880b      	ldrh	r3, [r1, #0]
 80063d0:	884a      	ldrh	r2, [r1, #2]
 80063d2:	e7a2      	b.n	800631a <R3_2_GetPhaseCurrents+0xd2>
 80063d4:	ffff8001 	.word	0xffff8001

080063d8 <R3_2_HFCurrentsCalibrationAB>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_2_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80063d8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 80063dc:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80063de:	689c      	ldr	r4, [r3, #8]
 80063e0:	6a22      	ldr	r2, [r4, #32]
 80063e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063e6:	6222      	str	r2, [r4, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80063e8:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
 80063ec:	2a0f      	cmp	r2, #15
 80063ee:	d813      	bhi.n	8006418 <R3_2_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80063f0:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
 80063f4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80063f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80063fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80063fe:	6824      	ldr	r4, [r4, #0]
 8006400:	4422      	add	r2, r4
 8006402:	6702      	str	r2, [r0, #112]	; 0x70
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006404:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 8006406:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800640a:	6f42      	ldr	r2, [r0, #116]	; 0x74
    pHandle->PolarizationCounter++;
 800640c:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800640e:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006410:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006412:	6742      	str	r2, [r0, #116]	; 0x74
    pHandle->PolarizationCounter++;
 8006414:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8006418:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800641a:	bc10      	pop	{r4}
  pStator_Currents->a = 0;
 800641c:	600b      	str	r3, [r1, #0]
}
 800641e:	4770      	bx	lr

08006420 <R3_2_HFCurrentsCalibrationC>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_2_HFCurrentsCalibrationC( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;  
 8006420:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
{
 8006424:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;  
 8006426:	6894      	ldr	r4, [r2, #8]
 8006428:	6a23      	ldr	r3, [r4, #32]
 800642a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800642e:	6223      	str	r3, [r4, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006430:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 8006434:	2b0f      	cmp	r3, #15
 8006436:	d80e      	bhi.n	8006456 <R3_2_HFCurrentsCalibrationC+0x36>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006438:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
 800643c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800643e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 8006448:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800644c:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 800644e:	3301      	adds	r3, #1
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8006456:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8006458:	bc10      	pop	{r4}
  pStator_Currents->a = 0;
 800645a:	600b      	str	r3, [r1, #0]
}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop

08006460 <R3_2_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_2_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 8006460:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006464:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 8006468:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800646a:	f880 c069 	strb.w	ip, [r0, #105]	; 0x69
  WRITE_REG(TIMx->CCR1, CompareValue);
 800646e:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006470:	f06f 0001 	mvn.w	r0, #1
 8006474:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006476:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006478:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800647a:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800647c:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1(TIMx,0);
  LL_TIM_OC_SetCompareCH2(TIMx,0);
  LL_TIM_OC_SetCompareCH3(TIMx,0);

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == RESET)
 800647e:	07db      	lsls	r3, r3, #31
 8006480:	d5fc      	bpl.n	800647c <R3_2_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006482:	f06f 0301 	mvn.w	r3, #1
 8006486:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006488:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800648a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648e:	6453      	str	r3, [r2, #68]	; 0x44
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 8006490:	f891 3097 	ldrb.w	r3, [r1, #151]	; 0x97
 8006494:	2b02      	cmp	r3, #2
 8006496:	d000      	beq.n	800649a <R3_2_TurnOnLowSides+0x3a>
 8006498:	4770      	bx	lr
{
 800649a:	b410      	push	{r4}
  {
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800649c:	e9d1 2003 	ldrd	r2, r0, [r1, #12]
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80064a0:	e9d1 3405 	ldrd	r3, r4, [r1, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80064a4:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80064a6:	e9d1 4207 	ldrd	r4, r2, [r1, #28]
 80064aa:	6184      	str	r4, [r0, #24]
  }
  return;
}
 80064ac:	bc10      	pop	{r4}
 80064ae:	619a      	str	r2, [r3, #24]
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop

080064b4 <R3_2_SwitchOnPWM>:
  * @retval none
  */
__weak void R3_2_SwitchOnPWM( PWMC_Handle_t * pHdl )
{  
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80064b4:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80064b8:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80064bc:	688b      	ldr	r3, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80064be:	f04f 0c00 	mov.w	ip, #0
{  
 80064c2:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80064c4:	f880 c069 	strb.w	ip, [r0, #105]	; 0x69
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80064c8:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80064ca:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80064cc:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80064ce:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80064d0:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064d2:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80064d6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064d8:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80064da:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80064dc:	07d2      	lsls	r2, r2, #31
 80064de:	d5fc      	bpl.n	80064da <R3_2_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064e0:	f06f 0201 	mvn.w	r2, #1
 80064e4:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80064e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064ec:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80064ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064f4:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80064f6:	f891 2097 	ldrb.w	r2, [r1, #151]	; 0x97
 80064fa:	2a02      	cmp	r2, #2
 80064fc:	d008      	beq.n	8006510 <R3_2_SwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80064fe:	f06f 0201 	mvn.w	r2, #1
 8006502:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);

  return;
}
 800650a:	bc30      	pop	{r4, r5}
 800650c:	60da      	str	r2, [r3, #12]
 800650e:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006510:	6a18      	ldr	r0, [r3, #32]
 8006512:	f240 5255 	movw	r2, #1365	; 0x555
 8006516:	4382      	bics	r2, r0
 8006518:	d00c      	beq.n	8006534 <R3_2_SwitchOnPWM+0x80>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800651a:	e9d1 4006 	ldrd	r4, r0, [r1, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800651e:	68cd      	ldr	r5, [r1, #12]
 8006520:	6a0a      	ldr	r2, [r1, #32]
 8006522:	0424      	lsls	r4, r4, #16
 8006524:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006526:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800652a:	0400      	lsls	r0, r0, #16
 800652c:	0412      	lsls	r2, r2, #16
 800652e:	61a8      	str	r0, [r5, #24]
 8006530:	61a2      	str	r2, [r4, #24]
}
 8006532:	e7e4      	b.n	80064fe <R3_2_SwitchOnPWM+0x4a>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006534:	e9d1 4003 	ldrd	r4, r0, [r1, #12]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006538:	e9d1 2505 	ldrd	r2, r5, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800653c:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800653e:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
 8006542:	6184      	str	r4, [r0, #24]
 8006544:	6191      	str	r1, [r2, #24]
}
 8006546:	e7da      	b.n	80064fe <R3_2_SwitchOnPWM+0x4a>

08006548 <R3_2_SwitchOffPWM>:
  * @retval none
  */
__weak void R3_2_SwitchOffPWM( PWMC_Handle_t * pHdl )
{ 
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 8006548:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800654c:	689a      	ldr	r2, [r3, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800654e:	68d1      	ldr	r1, [r2, #12]
 8006550:	f021 0101 	bic.w	r1, r1, #1
 8006554:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006556:	6c51      	ldr	r1, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8006558:	f04f 0c00 	mov.w	ip, #0
 800655c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8006560:	f880 c069 	strb.w	ip, [r0, #105]	; 0x69
 8006564:	6451      	str	r1, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 8006566:	f893 1097 	ldrb.w	r1, [r3, #151]	; 0x97
 800656a:	2902      	cmp	r1, #2
 800656c:	d009      	beq.n	8006582 <R3_2_SwitchOffPWM+0x3a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800656e:	f06f 0301 	mvn.w	r3, #1
 8006572:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006574:	6913      	ldr	r3, [r2, #16]
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
  }
  
  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006576:	07db      	lsls	r3, r3, #31
 8006578:	d5fc      	bpl.n	8006574 <R3_2_SwitchOffPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800657a:	f06f 0301 	mvn.w	r3, #1
 800657e:	6113      	str	r3, [r2, #16]
 8006580:	4770      	bx	lr
{ 
 8006582:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006584:	e9d3 4006 	ldrd	r4, r0, [r3, #24]
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006588:	68dd      	ldr	r5, [r3, #12]
 800658a:	6a19      	ldr	r1, [r3, #32]
 800658c:	0424      	lsls	r4, r4, #16
 800658e:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006590:	e9d3 5404 	ldrd	r5, r4, [r3, #16]
 8006594:	0400      	lsls	r0, r0, #16
 8006596:	0409      	lsls	r1, r1, #16
 8006598:	f06f 0301 	mvn.w	r3, #1
 800659c:	61a8      	str	r0, [r5, #24]
 800659e:	61a1      	str	r1, [r4, #24]
 80065a0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80065a2:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80065a4:	07d9      	lsls	r1, r3, #31
 80065a6:	d5fc      	bpl.n	80065a2 <R3_2_SwitchOffPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065a8:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 80065ac:	bc30      	pop	{r4, r5}
 80065ae:	6113      	str	r3, [r2, #16]
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop

080065b4 <R3_2_SetADCSampPointCalibration>:
 *         And call the WriteTIMRegisters method.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
__weak uint16_t R3_2_SetADCSampPointCalibration( PWMC_Handle_t * pHdl)
{
 80065b4:	b410      	push	{r4}
 80065b6:	4603      	mov	r3, r0
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;

  /* Set rising edge trigger (default) */
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80065b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  pHandle->_Super.Sector = pHandle->CalibSector;
 80065bc:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80065c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  pHandle->_Super.Sector = pHandle->CalibSector;
 80065c4:	f883 4068 	strb.w	r4, [r3, #104]	; 0x68

  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 80065c8:	f8b3 1084 	ldrh.w	r1, [r3, #132]	; 0x84
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80065cc:	6892      	ldr	r2, [r2, #8]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 80065ce:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80065d0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 80065d4:	3901      	subs	r1, #1
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 80065d6:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065d8:	6354      	str	r4, [r2, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 80065da:	b289      	uxth	r1, r1
  WRITE_REG(TIMx->CCR2, CompareValue);
 80065dc:	6390      	str	r0, [r2, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 80065de:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e
  if ( pHandle->_Super.SWerror == 1u )
 80065e0:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 80065e4:	63d4      	str	r4, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80065e6:	6411      	str	r1, [r2, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80065e8:	6a12      	ldr	r2, [r2, #32]
}
 80065ea:	bc10      	pop	{r4}
  if ( pHandle->_Super.SWerror == 1u )
 80065ec:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 80065ee:	bf0a      	itet	eq
 80065f0:	2200      	moveq	r2, #0
    hAux = MC_FOC_DURATION;
 80065f2:	f3c2 3000 	ubfxne	r0, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 80065f6:	f8a3 2040 	strheq.w	r2, [r3, #64]	; 0x40
}
 80065fa:	4770      	bx	lr

080065fc <R3_2_RLGetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80065fc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
{
 8006600:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006602:	6894      	ldr	r4, [r2, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006604:	6a23      	ldr	r3, [r4, #32]
 8006606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660a:	6223      	str	r3, [r4, #32]
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800660c:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
 8006610:	6f43      	ldr	r3, [r0, #116]	; 0x74

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8006612:	480d      	ldr	r0, [pc, #52]	; (8006648 <R3_2_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8006614:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006618:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if ( wAux > -INT16_MAX )
 8006620:	4283      	cmp	r3, r0
 8006622:	db05      	blt.n	8006630 <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 8006624:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006628:	4293      	cmp	r3, r2
 800662a:	dc0a      	bgt.n	8006642 <R3_2_RLGetPhaseCurrents+0x46>
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 800662c:	b21b      	sxth	r3, r3
 800662e:	e000      	b.n	8006632 <R3_2_RLGetPhaseCurrents+0x36>
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <R3_2_RLGetPhaseCurrents+0x50>)
  pStator_Currents->b = (int16_t)wAux;
}
 8006632:	bc10      	pop	{r4}
  pStator_Currents->a = (int16_t)wAux;
 8006634:	2200      	movs	r2, #0
 8006636:	f363 020f 	bfi	r2, r3, #0, #16
 800663a:	f363 421f 	bfi	r2, r3, #16, #16
 800663e:	600a      	str	r2, [r1, #0]
}
 8006640:	4770      	bx	lr
 8006642:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006646:	e7f4      	b.n	8006632 <R3_2_RLGetPhaseCurrents+0x36>
 8006648:	ffff8002 	.word	0xffff8002
 800664c:	ffff8001 	.word	0xffff8001

08006650 <R3_2_RLTurnOnLowSides>:
  * @retval none
  */
static void R3_2_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006650:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8006654:	688a      	ldr	r2, [r1, #8]
{
 8006656:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006658:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800665c:	2400      	movs	r4, #0
 800665e:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006660:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006662:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006664:	07db      	lsls	r3, r3, #31
 8006666:	d5fc      	bpl.n	8006662 <R3_2_RLTurnOnLowSides+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006668:	f06f 0301 	mvn.w	r3, #1
 800666c:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800666e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006674:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006676:	f891 3097 	ldrb.w	r3, [r1, #151]	; 0x97
 800667a:	2b02      	cmp	r3, #2
 800667c:	d10a      	bne.n	8006694 <R3_2_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800667e:	68c8      	ldr	r0, [r1, #12]
 8006680:	698c      	ldr	r4, [r1, #24]
 8006682:	e9d1 2307 	ldrd	r2, r3, [r1, #28]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006686:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006688:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800668c:	0412      	lsls	r2, r2, #16
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	6182      	str	r2, [r0, #24]
 8006692:	618b      	str	r3, [r1, #24]
  }
  return;
}
 8006694:	bc10      	pop	{r4}
 8006696:	4770      	bx	lr

08006698 <R3_2_RLSwitchOnPWM>:
  * @retval none
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006698:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800669c:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800669e:	f06f 0201 	mvn.w	r2, #1
{
 80066a2:	b430      	push	{r4, r5}
 80066a4:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80066a6:	691a      	ldr	r2, [r3, #16]


  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80066a8:	07d4      	lsls	r4, r2, #31
 80066aa:	d5fc      	bpl.n	80066a6 <R3_2_RLSwitchOnPWM+0xe>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 80066ac:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066b0:	f06f 0401 	mvn.w	r4, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80066b4:	2001      	movs	r0, #1
 80066b6:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066b8:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80066ba:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80066bc:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80066be:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80066c0:	07d2      	lsls	r2, r2, #31
 80066c2:	d5fc      	bpl.n	80066be <R3_2_RLSwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066c4:	f06f 0201 	mvn.w	r2, #1
 80066c8:	611a      	str	r2, [r3, #16]
  LL_TIM_ClearFlag_UPDATE( TIMx );
  

  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 80066ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066d0:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80066d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80066da:	f891 2097 	ldrb.w	r2, [r1, #151]	; 0x97
 80066de:	2a02      	cmp	r2, #2
 80066e0:	d008      	beq.n	80066f4 <R3_2_RLSwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066e2:	f06f 0201 	mvn.w	r2, #1
 80066e6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return;
}
 80066ee:	bc30      	pop	{r4, r5}
 80066f0:	60da      	str	r2, [r3, #12]
 80066f2:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80066f4:	6a18      	ldr	r0, [r3, #32]
 80066f6:	f240 5255 	movw	r2, #1365	; 0x555
 80066fa:	4210      	tst	r0, r2
 80066fc:	d00a      	beq.n	8006714 <R3_2_RLSwitchOnPWM+0x7c>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80066fe:	68c8      	ldr	r0, [r1, #12]
 8006700:	698c      	ldr	r4, [r1, #24]
 8006702:	6a0a      	ldr	r2, [r1, #32]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006704:	6184      	str	r4, [r0, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006706:	6908      	ldr	r0, [r1, #16]
 8006708:	69cc      	ldr	r4, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800670a:	6949      	ldr	r1, [r1, #20]
 800670c:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800670e:	0412      	lsls	r2, r2, #16
 8006710:	618a      	str	r2, [r1, #24]
}
 8006712:	e7e6      	b.n	80066e2 <R3_2_RLSwitchOnPWM+0x4a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006714:	e9d1 4006 	ldrd	r4, r0, [r1, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006718:	68cd      	ldr	r5, [r1, #12]
 800671a:	6a0a      	ldr	r2, [r1, #32]
 800671c:	0424      	lsls	r4, r4, #16
 800671e:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006720:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 8006724:	0400      	lsls	r0, r0, #16
 8006726:	0412      	lsls	r2, r2, #16
 8006728:	61a8      	str	r0, [r5, #24]
 800672a:	61a2      	str	r2, [r4, #24]
}
 800672c:	e7d9      	b.n	80066e2 <R3_2_RLSwitchOnPWM+0x4a>
 800672e:	bf00      	nop

08006730 <R3_2_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006730:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8006734:	688b      	ldr	r3, [r1, #8]
{
 8006736:	b430      	push	{r4, r5}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006738:	681d      	ldr	r5, [r3, #0]
 800673a:	f025 0501 	bic.w	r5, r5, #1
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800673e:	e9d1 2400 	ldrd	r2, r4, [r1]
 8006742:	601d      	str	r5, [r3, #0]
  if ( (pHandle->pParams_str->EmergencyStop) != DISABLE )
 8006744:	f891 5098 	ldrb.w	r5, [r1, #152]	; 0x98
 8006748:	b135      	cbz	r5, 8006758 <R3_2_Init+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800674a:	f06f 0580 	mvn.w	r5, #128	; 0x80
 800674e:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8006750:	68dd      	ldr	r5, [r3, #12]
 8006752:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8006756:	60dd      	str	r5, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006758:	695d      	ldr	r5, [r3, #20]
 800675a:	f045 0501 	orr.w	r5, r5, #1
 800675e:	615d      	str	r5, [r3, #20]
  if ( pHandle->pParams_str->bFreqRatio == 2u )
 8006760:	f891 5094 	ldrb.w	r5, [r1, #148]	; 0x94
 8006764:	2d02      	cmp	r5, #2
 8006766:	d038      	beq.n	80067da <R3_2_Init+0xaa>
    if ( pHandle->_Super.Motor == M1 )
 8006768:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
 800676c:	2900      	cmp	r1, #0
 800676e:	d038      	beq.n	80067e2 <R3_2_Init+0xb2>
  SET_BIT(TIMx->CCER, Channels);
 8006770:	6a19      	ldr	r1, [r3, #32]
 8006772:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 8006776:	f041 0105 	orr.w	r1, r1, #5
 800677a:	6219      	str	r1, [r3, #32]
  if ( TIMx == TIM1 )
 800677c:	4924      	ldr	r1, [pc, #144]	; (8006810 <R3_2_Init+0xe0>)
 800677e:	428b      	cmp	r3, r1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006780:	4924      	ldr	r1, [pc, #144]	; (8006814 <R3_2_Init+0xe4>)
 8006782:	68cb      	ldr	r3, [r1, #12]
 8006784:	d032      	beq.n	80067ec <R3_2_Init+0xbc>
 8006786:	f043 0302 	orr.w	r3, r3, #2
 800678a:	60cb      	str	r3, [r1, #12]
    pHandle->ADC_ExternalTriggerInjected = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 800678c:	f44f 13f0 	mov.w	r3, #1966080	; 0x1e0000
 8006790:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006792:	6893      	ldr	r3, [r2, #8]
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	6093      	str	r3, [r2, #8]
 800679a:	68a3      	ldr	r3, [r4, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800679c:	f06f 0104 	mvn.w	r1, #4
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80067a0:	f043 0301 	orr.w	r3, r3, #1
 80067a4:	60a3      	str	r3, [r4, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80067a6:	6011      	str	r1, [r2, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80067a8:	6853      	ldr	r3, [r2, #4]
 80067aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ae:	6053      	str	r3, [r2, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80067b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80067b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 80067b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80067ba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80067be:	6393      	str	r3, [r2, #56]	; 0x38
 80067c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80067c2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  pHandle->_Super.DTTest = 0u;
 80067c6:	2200      	movs	r2, #0
 80067c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80067cc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80067ce:	bc30      	pop	{r4, r5}
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80067d0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  pHandle->_Super.DTTest = 0u;
 80067d4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
}
 80067d8:	4770      	bx	lr
    if ( pHandle->pParams_str->bIsHigherFreqTim == HIGHER_FREQ )
 80067da:	f891 5095 	ldrb.w	r5, [r1, #149]	; 0x95
 80067de:	2d01      	cmp	r5, #1
 80067e0:	d00b      	beq.n	80067fa <R3_2_Init+0xca>
      LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80067e2:	f8b0 1084 	ldrh.w	r1, [r0, #132]	; 0x84
 80067e6:	3901      	subs	r1, #1
  WRITE_REG(TIMx->CNT, Counter);
 80067e8:	6259      	str	r1, [r3, #36]	; 0x24
}
 80067ea:	e7c1      	b.n	8006770 <R3_2_Init+0x40>
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	60cb      	str	r3, [r1, #12]
    pHandle->ADC_ExternalTriggerInjected = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80067f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067f6:	67c3      	str	r3, [r0, #124]	; 0x7c
 80067f8:	e7cb      	b.n	8006792 <R3_2_Init+0x62>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80067fa:	f891 1096 	ldrb.w	r1, [r1, #150]	; 0x96
 80067fe:	2903      	cmp	r1, #3
 8006800:	d1ef      	bne.n	80067e2 <R3_2_Init+0xb2>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006802:	631d      	str	r5, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006804:	695d      	ldr	r5, [r3, #20]
 8006806:	f045 0501 	orr.w	r5, r5, #1
 800680a:	615d      	str	r5, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800680c:	6319      	str	r1, [r3, #48]	; 0x30
}
 800680e:	e7e8      	b.n	80067e2 <R3_2_Init+0xb2>
 8006810:	40010000 	.word	0x40010000
 8006814:	e0042000 	.word	0xe0042000

08006818 <R3_2_CurrentReadingCalibration>:
{
 8006818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800681c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8006820:	6843      	ldr	r3, [r0, #4]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006822:	6895      	ldr	r5, [r2, #8]
{
 8006824:	b083      	sub	sp, #12
  pHandle->PhaseAOffset = 0u;
 8006826:	2600      	movs	r6, #0
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8006828:	9300      	str	r3, [sp, #0]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800682a:	6983      	ldr	r3, [r0, #24]
 800682c:	9301      	str	r3, [sp, #4]
  pHandle->PolarizationCounter = 0u;
 800682e:	f880 6087 	strb.w	r6, [r0, #135]	; 0x87
  CLEAR_BIT(TIMx->CCER, Channels);
 8006832:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8006834:	6706      	str	r6, [r0, #112]	; 0x70
 8006836:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800683a:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 800683e:	e9c0 661d 	strd	r6, r6, [r0, #116]	; 0x74
 8006842:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsCalibrationAB;
 8006844:	4b33      	ldr	r3, [pc, #204]	; (8006914 <R3_2_CurrentReadingCalibration+0xfc>)
 8006846:	6043      	str	r3, [r0, #4]
{
 8006848:	4604      	mov	r4, r0
  pHandle->CalibSector = SECTOR_4;
 800684a:	2703      	movs	r7, #3
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointCalibration;
 800684c:	4b32      	ldr	r3, [pc, #200]	; (8006918 <R3_2_CurrentReadingCalibration+0x100>)
 800684e:	6183      	str	r3, [r0, #24]
  pHandle->CalibSector = SECTOR_4;
 8006850:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
  pHandle->_Super.Sector = SECTOR_4;   
 8006854:	f880 7068 	strb.w	r7, [r0, #104]	; 0x68
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8006858:	f7ff fe2c 	bl	80064b4 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 800685c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006860:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8006864:	f104 0987 	add.w	r9, r4, #135	; 0x87
 8006868:	f893 2096 	ldrb.w	r2, [r3, #150]	; 0x96
 800686c:	4641      	mov	r1, r8
 800686e:	464b      	mov	r3, r9
 8006870:	4628      	mov	r0, r5
 8006872:	f7ff fccb 	bl	800620c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8006876:	4620      	mov	r0, r4
 8006878:	f7ff fe66 	bl	8006548 <R3_2_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsCalibrationC;
 800687c:	4b27      	ldr	r3, [pc, #156]	; (800691c <R3_2_CurrentReadingCalibration+0x104>)
 800687e:	6063      	str	r3, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8006880:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8006882:	f884 6087 	strb.w	r6, [r4, #135]	; 0x87
  pHandle->CalibSector = SECTOR_1;
 8006886:	f884 6086 	strb.w	r6, [r4, #134]	; 0x86
  pHandle->_Super.Sector = SECTOR_1;   
 800688a:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800688e:	f7ff fe11 	bl	80064b4 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8006892:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006896:	464b      	mov	r3, r9
 8006898:	f892 2096 	ldrb.w	r2, [r2, #150]	; 0x96
 800689c:	4641      	mov	r1, r8
 800689e:	4628      	mov	r0, r5
 80068a0:	f7ff fcb4 	bl	800620c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80068a4:	4620      	mov	r0, r4
 80068a6:	f7ff fe4f 	bl	8006548 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80068aa:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
  pHandle->PhaseAOffset >>= 3;
 80068ae:	40fa      	lsrs	r2, r7
  pHandle->PhaseBOffset >>= 3;
 80068b0:	40fb      	lsrs	r3, r7
 80068b2:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  pHandle->PhaseCOffset >>= 3;
 80068b6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80068b8:	9a00      	ldr	r2, [sp, #0]
 80068ba:	6062      	str	r2, [r4, #4]
  pHandle->PhaseCOffset >>= 3;
 80068bc:	40fb      	lsrs	r3, r7
 80068be:	67a3      	str	r3, [r4, #120]	; 0x78
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80068c0:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068c2:	69ab      	ldr	r3, [r5, #24]
 80068c4:	61a2      	str	r2, [r4, #24]
 80068c6:	f023 0308 	bic.w	r3, r3, #8
 80068ca:	61ab      	str	r3, [r5, #24]
 80068cc:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1(TIMx,pHandle->Half_PWMPeriod);
 80068ce:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80068d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068d6:	61aa      	str	r2, [r5, #24]
 80068d8:	69ea      	ldr	r2, [r5, #28]
 80068da:	f022 0208 	bic.w	r2, r2, #8
 80068de:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80068e0:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80068e2:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80068e4:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068e6:	69ab      	ldr	r3, [r5, #24]
 80068e8:	f043 0308 	orr.w	r3, r3, #8
 80068ec:	61ab      	str	r3, [r5, #24]
 80068ee:	69ab      	ldr	r3, [r5, #24]
 80068f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068f4:	61ab      	str	r3, [r5, #24]
 80068f6:	69eb      	ldr	r3, [r5, #28]
 80068f8:	f043 0308 	orr.w	r3, r3, #8
 80068fc:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_4;
 80068fe:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
  SET_BIT(TIMx->CCER, Channels);
 8006902:	6a2b      	ldr	r3, [r5, #32]
 8006904:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8006908:	f043 0305 	orr.w	r3, r3, #5
 800690c:	622b      	str	r3, [r5, #32]
}
 800690e:	b003      	add	sp, #12
 8006910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006914:	080063d9 	.word	0x080063d9
 8006918:	080065b5 	.word	0x080065b5
 800691c:	08006421 	.word	0x08006421

08006920 <R3_2_SetADCSampPointSectX>:
{
 8006920:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8006922:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006926:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 800692a:	f8b0 e084 	ldrh.w	lr, [r0, #132]	; 0x84
 800692e:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
{
 8006932:	4603      	mov	r3, r0
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006934:	ebae 0002 	sub.w	r0, lr, r2
 8006938:	b280      	uxth	r0, r0
 800693a:	4288      	cmp	r0, r1
 800693c:	d918      	bls.n	8006970 <R3_2_SetADCSampPointSectX+0x50>
    pHandle->_Super.Sector = SECTOR_4;
 800693e:	2103      	movs	r1, #3
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006940:	f10e 32ff 	add.w	r2, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_4;
 8006944:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006948:	b292      	uxth	r2, r2
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800694a:	68a1      	ldr	r1, [r4, #8]
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 800694c:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800694e:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006950:	634c      	str	r4, [r1, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006952:	6388      	str	r0, [r1, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8006954:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e
  if ( pHandle->_Super.SWerror == 1u )
 8006956:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800695a:	63cc      	str	r4, [r1, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800695c:	640a      	str	r2, [r1, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800695e:	6a0a      	ldr	r2, [r1, #32]
 8006960:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006962:	bf0a      	itet	eq
 8006964:	2200      	moveq	r2, #0
    hAux = MC_FOC_DURATION;
 8006966:	f3c2 3000 	ubfxne	r0, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 800696a:	f8a3 2040 	strheq.w	r2, [r3, #64]	; 0x40
}
 800696e:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8006970:	f8b3 c044 	ldrh.w	ip, [r3, #68]	; 0x44
 8006974:	eba2 0c0c 	sub.w	ip, r2, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8006978:	fa1f fc8c 	uxth.w	ip, ip
 800697c:	ebbc 0f40 	cmp.w	ip, r0, lsl #1
 8006980:	d904      	bls.n	800698c <R3_2_SetADCSampPointSectX+0x6c>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8006982:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
 8006986:	1a52      	subs	r2, r2, r1
 8006988:	b292      	uxth	r2, r2
 800698a:	e7de      	b.n	800694a <R3_2_SetADCSampPointSectX+0x2a>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 800698c:	4411      	add	r1, r2
 800698e:	b28a      	uxth	r2, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8006990:	4596      	cmp	lr, r2
 8006992:	d8da      	bhi.n	800694a <R3_2_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006994:	43d2      	mvns	r2, r2
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800699a:	eb02 024e 	add.w	r2, r2, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800699e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80069a2:	b292      	uxth	r2, r2
 80069a4:	e7d1      	b.n	800694a <R3_2_SetADCSampPointSectX+0x2a>
 80069a6:	bf00      	nop

080069a8 <R3_2_TIMx_UP_IRQHandler>:
{
 80069a8:	4601      	mov	r1, r0
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80069aa:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
{
 80069ae:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80069b0:	e890 0038 	ldmia.w	r0, {r3, r4, r5}
  ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	f002 020c 	and.w	r2, r2, #12
  if ( ADCInjFlags == LL_ADC_FLAG_JSTRT )
 80069ba:	2a08      	cmp	r2, #8
 80069bc:	d03d      	beq.n	8006a3a <R3_2_TIMx_UP_IRQHandler+0x92>
  else if ( ADCInjFlags == 0 )
 80069be:	b94a      	cbnz	r2, 80069d4 <R3_2_TIMx_UP_IRQHandler+0x2c>
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 80069c0:	f8b0 c084 	ldrh.w	ip, [r0, #132]	; 0x84
 80069c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80069c6:	4562      	cmp	r2, ip
 80069c8:	d3fc      	bcc.n	80069c4 <R3_2_TIMx_UP_IRQHandler+0x1c>
    ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	f002 020c 	and.w	r2, r2, #12
    if ( ADCInjFlags == LL_ADC_FLAG_JSTRT )
 80069d0:	2a08      	cmp	r2, #8
 80069d2:	d03d      	beq.n	8006a50 <R3_2_TIMx_UP_IRQHandler+0xa8>
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80069da:	609a      	str	r2, [r3, #8]
 80069dc:	68a2      	ldr	r2, [r4, #8]
 80069de:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80069e2:	60a2      	str	r2, [r4, #8]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector];
 80069e4:	f891 2068 	ldrb.w	r2, [r1, #104]	; 0x68
 80069e8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 80069ec:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80069ee:	f402 2c70 	and.w	ip, r2, #983040	; 0xf0000
 80069f2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80069f4:	639a      	str	r2, [r3, #56]	; 0x38
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector];
 80069f6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80069f8:	63a2      	str	r2, [r4, #56]	; 0x38
 80069fa:	6898      	ldr	r0, [r3, #8]
 80069fc:	f420 2070 	bic.w	r0, r0, #983040	; 0xf0000
 8006a00:	ea40 000c 	orr.w	r0, r0, ip
 8006a04:	6098      	str	r0, [r3, #8]
 8006a06:	68a2      	ldr	r2, [r4, #8]
 8006a08:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006a0c:	ea42 020c 	orr.w	r2, r2, ip
 8006a10:	60a2      	str	r2, [r4, #8]
  SET_BIT(TIMx->CCER, Channels);
 8006a12:	6a2a      	ldr	r2, [r5, #32]
 8006a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a18:	622a      	str	r2, [r5, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006a1a:	6898      	ldr	r0, [r3, #8]
  LL_ADC_INJ_StartConversionExtTrig(ADCx_1, pHandle->ADCTriggerEdge);
 8006a1c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8006a20:	4310      	orrs	r0, r2
 8006a22:	6098      	str	r0, [r3, #8]
 8006a24:	68a0      	ldr	r0, [r4, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006a26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a2a:	4302      	orrs	r2, r0
 8006a2c:	60a2      	str	r2, [r4, #8]
}
 8006a2e:	f101 0066 	add.w	r0, r1, #102	; 0x66
 8006a32:	bc30      	pop	{r4, r5}
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006a34:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006a38:	4770      	bx	lr
      ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	f002 020c 	and.w	r2, r2, #12
    while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 8006a40:	2a0c      	cmp	r2, #12
 8006a42:	d0c7      	beq.n	80069d4 <R3_2_TIMx_UP_IRQHandler+0x2c>
      ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	f002 020c 	and.w	r2, r2, #12
    while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 8006a4a:	2a0c      	cmp	r2, #12
 8006a4c:	d1f5      	bne.n	8006a3a <R3_2_TIMx_UP_IRQHandler+0x92>
 8006a4e:	e7c1      	b.n	80069d4 <R3_2_TIMx_UP_IRQHandler+0x2c>
        ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	f002 020c 	and.w	r2, r2, #12
      while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 8006a56:	2a0c      	cmp	r2, #12
 8006a58:	d0bc      	beq.n	80069d4 <R3_2_TIMx_UP_IRQHandler+0x2c>
        ADCInjFlags = ADCx_1->SR & (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS);
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f002 020c 	and.w	r2, r2, #12
      while ( ADCInjFlags != (LL_ADC_FLAG_JSTRT|LL_ADC_FLAG_JEOS) );
 8006a60:	2a0c      	cmp	r2, #12
 8006a62:	d1f5      	bne.n	8006a50 <R3_2_TIMx_UP_IRQHandler+0xa8>
 8006a64:	e7b6      	b.n	80069d4 <R3_2_TIMx_UP_IRQHandler+0x2c>
 8006a66:	bf00      	nop

08006a68 <R3_2_BRK_IRQHandler>:
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8006a68:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006a6c:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 8006a70:	2a02      	cmp	r2, #2
 8006a72:	d004      	beq.n	8006a7e <R3_2_BRK_IRQHandler+0x16>
  pHandle->OverCurrentFlag = true;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
}
 8006a7a:	3066      	adds	r0, #102	; 0x66
 8006a7c:	4770      	bx	lr
{
 8006a7e:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006a80:	e9d3 4106 	ldrd	r4, r1, [r3, #24]
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006a84:	68dd      	ldr	r5, [r3, #12]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	0424      	lsls	r4, r4, #16
 8006a8a:	61ac      	str	r4, [r5, #24]
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006a8c:	e9d3 5404 	ldrd	r5, r4, [r3, #16]
 8006a90:	0409      	lsls	r1, r1, #16
 8006a92:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8006a94:	2301      	movs	r3, #1
 8006a96:	61a9      	str	r1, [r5, #24]
}
 8006a98:	3066      	adds	r0, #102	; 0x66
 8006a9a:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8006a9c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 8006aa0:	bc30      	pop	{r4, r5}
 8006aa2:	4770      	bx	lr

08006aa4 <R3_2_IsOverCurrentOccurred>:
{
 8006aa4:	4603      	mov	r3, r0
  if (pHandle->OverCurrentFlag == true )
 8006aa6:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
 8006aaa:	b118      	cbz	r0, 8006ab4 <R3_2_IsOverCurrentOccurred+0x10>
    pHandle->OverCurrentFlag = false;
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    retVal = MC_BREAK_IN;
 8006ab2:	2040      	movs	r0, #64	; 0x40
}
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop

08006ab8 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8006ab8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
{
 8006abc:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 8006abe:	2900      	cmp	r1, #0
 8006ac0:	d135      	bne.n	8006b2e <R3_2_RLDetectionModeEnable+0x76>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ac2:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
 8006ac6:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006ace:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006ad2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006ad4:	6a1a      	ldr	r2, [r3, #32]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006adc:	6a1a      	ldr	r2, [r3, #32]
 8006ade:	f022 0204 	bic.w	r2, r2, #4
 8006ae2:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006ae4:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8006ae6:	f895 2097 	ldrb.w	r2, [r5, #151]	; 0x97
 8006aea:	2a01      	cmp	r2, #1
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006aec:	f103 0418 	add.w	r4, r3, #24
 8006af0:	d02a      	beq.n	8006b48 <R3_2_RLDetectionModeEnable+0x90>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006af2:	2a02      	cmp	r2, #2
 8006af4:	d10d      	bne.n	8006b12 <R3_2_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006af6:	699a      	ldr	r2, [r3, #24]
 8006af8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b00:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	f042 0210 	orr.w	r2, r2, #16
 8006b08:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b10:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b12:	6862      	ldr	r2, [r4, #4]
 8006b14:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006b18:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8006b1c:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b1e:	6a1a      	ldr	r2, [r3, #32]
 8006b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b24:	621a      	str	r2, [r3, #32]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2c:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8006b2e:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <R3_2_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8006b30:	490e      	ldr	r1, [pc, #56]	; (8006b6c <R3_2_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8006b32:	4a0f      	ldr	r2, [pc, #60]	; (8006b70 <R3_2_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8006b34:	4c0f      	ldr	r4, [pc, #60]	; (8006b74 <R3_2_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8006b36:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8006b38:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8006b3a:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8006b3c:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006b40:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8006b42:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8006b46:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006b4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b52:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b54:	6a1a      	ldr	r2, [r3, #32]
 8006b56:	f022 0210 	bic.w	r2, r2, #16
 8006b5a:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006b5c:	6a1a      	ldr	r2, [r3, #32]
 8006b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b62:	621a      	str	r2, [r3, #32]
}
 8006b64:	e7d5      	b.n	8006b12 <R3_2_RLDetectionModeEnable+0x5a>
 8006b66:	bf00      	nop
 8006b68:	08006651 	.word	0x08006651
 8006b6c:	08006699 	.word	0x08006699
 8006b70:	08006549 	.word	0x08006549
 8006b74:	080065fd 	.word	0x080065fd

08006b78 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8006b78:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d03a      	beq.n	8006bf6 <R3_2_RLDetectionModeDisable+0x7e>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006b80:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8006b84:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006b8c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
{
 8006b90:	b410      	push	{r4}
 8006b92:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b94:	6a1a      	ldr	r2, [r3, #32]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8006b9c:	f891 2097 	ldrb.w	r2, [r1, #151]	; 0x97
 8006ba0:	2a01      	cmp	r2, #1
 8006ba2:	d029      	beq.n	8006bf8 <R3_2_RLDetectionModeDisable+0x80>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006ba4:	2a02      	cmp	r2, #2
 8006ba6:	d04d      	beq.n	8006c44 <R3_2_RLDetectionModeDisable+0xcc>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8006ba8:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8006bac:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006bae:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bb0:	6999      	ldr	r1, [r3, #24]
 8006bb2:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8006bb6:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8006bba:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006bbc:	6a19      	ldr	r1, [r3, #32]
 8006bbe:	f041 0110 	orr.w	r1, r1, #16
 8006bc2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bc6:	69d9      	ldr	r1, [r3, #28]
 8006bc8:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8006bcc:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8006bd0:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006bd2:	6a19      	ldr	r1, [r3, #32]
 8006bd4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006bd8:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8006bda:	492d      	ldr	r1, [pc, #180]	; (8006c90 <R3_2_RLDetectionModeDisable+0x118>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006bdc:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8006bde:	4a2d      	ldr	r2, [pc, #180]	; (8006c94 <R3_2_RLDetectionModeDisable+0x11c>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8006be0:	6041      	str	r1, [r0, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8006be2:	492d      	ldr	r1, [pc, #180]	; (8006c98 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8006be4:	4c2d      	ldr	r4, [pc, #180]	; (8006c9c <R3_2_RLDetectionModeDisable+0x124>)
 8006be6:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8006be8:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8006bea:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006bee:	bc10      	pop	{r4}
    pHandle->_Super.RLDetectionMode = false;
 8006bf0:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8006bf4:	4770      	bx	lr
 8006bf6:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8006bf8:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8006bfa:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8006bfe:	f041 0104 	orr.w	r1, r1, #4
 8006c02:	0852      	lsrs	r2, r2, #1
 8006c04:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c06:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c08:	6999      	ldr	r1, [r3, #24]
 8006c0a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8006c0e:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8006c12:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006c14:	6a19      	ldr	r1, [r3, #32]
 8006c16:	f041 0110 	orr.w	r1, r1, #16
 8006c1a:	6219      	str	r1, [r3, #32]
 8006c1c:	6a19      	ldr	r1, [r3, #32]
 8006c1e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006c22:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c26:	69d9      	ldr	r1, [r3, #28]
 8006c28:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8006c2c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8006c30:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006c32:	6a19      	ldr	r1, [r3, #32]
 8006c34:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006c38:	6219      	str	r1, [r3, #32]
 8006c3a:	6a19      	ldr	r1, [r3, #32]
 8006c3c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006c40:	6219      	str	r1, [r3, #32]
}
 8006c42:	e7ca      	b.n	8006bda <R3_2_RLDetectionModeDisable+0x62>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006c44:	6a19      	ldr	r1, [r3, #32]
 8006c46:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8006c4a:	f021 0104 	bic.w	r1, r1, #4
 8006c4e:	0852      	lsrs	r2, r2, #1
 8006c50:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c52:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c54:	6999      	ldr	r1, [r3, #24]
 8006c56:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8006c5a:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8006c5e:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006c60:	6a19      	ldr	r1, [r3, #32]
 8006c62:	f041 0110 	orr.w	r1, r1, #16
 8006c66:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006c68:	6a19      	ldr	r1, [r3, #32]
 8006c6a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006c6e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c72:	69d9      	ldr	r1, [r3, #28]
 8006c74:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8006c78:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8006c7c:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006c7e:	6a19      	ldr	r1, [r3, #32]
 8006c80:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006c84:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006c86:	6a19      	ldr	r1, [r3, #32]
 8006c88:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006c8c:	6219      	str	r1, [r3, #32]
}
 8006c8e:	e7a4      	b.n	8006bda <R3_2_RLDetectionModeDisable+0x62>
 8006c90:	08006249 	.word	0x08006249
 8006c94:	08006549 	.word	0x08006549
 8006c98:	080064b5 	.word	0x080064b5
 8006c9c:	08006461 	.word	0x08006461

08006ca0 <R3_2_RLDetectionModeSetDuty>:
{
 8006ca0:	4603      	mov	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ca2:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006ca6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
{
 8006caa:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006cac:	fb02 f101 	mul.w	r1, r2, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006cb0:	6884      	ldr	r4, [r0, #8]
  if ( pHandle->_Super.SWerror == 1u )
 8006cb2:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006cb6:	0c09      	lsrs	r1, r1, #16
  pHdl->Sector = SECTOR_4;
 8006cb8:	2203      	movs	r2, #3
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8006cba:	8759      	strh	r1, [r3, #58]	; 0x3a
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006cbc:	6361      	str	r1, [r4, #52]	; 0x34
  pHdl->Sector = SECTOR_4;
 8006cbe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006cc2:	6a22      	ldr	r2, [r4, #32]
}
 8006cc4:	bc10      	pop	{r4}
  if ( pHandle->_Super.SWerror == 1u )
 8006cc6:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8006cc8:	bf0a      	itet	eq
 8006cca:	2200      	moveq	r2, #0
    hAux = MC_FOC_DURATION;
 8006ccc:	f3c2 3000 	ubfxne	r0, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8006cd0:	f8a3 2040 	strheq.w	r2, [r3, #64]	; 0x40
}
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop

08006cd8 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006cd8:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8006cdc:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006cde:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006ce0:	4494      	add	ip, r2
{
 8006ce2:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006ce4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006ce8:	b14b      	cbz	r3, 8006cfe <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 8006cea:	6a04      	ldr	r4, [r0, #32]
 8006cec:	2300      	movs	r3, #0
 8006cee:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006cf0:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8006cf2:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006cf6:	8b01      	ldrh	r1, [r0, #24]
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	4291      	cmp	r1, r2
 8006cfc:	d8f7      	bhi.n	8006cee <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f36c 030f 	bfi	r3, ip, #0, #16
 8006d04:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8006d08:	2200      	movs	r2, #0
}
 8006d0a:	bc10      	pop	{r4}
  pHandle->_Super.LatestConv = aux;
 8006d0c:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8006d0e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8006d12:	4770      	bx	lr

08006d14 <RVBS_Init>:
{
 8006d14:	b510      	push	{r4, lr}
 8006d16:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006d18:	300c      	adds	r0, #12
 8006d1a:	f7fc f8bb 	bl	8002e94 <RCM_RegisterRegConv>
 8006d1e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8006d22:	4620      	mov	r0, r4
 8006d24:	f7ff ffd8 	bl	8006cd8 <RVBS_Clear>
}
 8006d28:	bd10      	pop	{r4, pc}
 8006d2a:	bf00      	nop

08006d2c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8006d2c:	88c3      	ldrh	r3, [r0, #6]
 8006d2e:	8b42      	ldrh	r2, [r0, #26]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d305      	bcc.n	8006d40 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8006d34:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8006d36:	4298      	cmp	r0, r3
 8006d38:	bf8c      	ite	hi
 8006d3a:	2004      	movhi	r0, #4
 8006d3c:	2000      	movls	r0, #0
 8006d3e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8006d40:	2002      	movs	r0, #2
  }
  return fault;
}
 8006d42:	4770      	bx	lr

08006d44 <RVBS_CalcAvVbus>:
{
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006d48:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006d4c:	f7fc f97e 	bl	800304c <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8006d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d54:	4298      	cmp	r0, r3
 8006d56:	d01b      	beq.n	8006d90 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8006d58:	6a26      	ldr	r6, [r4, #32]
 8006d5a:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 8006d5e:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006d62:	8b25      	ldrh	r5, [r4, #24]
 8006d64:	b1cd      	cbz	r5, 8006d9a <RVBS_CalcAvVbus+0x56>
 8006d66:	2300      	movs	r3, #0
    wtemp = 0;
 8006d68:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8006d6a:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006d6e:	3301      	adds	r3, #1
 8006d70:	b2d9      	uxtb	r1, r3
 8006d72:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 8006d74:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006d76:	460b      	mov	r3, r1
 8006d78:	d3f7      	bcc.n	8006d6a <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8006d7a:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006d7e:	1e6b      	subs	r3, r5, #1
 8006d80:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8006d82:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006d84:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006d86:	da0a      	bge.n	8006d9e <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8006d88:	f10e 0e01 	add.w	lr, lr, #1
 8006d8c:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7ff ffcb 	bl	8006d2c <RVBS_CheckFaultState>
 8006d96:	8120      	strh	r0, [r4, #8]
}
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006d9a:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8006d9c:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006da4:	4620      	mov	r0, r4
 8006da6:	f7ff ffc1 	bl	8006d2c <RVBS_CheckFaultState>
 8006daa:	8120      	strh	r0, [r4, #8]
}
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
 8006dae:	bf00      	nop

08006db0 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8006db0:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8006db2:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8006db4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8006db8:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8006dbc:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8006dbe:	4770      	bx	lr

08006dc0 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006dc0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop

08006dc8 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006dc8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop

08006dd0 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006dd0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop

08006dd8 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006dd8:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006ddc:	8a81      	ldrh	r1, [r0, #20]
{
 8006dde:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 8006de0:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8006de2:	bfb8      	it	lt
 8006de4:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006de6:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006dea:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006dee:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8006df0:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006df2:	459e      	cmp	lr, r3
 8006df4:	d819      	bhi.n	8006e2a <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006df6:	4299      	cmp	r1, r3
 8006df8:	bf2c      	ite	cs
 8006dfa:	2300      	movcs	r3, #0
 8006dfc:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8006dfe:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006e02:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8006e06:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8006e08:	bfb8      	it	lt
 8006e0a:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8006e0c:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006e0e:	458e      	cmp	lr, r1
 8006e10:	d300      	bcc.n	8006e14 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006e12:	b163      	cbz	r3, 8006e2e <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006e14:	4594      	cmp	ip, r2
 8006e16:	d901      	bls.n	8006e1c <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 8006e18:	3201      	adds	r2, #1
 8006e1a:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006e1c:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8006e1e:	ebb2 000c 	subs.w	r0, r2, ip
 8006e22:	bf18      	it	ne
 8006e24:	2001      	movne	r0, #1
 8006e26:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e7e7      	b.n	8006dfe <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 8006e2e:	4594      	cmp	ip, r2
 8006e30:	bf88      	it	hi
 8006e32:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006e34:	7002      	strb	r2, [r0, #0]
}
 8006e36:	ebb2 000c 	subs.w	r0, r2, ip
 8006e3a:	bf18      	it	ne
 8006e3c:	2001      	movne	r0, #1
 8006e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e42:	bf00      	nop

08006e44 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8006e44:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006e48:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8006e4c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006e50:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8006e54:	b200      	sxth	r0, r0
 8006e56:	4770      	bx	lr

08006e58 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006e58:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 8006e5c:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006e5e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 8006e62:	6142      	str	r2, [r0, #20]
{
 8006e64:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8006e66:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8006e6a:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8006e6c:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006e6e:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006e72:	0409      	lsls	r1, r1, #16
 8006e74:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8006e78:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8006e7a:	bc10      	pop	{r4}
  pHandle->RampRemainingStep = 0u;
 8006e7c:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006e7e:	6183      	str	r3, [r0, #24]
}
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop

08006e84 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8006e84:	6940      	ldr	r0, [r0, #20]
 8006e86:	4770      	bx	lr

08006e88 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006e88:	7803      	ldrb	r3, [r0, #0]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d000      	beq.n	8006e90 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8006e8e:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8006e90:	6900      	ldr	r0, [r0, #16]
 8006e92:	2100      	movs	r1, #0
 8006e94:	f7ff b8d2 	b.w	800603c <PID_SetIntegralTerm>

08006e98 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8006e98:	6840      	ldr	r0, [r0, #4]
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	bfbc      	itt	lt
 8006e9e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006ea2:	30ff      	addlt	r0, #255	; 0xff
}
 8006ea4:	1400      	asrs	r0, r0, #16
 8006ea6:	4770      	bx	lr

08006ea8 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006ea8:	6880      	ldr	r0, [r0, #8]
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	bfbc      	itt	lt
 8006eae:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006eb2:	30ff      	addlt	r0, #255	; 0xff
}
 8006eb4:	1400      	asrs	r0, r0, #16
 8006eb6:	4770      	bx	lr

08006eb8 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006eb8:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8006eba:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006ebc:	60c3      	str	r3, [r0, #12]
}
 8006ebe:	4770      	bx	lr

08006ec0 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8006ec0:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006ec2:	7803      	ldrb	r3, [r0, #0]
{
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006eca:	b323      	cbz	r3, 8006f16 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006ecc:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006ece:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	bfbc      	itt	lt
 8006ed4:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006ed8:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006eda:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006edc:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006ee0:	dd01      	ble.n	8006ee6 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8006ee2:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006ee4:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8006ee6:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8006eea:	428b      	cmp	r3, r1
 8006eec:	dcf9      	bgt.n	8006ee2 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8006eee:	8c23      	ldrh	r3, [r4, #32]
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	da03      	bge.n	8006efc <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006ef4:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006ef8:	428b      	cmp	r3, r1
 8006efa:	dbf2      	blt.n	8006ee2 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8006efc:	b9ae      	cbnz	r6, 8006f2a <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006efe:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006f00:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006f02:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8006f04:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006f08:	bf0c      	ite	eq
 8006f0a:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006f0c:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8006f0e:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8006f10:	61a3      	str	r3, [r4, #24]
 8006f12:	2001      	movs	r0, #1
}
 8006f14:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8006f16:	f7ff ffc7 	bl	8006ea8 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006f1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006f1c:	429d      	cmp	r5, r3
 8006f1e:	dce0      	bgt.n	8006ee2 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006f20:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8006f24:	42ab      	cmp	r3, r5
 8006f26:	dcdc      	bgt.n	8006ee2 <STC_ExecRamp+0x22>
 8006f28:	e7e8      	b.n	8006efc <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006f2a:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 8006f2c:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006f2e:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8006f32:	4e06      	ldr	r6, [pc, #24]	; (8006f4c <STC_ExecRamp+0x8c>)
 8006f34:	fba6 2303 	umull	r2, r3, r6, r3
 8006f38:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8006f3a:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006f3c:	1a28      	subs	r0, r5, r0
 8006f3e:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8006f40:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006f42:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 8006f46:	61a0      	str	r0, [r4, #24]
 8006f48:	2001      	movs	r0, #1
}
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	10624dd3 	.word	0x10624dd3

08006f50 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006f54:	6183      	str	r3, [r0, #24]
}
 8006f56:	4770      	bx	lr

08006f58 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006f58:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8006f5a:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006f5e:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006f60:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	bf08      	it	eq
 8006f66:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8006f68:	2b01      	cmp	r3, #1
{
 8006f6a:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8006f6c:	d90c      	bls.n	8006f88 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006f6e:	6981      	ldr	r1, [r0, #24]
 8006f70:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006f72:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006f74:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8006f76:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006f78:	4630      	mov	r0, r6
 8006f7a:	db09      	blt.n	8006f90 <STC_CalcTorqueReference+0x38>
 8006f7c:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006f7e:	2a01      	cmp	r2, #1
 8006f80:	d00a      	beq.n	8006f98 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8006f82:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006f84:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006f88:	d012      	beq.n	8006fb0 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006f8a:	2e00      	cmp	r6, #0
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	daf5      	bge.n	8006f7c <STC_CalcTorqueReference+0x24>
 8006f90:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8006f94:	30ff      	adds	r0, #255	; 0xff
 8006f96:	e7f1      	b.n	8006f7c <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8006f98:	6960      	ldr	r0, [r4, #20]
 8006f9a:	f7ff ff15 	bl	8006dc8 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8006f9e:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006fa0:	b209      	sxth	r1, r1
 8006fa2:	6920      	ldr	r0, [r4, #16]
 8006fa4:	f7ff f882 	bl	80060ac <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006fa8:	0403      	lsls	r3, r0, #16
 8006faa:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006fb0:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006fb4:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006fb6:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006fb8:	60c3      	str	r3, [r0, #12]
 8006fba:	e7e0      	b.n	8006f7e <STC_CalcTorqueReference+0x26>

08006fbc <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8006fbc:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop

08006fc4 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006fc4:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8006fc8:	2200      	movs	r2, #0
 8006fca:	b299      	uxth	r1, r3
 8006fcc:	f361 020f 	bfi	r2, r1, #0, #16
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006fd6:	b082      	sub	sp, #8
}
 8006fd8:	4610      	mov	r0, r2
 8006fda:	b002      	add	sp, #8
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop

08006fe0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006fe4:	6940      	ldr	r0, [r0, #20]
 8006fe6:	f7ff feef 	bl	8006dc8 <SPD_GetAvrgMecSpeedUnit>
 8006fea:	0400      	lsls	r0, r0, #16
 8006fec:	6060      	str	r0, [r4, #4]
}
 8006fee:	bd10      	pop	{r4, pc}

08006ff0 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006ff4:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop

08006ffc <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8006ffc:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006ffe:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8007000:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 8007004:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007006:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 8007008:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800700a:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800700e:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007012:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8007014:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007016:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800701a:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 800701e:	d007      	beq.n	8007030 <STM_FaultProcessing+0x34>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8007020:	b90a      	cbnz	r2, 8007026 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8007022:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 8007026:	200a      	movs	r0, #10
 8007028:	f88c 0000 	strb.w	r0, [ip]
}
 800702c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8007030:	2a00      	cmp	r2, #0
 8007032:	d1f6      	bne.n	8007022 <STM_FaultProcessing+0x26>
      pHandle->bState = FAULT_OVER;
 8007034:	200b      	movs	r0, #11
 8007036:	f88c 0000 	strb.w	r0, [ip]
}
 800703a:	f85d fb04 	ldr.w	pc, [sp], #4
 800703e:	bf00      	nop

08007040 <STM_NextState>:
{
 8007040:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8007042:	7803      	ldrb	r3, [r0, #0]
 8007044:	2b14      	cmp	r3, #20
 8007046:	d810      	bhi.n	800706a <STM_NextState+0x2a>
 8007048:	e8df f003 	tbb	[pc, r3]
 800704c:	200d3457 	.word	0x200d3457
 8007050:	500d532a 	.word	0x500d532a
 8007054:	0f0f484d 	.word	0x0f0f484d
 8007058:	455e0b1b 	.word	0x455e0b1b
 800705c:	3b3f6342 	.word	0x3b3f6342
 8007060:	31          	.byte	0x31
 8007061:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8007062:	290e      	cmp	r1, #14
 8007064:	d00f      	beq.n	8007086 <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 8007066:	2907      	cmp	r1, #7
 8007068:	d00d      	beq.n	8007086 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800706a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800706e:	2b01      	cmp	r3, #1
 8007070:	d014      	beq.n	800709c <STM_NextState+0x5c>
 8007072:	2907      	cmp	r1, #7
 8007074:	d012      	beq.n	800709c <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8007076:	2200      	movs	r2, #0
 8007078:	2180      	movs	r1, #128	; 0x80
 800707a:	f7ff ffbf 	bl	8006ffc <STM_FaultProcessing>
 800707e:	2000      	movs	r0, #0
}
 8007080:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8007082:	2900      	cmp	r1, #0
 8007084:	d1f1      	bne.n	800706a <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8007086:	7001      	strb	r1, [r0, #0]
 8007088:	2001      	movs	r0, #1
}
 800708a:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800708c:	2911      	cmp	r1, #17
 800708e:	d8f2      	bhi.n	8007076 <STM_NextState+0x36>
 8007090:	4b23      	ldr	r3, [pc, #140]	; (8007120 <STM_NextState+0xe0>)
 8007092:	40cb      	lsrs	r3, r1
 8007094:	07da      	lsls	r2, r3, #31
 8007096:	d4f6      	bmi.n	8007086 <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007098:	2903      	cmp	r1, #3
 800709a:	d1ec      	bne.n	8007076 <STM_NextState+0x36>
 800709c:	2000      	movs	r0, #0
}
 800709e:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80070a0:	2913      	cmp	r1, #19
 80070a2:	d0f0      	beq.n	8007086 <STM_NextState+0x46>
 80070a4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80070a8:	2b05      	cmp	r3, #5
 80070aa:	d1e0      	bne.n	800706e <STM_NextState+0x2e>
 80070ac:	e7eb      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 80070ae:	2912      	cmp	r1, #18
 80070b0:	d1d9      	bne.n	8007066 <STM_NextState+0x26>
 80070b2:	e7e8      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80070b4:	2907      	cmp	r1, #7
 80070b6:	d0e6      	beq.n	8007086 <STM_NextState+0x46>
 80070b8:	f1a1 030d 	sub.w	r3, r1, #13
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d8d4      	bhi.n	800706a <STM_NextState+0x2a>
 80070c0:	e7e1      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80070c2:	1f0b      	subs	r3, r1, #4
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d8ce      	bhi.n	8007066 <STM_NextState+0x26>
 80070c8:	e7dd      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 80070ca:	2904      	cmp	r1, #4
 80070cc:	d1cb      	bne.n	8007066 <STM_NextState+0x26>
 80070ce:	e7da      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80070d0:	2911      	cmp	r1, #17
 80070d2:	d1c8      	bne.n	8007066 <STM_NextState+0x26>
 80070d4:	e7d7      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 80070d6:	2902      	cmp	r1, #2
 80070d8:	d1c5      	bne.n	8007066 <STM_NextState+0x26>
 80070da:	e7d4      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80070dc:	2900      	cmp	r1, #0
 80070de:	d0d2      	beq.n	8007086 <STM_NextState+0x46>
 80070e0:	290c      	cmp	r1, #12
 80070e2:	d1c2      	bne.n	800706a <STM_NextState+0x2a>
 80070e4:	e7cf      	b.n	8007086 <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 80070e6:	2909      	cmp	r1, #9
 80070e8:	d1bf      	bne.n	800706a <STM_NextState+0x2a>
 80070ea:	e7cc      	b.n	8007086 <STM_NextState+0x46>
      if ( bState == STOP )
 80070ec:	2908      	cmp	r1, #8
 80070ee:	d1bc      	bne.n	800706a <STM_NextState+0x2a>
 80070f0:	e7c9      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80070f2:	1f8b      	subs	r3, r1, #6
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d8b8      	bhi.n	800706a <STM_NextState+0x2a>
 80070f8:	e7c5      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80070fa:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d0c1      	beq.n	8007086 <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 8007102:	290c      	cmp	r1, #12
 8007104:	d1b5      	bne.n	8007072 <STM_NextState+0x32>
 8007106:	e7be      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8007108:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800710c:	2b07      	cmp	r3, #7
 800710e:	d1ac      	bne.n	800706a <STM_NextState+0x2a>
 8007110:	e7b9      	b.n	8007086 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8007112:	2914      	cmp	r1, #20
 8007114:	d8a9      	bhi.n	800706a <STM_NextState+0x2a>
 8007116:	4b03      	ldr	r3, [pc, #12]	; (8007124 <STM_NextState+0xe4>)
 8007118:	40cb      	lsrs	r3, r1
 800711a:	07db      	lsls	r3, r3, #31
 800711c:	d4b3      	bmi.n	8007086 <STM_NextState+0x46>
 800711e:	e7a4      	b.n	800706a <STM_NextState+0x2a>
 8007120:	00030092 	.word	0x00030092
 8007124:	00140080 	.word	0x00140080

08007128 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8007128:	7800      	ldrb	r0, [r0, #0]
 800712a:	4770      	bx	lr

0800712c <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800712c:	7803      	ldrb	r3, [r0, #0]
 800712e:	2b0b      	cmp	r3, #11
 8007130:	d001      	beq.n	8007136 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8007132:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8007134:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8007136:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007138:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800713a:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800713c:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800713e:	2001      	movs	r0, #1
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop

08007144 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8007144:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8007146:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8007148:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop

08007150 <__errno>:
 8007150:	4b01      	ldr	r3, [pc, #4]	; (8007158 <__errno+0x8>)
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	2000053c 	.word	0x2000053c

0800715c <_fwrite_r>:
 800715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	9c08      	ldr	r4, [sp, #32]
 8007162:	468a      	mov	sl, r1
 8007164:	4690      	mov	r8, r2
 8007166:	fb02 f903 	mul.w	r9, r2, r3
 800716a:	4605      	mov	r5, r0
 800716c:	b118      	cbz	r0, 8007176 <_fwrite_r+0x1a>
 800716e:	6983      	ldr	r3, [r0, #24]
 8007170:	b90b      	cbnz	r3, 8007176 <_fwrite_r+0x1a>
 8007172:	f000 fa75 	bl	8007660 <__sinit>
 8007176:	4b26      	ldr	r3, [pc, #152]	; (8007210 <_fwrite_r+0xb4>)
 8007178:	429c      	cmp	r4, r3
 800717a:	d123      	bne.n	80071c4 <_fwrite_r+0x68>
 800717c:	686c      	ldr	r4, [r5, #4]
 800717e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007180:	07de      	lsls	r6, r3, #31
 8007182:	d405      	bmi.n	8007190 <_fwrite_r+0x34>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	0598      	lsls	r0, r3, #22
 8007188:	d402      	bmi.n	8007190 <_fwrite_r+0x34>
 800718a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718c:	f000 f879 	bl	8007282 <__retarget_lock_acquire_recursive>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	0719      	lsls	r1, r3, #28
 8007194:	d520      	bpl.n	80071d8 <_fwrite_r+0x7c>
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	b1f3      	cbz	r3, 80071d8 <_fwrite_r+0x7c>
 800719a:	2600      	movs	r6, #0
 800719c:	454e      	cmp	r6, r9
 800719e:	d029      	beq.n	80071f4 <_fwrite_r+0x98>
 80071a0:	68a7      	ldr	r7, [r4, #8]
 80071a2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80071a6:	3f01      	subs	r7, #1
 80071a8:	2f00      	cmp	r7, #0
 80071aa:	60a7      	str	r7, [r4, #8]
 80071ac:	da04      	bge.n	80071b8 <_fwrite_r+0x5c>
 80071ae:	69a3      	ldr	r3, [r4, #24]
 80071b0:	429f      	cmp	r7, r3
 80071b2:	db19      	blt.n	80071e8 <_fwrite_r+0x8c>
 80071b4:	290a      	cmp	r1, #10
 80071b6:	d017      	beq.n	80071e8 <_fwrite_r+0x8c>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	6022      	str	r2, [r4, #0]
 80071be:	7019      	strb	r1, [r3, #0]
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7eb      	b.n	800719c <_fwrite_r+0x40>
 80071c4:	4b13      	ldr	r3, [pc, #76]	; (8007214 <_fwrite_r+0xb8>)
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d101      	bne.n	80071ce <_fwrite_r+0x72>
 80071ca:	68ac      	ldr	r4, [r5, #8]
 80071cc:	e7d7      	b.n	800717e <_fwrite_r+0x22>
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <_fwrite_r+0xbc>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	bf08      	it	eq
 80071d4:	68ec      	ldreq	r4, [r5, #12]
 80071d6:	e7d2      	b.n	800717e <_fwrite_r+0x22>
 80071d8:	4621      	mov	r1, r4
 80071da:	4628      	mov	r0, r5
 80071dc:	f000 f8bc 	bl	8007358 <__swsetup_r>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d0da      	beq.n	800719a <_fwrite_r+0x3e>
 80071e4:	2600      	movs	r6, #0
 80071e6:	e005      	b.n	80071f4 <_fwrite_r+0x98>
 80071e8:	4622      	mov	r2, r4
 80071ea:	4628      	mov	r0, r5
 80071ec:	f000 f862 	bl	80072b4 <__swbuf_r>
 80071f0:	3001      	adds	r0, #1
 80071f2:	d1e5      	bne.n	80071c0 <_fwrite_r+0x64>
 80071f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071f6:	07da      	lsls	r2, r3, #31
 80071f8:	d405      	bmi.n	8007206 <_fwrite_r+0xaa>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	059b      	lsls	r3, r3, #22
 80071fe:	d402      	bmi.n	8007206 <_fwrite_r+0xaa>
 8007200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007202:	f000 f83f 	bl	8007284 <__retarget_lock_release_recursive>
 8007206:	fbb6 f0f8 	udiv	r0, r6, r8
 800720a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720e:	bf00      	nop
 8007210:	08008090 	.word	0x08008090
 8007214:	080080b0 	.word	0x080080b0
 8007218:	08008070 	.word	0x08008070

0800721c <fwrite>:
 800721c:	b507      	push	{r0, r1, r2, lr}
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4613      	mov	r3, r2
 8007222:	460a      	mov	r2, r1
 8007224:	4601      	mov	r1, r0
 8007226:	4803      	ldr	r0, [pc, #12]	; (8007234 <fwrite+0x18>)
 8007228:	6800      	ldr	r0, [r0, #0]
 800722a:	f7ff ff97 	bl	800715c <_fwrite_r>
 800722e:	b003      	add	sp, #12
 8007230:	f85d fb04 	ldr.w	pc, [sp], #4
 8007234:	2000053c 	.word	0x2000053c

08007238 <__libc_init_array>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	4d0d      	ldr	r5, [pc, #52]	; (8007270 <__libc_init_array+0x38>)
 800723c:	4c0d      	ldr	r4, [pc, #52]	; (8007274 <__libc_init_array+0x3c>)
 800723e:	1b64      	subs	r4, r4, r5
 8007240:	10a4      	asrs	r4, r4, #2
 8007242:	2600      	movs	r6, #0
 8007244:	42a6      	cmp	r6, r4
 8007246:	d109      	bne.n	800725c <__libc_init_array+0x24>
 8007248:	4d0b      	ldr	r5, [pc, #44]	; (8007278 <__libc_init_array+0x40>)
 800724a:	4c0c      	ldr	r4, [pc, #48]	; (800727c <__libc_init_array+0x44>)
 800724c:	f000 fcb0 	bl	8007bb0 <_init>
 8007250:	1b64      	subs	r4, r4, r5
 8007252:	10a4      	asrs	r4, r4, #2
 8007254:	2600      	movs	r6, #0
 8007256:	42a6      	cmp	r6, r4
 8007258:	d105      	bne.n	8007266 <__libc_init_array+0x2e>
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007260:	4798      	blx	r3
 8007262:	3601      	adds	r6, #1
 8007264:	e7ee      	b.n	8007244 <__libc_init_array+0xc>
 8007266:	f855 3b04 	ldr.w	r3, [r5], #4
 800726a:	4798      	blx	r3
 800726c:	3601      	adds	r6, #1
 800726e:	e7f2      	b.n	8007256 <__libc_init_array+0x1e>
 8007270:	080080d8 	.word	0x080080d8
 8007274:	080080d8 	.word	0x080080d8
 8007278:	080080d8 	.word	0x080080d8
 800727c:	080080dc 	.word	0x080080dc

08007280 <__retarget_lock_init_recursive>:
 8007280:	4770      	bx	lr

08007282 <__retarget_lock_acquire_recursive>:
 8007282:	4770      	bx	lr

08007284 <__retarget_lock_release_recursive>:
 8007284:	4770      	bx	lr

08007286 <memcpy>:
 8007286:	440a      	add	r2, r1
 8007288:	4291      	cmp	r1, r2
 800728a:	f100 33ff 	add.w	r3, r0, #4294967295
 800728e:	d100      	bne.n	8007292 <memcpy+0xc>
 8007290:	4770      	bx	lr
 8007292:	b510      	push	{r4, lr}
 8007294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800729c:	4291      	cmp	r1, r2
 800729e:	d1f9      	bne.n	8007294 <memcpy+0xe>
 80072a0:	bd10      	pop	{r4, pc}

080072a2 <memset>:
 80072a2:	4402      	add	r2, r0
 80072a4:	4603      	mov	r3, r0
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d100      	bne.n	80072ac <memset+0xa>
 80072aa:	4770      	bx	lr
 80072ac:	f803 1b01 	strb.w	r1, [r3], #1
 80072b0:	e7f9      	b.n	80072a6 <memset+0x4>
	...

080072b4 <__swbuf_r>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	460e      	mov	r6, r1
 80072b8:	4614      	mov	r4, r2
 80072ba:	4605      	mov	r5, r0
 80072bc:	b118      	cbz	r0, 80072c6 <__swbuf_r+0x12>
 80072be:	6983      	ldr	r3, [r0, #24]
 80072c0:	b90b      	cbnz	r3, 80072c6 <__swbuf_r+0x12>
 80072c2:	f000 f9cd 	bl	8007660 <__sinit>
 80072c6:	4b21      	ldr	r3, [pc, #132]	; (800734c <__swbuf_r+0x98>)
 80072c8:	429c      	cmp	r4, r3
 80072ca:	d12b      	bne.n	8007324 <__swbuf_r+0x70>
 80072cc:	686c      	ldr	r4, [r5, #4]
 80072ce:	69a3      	ldr	r3, [r4, #24]
 80072d0:	60a3      	str	r3, [r4, #8]
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	071a      	lsls	r2, r3, #28
 80072d6:	d52f      	bpl.n	8007338 <__swbuf_r+0x84>
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	b36b      	cbz	r3, 8007338 <__swbuf_r+0x84>
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	6820      	ldr	r0, [r4, #0]
 80072e0:	1ac0      	subs	r0, r0, r3
 80072e2:	6963      	ldr	r3, [r4, #20]
 80072e4:	b2f6      	uxtb	r6, r6
 80072e6:	4283      	cmp	r3, r0
 80072e8:	4637      	mov	r7, r6
 80072ea:	dc04      	bgt.n	80072f6 <__swbuf_r+0x42>
 80072ec:	4621      	mov	r1, r4
 80072ee:	4628      	mov	r0, r5
 80072f0:	f000 f922 	bl	8007538 <_fflush_r>
 80072f4:	bb30      	cbnz	r0, 8007344 <__swbuf_r+0x90>
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	60a3      	str	r3, [r4, #8]
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	6022      	str	r2, [r4, #0]
 8007302:	701e      	strb	r6, [r3, #0]
 8007304:	6963      	ldr	r3, [r4, #20]
 8007306:	3001      	adds	r0, #1
 8007308:	4283      	cmp	r3, r0
 800730a:	d004      	beq.n	8007316 <__swbuf_r+0x62>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	07db      	lsls	r3, r3, #31
 8007310:	d506      	bpl.n	8007320 <__swbuf_r+0x6c>
 8007312:	2e0a      	cmp	r6, #10
 8007314:	d104      	bne.n	8007320 <__swbuf_r+0x6c>
 8007316:	4621      	mov	r1, r4
 8007318:	4628      	mov	r0, r5
 800731a:	f000 f90d 	bl	8007538 <_fflush_r>
 800731e:	b988      	cbnz	r0, 8007344 <__swbuf_r+0x90>
 8007320:	4638      	mov	r0, r7
 8007322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <__swbuf_r+0x9c>)
 8007326:	429c      	cmp	r4, r3
 8007328:	d101      	bne.n	800732e <__swbuf_r+0x7a>
 800732a:	68ac      	ldr	r4, [r5, #8]
 800732c:	e7cf      	b.n	80072ce <__swbuf_r+0x1a>
 800732e:	4b09      	ldr	r3, [pc, #36]	; (8007354 <__swbuf_r+0xa0>)
 8007330:	429c      	cmp	r4, r3
 8007332:	bf08      	it	eq
 8007334:	68ec      	ldreq	r4, [r5, #12]
 8007336:	e7ca      	b.n	80072ce <__swbuf_r+0x1a>
 8007338:	4621      	mov	r1, r4
 800733a:	4628      	mov	r0, r5
 800733c:	f000 f80c 	bl	8007358 <__swsetup_r>
 8007340:	2800      	cmp	r0, #0
 8007342:	d0cb      	beq.n	80072dc <__swbuf_r+0x28>
 8007344:	f04f 37ff 	mov.w	r7, #4294967295
 8007348:	e7ea      	b.n	8007320 <__swbuf_r+0x6c>
 800734a:	bf00      	nop
 800734c:	08008090 	.word	0x08008090
 8007350:	080080b0 	.word	0x080080b0
 8007354:	08008070 	.word	0x08008070

08007358 <__swsetup_r>:
 8007358:	4b32      	ldr	r3, [pc, #200]	; (8007424 <__swsetup_r+0xcc>)
 800735a:	b570      	push	{r4, r5, r6, lr}
 800735c:	681d      	ldr	r5, [r3, #0]
 800735e:	4606      	mov	r6, r0
 8007360:	460c      	mov	r4, r1
 8007362:	b125      	cbz	r5, 800736e <__swsetup_r+0x16>
 8007364:	69ab      	ldr	r3, [r5, #24]
 8007366:	b913      	cbnz	r3, 800736e <__swsetup_r+0x16>
 8007368:	4628      	mov	r0, r5
 800736a:	f000 f979 	bl	8007660 <__sinit>
 800736e:	4b2e      	ldr	r3, [pc, #184]	; (8007428 <__swsetup_r+0xd0>)
 8007370:	429c      	cmp	r4, r3
 8007372:	d10f      	bne.n	8007394 <__swsetup_r+0x3c>
 8007374:	686c      	ldr	r4, [r5, #4]
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800737c:	0719      	lsls	r1, r3, #28
 800737e:	d42c      	bmi.n	80073da <__swsetup_r+0x82>
 8007380:	06dd      	lsls	r5, r3, #27
 8007382:	d411      	bmi.n	80073a8 <__swsetup_r+0x50>
 8007384:	2309      	movs	r3, #9
 8007386:	6033      	str	r3, [r6, #0]
 8007388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	f04f 30ff 	mov.w	r0, #4294967295
 8007392:	e03e      	b.n	8007412 <__swsetup_r+0xba>
 8007394:	4b25      	ldr	r3, [pc, #148]	; (800742c <__swsetup_r+0xd4>)
 8007396:	429c      	cmp	r4, r3
 8007398:	d101      	bne.n	800739e <__swsetup_r+0x46>
 800739a:	68ac      	ldr	r4, [r5, #8]
 800739c:	e7eb      	b.n	8007376 <__swsetup_r+0x1e>
 800739e:	4b24      	ldr	r3, [pc, #144]	; (8007430 <__swsetup_r+0xd8>)
 80073a0:	429c      	cmp	r4, r3
 80073a2:	bf08      	it	eq
 80073a4:	68ec      	ldreq	r4, [r5, #12]
 80073a6:	e7e6      	b.n	8007376 <__swsetup_r+0x1e>
 80073a8:	0758      	lsls	r0, r3, #29
 80073aa:	d512      	bpl.n	80073d2 <__swsetup_r+0x7a>
 80073ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ae:	b141      	cbz	r1, 80073c2 <__swsetup_r+0x6a>
 80073b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b4:	4299      	cmp	r1, r3
 80073b6:	d002      	beq.n	80073be <__swsetup_r+0x66>
 80073b8:	4630      	mov	r0, r6
 80073ba:	f000 fa53 	bl	8007864 <_free_r>
 80073be:	2300      	movs	r3, #0
 80073c0:	6363      	str	r3, [r4, #52]	; 0x34
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	2300      	movs	r3, #0
 80073cc:	6063      	str	r3, [r4, #4]
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	f043 0308 	orr.w	r3, r3, #8
 80073d8:	81a3      	strh	r3, [r4, #12]
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	b94b      	cbnz	r3, 80073f2 <__swsetup_r+0x9a>
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e8:	d003      	beq.n	80073f2 <__swsetup_r+0x9a>
 80073ea:	4621      	mov	r1, r4
 80073ec:	4630      	mov	r0, r6
 80073ee:	f000 f9f9 	bl	80077e4 <__smakebuf_r>
 80073f2:	89a0      	ldrh	r0, [r4, #12]
 80073f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f8:	f010 0301 	ands.w	r3, r0, #1
 80073fc:	d00a      	beq.n	8007414 <__swsetup_r+0xbc>
 80073fe:	2300      	movs	r3, #0
 8007400:	60a3      	str	r3, [r4, #8]
 8007402:	6963      	ldr	r3, [r4, #20]
 8007404:	425b      	negs	r3, r3
 8007406:	61a3      	str	r3, [r4, #24]
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	b943      	cbnz	r3, 800741e <__swsetup_r+0xc6>
 800740c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007410:	d1ba      	bne.n	8007388 <__swsetup_r+0x30>
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	0781      	lsls	r1, r0, #30
 8007416:	bf58      	it	pl
 8007418:	6963      	ldrpl	r3, [r4, #20]
 800741a:	60a3      	str	r3, [r4, #8]
 800741c:	e7f4      	b.n	8007408 <__swsetup_r+0xb0>
 800741e:	2000      	movs	r0, #0
 8007420:	e7f7      	b.n	8007412 <__swsetup_r+0xba>
 8007422:	bf00      	nop
 8007424:	2000053c 	.word	0x2000053c
 8007428:	08008090 	.word	0x08008090
 800742c:	080080b0 	.word	0x080080b0
 8007430:	08008070 	.word	0x08008070

08007434 <__sflush_r>:
 8007434:	898a      	ldrh	r2, [r1, #12]
 8007436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007438:	4605      	mov	r5, r0
 800743a:	0710      	lsls	r0, r2, #28
 800743c:	460c      	mov	r4, r1
 800743e:	d457      	bmi.n	80074f0 <__sflush_r+0xbc>
 8007440:	684b      	ldr	r3, [r1, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	dc04      	bgt.n	8007450 <__sflush_r+0x1c>
 8007446:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	dc01      	bgt.n	8007450 <__sflush_r+0x1c>
 800744c:	2000      	movs	r0, #0
 800744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007452:	2e00      	cmp	r6, #0
 8007454:	d0fa      	beq.n	800744c <__sflush_r+0x18>
 8007456:	2300      	movs	r3, #0
 8007458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800745c:	682f      	ldr	r7, [r5, #0]
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	d032      	beq.n	80074c8 <__sflush_r+0x94>
 8007462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	075a      	lsls	r2, r3, #29
 8007468:	d505      	bpl.n	8007476 <__sflush_r+0x42>
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	1ac0      	subs	r0, r0, r3
 800746e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007470:	b10b      	cbz	r3, 8007476 <__sflush_r+0x42>
 8007472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007474:	1ac0      	subs	r0, r0, r3
 8007476:	2300      	movs	r3, #0
 8007478:	4602      	mov	r2, r0
 800747a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800747c:	6a21      	ldr	r1, [r4, #32]
 800747e:	4628      	mov	r0, r5
 8007480:	47b0      	blx	r6
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	d106      	bne.n	8007496 <__sflush_r+0x62>
 8007488:	6829      	ldr	r1, [r5, #0]
 800748a:	291d      	cmp	r1, #29
 800748c:	d82c      	bhi.n	80074e8 <__sflush_r+0xb4>
 800748e:	4a29      	ldr	r2, [pc, #164]	; (8007534 <__sflush_r+0x100>)
 8007490:	40ca      	lsrs	r2, r1
 8007492:	07d6      	lsls	r6, r2, #31
 8007494:	d528      	bpl.n	80074e8 <__sflush_r+0xb4>
 8007496:	2200      	movs	r2, #0
 8007498:	6062      	str	r2, [r4, #4]
 800749a:	04d9      	lsls	r1, r3, #19
 800749c:	6922      	ldr	r2, [r4, #16]
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	d504      	bpl.n	80074ac <__sflush_r+0x78>
 80074a2:	1c42      	adds	r2, r0, #1
 80074a4:	d101      	bne.n	80074aa <__sflush_r+0x76>
 80074a6:	682b      	ldr	r3, [r5, #0]
 80074a8:	b903      	cbnz	r3, 80074ac <__sflush_r+0x78>
 80074aa:	6560      	str	r0, [r4, #84]	; 0x54
 80074ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ae:	602f      	str	r7, [r5, #0]
 80074b0:	2900      	cmp	r1, #0
 80074b2:	d0cb      	beq.n	800744c <__sflush_r+0x18>
 80074b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074b8:	4299      	cmp	r1, r3
 80074ba:	d002      	beq.n	80074c2 <__sflush_r+0x8e>
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 f9d1 	bl	8007864 <_free_r>
 80074c2:	2000      	movs	r0, #0
 80074c4:	6360      	str	r0, [r4, #52]	; 0x34
 80074c6:	e7c2      	b.n	800744e <__sflush_r+0x1a>
 80074c8:	6a21      	ldr	r1, [r4, #32]
 80074ca:	2301      	movs	r3, #1
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b0      	blx	r6
 80074d0:	1c41      	adds	r1, r0, #1
 80074d2:	d1c7      	bne.n	8007464 <__sflush_r+0x30>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0c4      	beq.n	8007464 <__sflush_r+0x30>
 80074da:	2b1d      	cmp	r3, #29
 80074dc:	d001      	beq.n	80074e2 <__sflush_r+0xae>
 80074de:	2b16      	cmp	r3, #22
 80074e0:	d101      	bne.n	80074e6 <__sflush_r+0xb2>
 80074e2:	602f      	str	r7, [r5, #0]
 80074e4:	e7b2      	b.n	800744c <__sflush_r+0x18>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	e7ae      	b.n	800744e <__sflush_r+0x1a>
 80074f0:	690f      	ldr	r7, [r1, #16]
 80074f2:	2f00      	cmp	r7, #0
 80074f4:	d0aa      	beq.n	800744c <__sflush_r+0x18>
 80074f6:	0793      	lsls	r3, r2, #30
 80074f8:	680e      	ldr	r6, [r1, #0]
 80074fa:	bf08      	it	eq
 80074fc:	694b      	ldreq	r3, [r1, #20]
 80074fe:	600f      	str	r7, [r1, #0]
 8007500:	bf18      	it	ne
 8007502:	2300      	movne	r3, #0
 8007504:	1bf6      	subs	r6, r6, r7
 8007506:	608b      	str	r3, [r1, #8]
 8007508:	2e00      	cmp	r6, #0
 800750a:	dd9f      	ble.n	800744c <__sflush_r+0x18>
 800750c:	6a21      	ldr	r1, [r4, #32]
 800750e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007512:	4633      	mov	r3, r6
 8007514:	463a      	mov	r2, r7
 8007516:	4628      	mov	r0, r5
 8007518:	47e0      	blx	ip
 800751a:	2800      	cmp	r0, #0
 800751c:	dc06      	bgt.n	800752c <__sflush_r+0xf8>
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007524:	81a3      	strh	r3, [r4, #12]
 8007526:	f04f 30ff 	mov.w	r0, #4294967295
 800752a:	e790      	b.n	800744e <__sflush_r+0x1a>
 800752c:	4407      	add	r7, r0
 800752e:	1a36      	subs	r6, r6, r0
 8007530:	e7ea      	b.n	8007508 <__sflush_r+0xd4>
 8007532:	bf00      	nop
 8007534:	20400001 	.word	0x20400001

08007538 <_fflush_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	690b      	ldr	r3, [r1, #16]
 800753c:	4605      	mov	r5, r0
 800753e:	460c      	mov	r4, r1
 8007540:	b913      	cbnz	r3, 8007548 <_fflush_r+0x10>
 8007542:	2500      	movs	r5, #0
 8007544:	4628      	mov	r0, r5
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	b118      	cbz	r0, 8007552 <_fflush_r+0x1a>
 800754a:	6983      	ldr	r3, [r0, #24]
 800754c:	b90b      	cbnz	r3, 8007552 <_fflush_r+0x1a>
 800754e:	f000 f887 	bl	8007660 <__sinit>
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <_fflush_r+0x6c>)
 8007554:	429c      	cmp	r4, r3
 8007556:	d11b      	bne.n	8007590 <_fflush_r+0x58>
 8007558:	686c      	ldr	r4, [r5, #4]
 800755a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0ef      	beq.n	8007542 <_fflush_r+0xa>
 8007562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007564:	07d0      	lsls	r0, r2, #31
 8007566:	d404      	bmi.n	8007572 <_fflush_r+0x3a>
 8007568:	0599      	lsls	r1, r3, #22
 800756a:	d402      	bmi.n	8007572 <_fflush_r+0x3a>
 800756c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756e:	f7ff fe88 	bl	8007282 <__retarget_lock_acquire_recursive>
 8007572:	4628      	mov	r0, r5
 8007574:	4621      	mov	r1, r4
 8007576:	f7ff ff5d 	bl	8007434 <__sflush_r>
 800757a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800757c:	07da      	lsls	r2, r3, #31
 800757e:	4605      	mov	r5, r0
 8007580:	d4e0      	bmi.n	8007544 <_fflush_r+0xc>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	059b      	lsls	r3, r3, #22
 8007586:	d4dd      	bmi.n	8007544 <_fflush_r+0xc>
 8007588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800758a:	f7ff fe7b 	bl	8007284 <__retarget_lock_release_recursive>
 800758e:	e7d9      	b.n	8007544 <_fflush_r+0xc>
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <_fflush_r+0x70>)
 8007592:	429c      	cmp	r4, r3
 8007594:	d101      	bne.n	800759a <_fflush_r+0x62>
 8007596:	68ac      	ldr	r4, [r5, #8]
 8007598:	e7df      	b.n	800755a <_fflush_r+0x22>
 800759a:	4b04      	ldr	r3, [pc, #16]	; (80075ac <_fflush_r+0x74>)
 800759c:	429c      	cmp	r4, r3
 800759e:	bf08      	it	eq
 80075a0:	68ec      	ldreq	r4, [r5, #12]
 80075a2:	e7da      	b.n	800755a <_fflush_r+0x22>
 80075a4:	08008090 	.word	0x08008090
 80075a8:	080080b0 	.word	0x080080b0
 80075ac:	08008070 	.word	0x08008070

080075b0 <std>:
 80075b0:	2300      	movs	r3, #0
 80075b2:	b510      	push	{r4, lr}
 80075b4:	4604      	mov	r4, r0
 80075b6:	e9c0 3300 	strd	r3, r3, [r0]
 80075ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075be:	6083      	str	r3, [r0, #8]
 80075c0:	8181      	strh	r1, [r0, #12]
 80075c2:	6643      	str	r3, [r0, #100]	; 0x64
 80075c4:	81c2      	strh	r2, [r0, #14]
 80075c6:	6183      	str	r3, [r0, #24]
 80075c8:	4619      	mov	r1, r3
 80075ca:	2208      	movs	r2, #8
 80075cc:	305c      	adds	r0, #92	; 0x5c
 80075ce:	f7ff fe68 	bl	80072a2 <memset>
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <std+0x38>)
 80075d4:	6263      	str	r3, [r4, #36]	; 0x24
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <std+0x3c>)
 80075d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <std+0x40>)
 80075dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <std+0x44>)
 80075e0:	6224      	str	r4, [r4, #32]
 80075e2:	6323      	str	r3, [r4, #48]	; 0x30
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	bf00      	nop
 80075e8:	08007a41 	.word	0x08007a41
 80075ec:	08007a63 	.word	0x08007a63
 80075f0:	08007a9b 	.word	0x08007a9b
 80075f4:	08007abf 	.word	0x08007abf

080075f8 <_cleanup_r>:
 80075f8:	4901      	ldr	r1, [pc, #4]	; (8007600 <_cleanup_r+0x8>)
 80075fa:	f000 b8af 	b.w	800775c <_fwalk_reent>
 80075fe:	bf00      	nop
 8007600:	08007539 	.word	0x08007539

08007604 <__sfmoreglue>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	2268      	movs	r2, #104	; 0x68
 8007608:	1e4d      	subs	r5, r1, #1
 800760a:	4355      	muls	r5, r2
 800760c:	460e      	mov	r6, r1
 800760e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007612:	f000 f991 	bl	8007938 <_malloc_r>
 8007616:	4604      	mov	r4, r0
 8007618:	b140      	cbz	r0, 800762c <__sfmoreglue+0x28>
 800761a:	2100      	movs	r1, #0
 800761c:	e9c0 1600 	strd	r1, r6, [r0]
 8007620:	300c      	adds	r0, #12
 8007622:	60a0      	str	r0, [r4, #8]
 8007624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007628:	f7ff fe3b 	bl	80072a2 <memset>
 800762c:	4620      	mov	r0, r4
 800762e:	bd70      	pop	{r4, r5, r6, pc}

08007630 <__sfp_lock_acquire>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__sfp_lock_acquire+0x8>)
 8007632:	f7ff be26 	b.w	8007282 <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	20001b19 	.word	0x20001b19

0800763c <__sfp_lock_release>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__sfp_lock_release+0x8>)
 800763e:	f7ff be21 	b.w	8007284 <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	20001b19 	.word	0x20001b19

08007648 <__sinit_lock_acquire>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__sinit_lock_acquire+0x8>)
 800764a:	f7ff be1a 	b.w	8007282 <__retarget_lock_acquire_recursive>
 800764e:	bf00      	nop
 8007650:	20001b1a 	.word	0x20001b1a

08007654 <__sinit_lock_release>:
 8007654:	4801      	ldr	r0, [pc, #4]	; (800765c <__sinit_lock_release+0x8>)
 8007656:	f7ff be15 	b.w	8007284 <__retarget_lock_release_recursive>
 800765a:	bf00      	nop
 800765c:	20001b1a 	.word	0x20001b1a

08007660 <__sinit>:
 8007660:	b510      	push	{r4, lr}
 8007662:	4604      	mov	r4, r0
 8007664:	f7ff fff0 	bl	8007648 <__sinit_lock_acquire>
 8007668:	69a3      	ldr	r3, [r4, #24]
 800766a:	b11b      	cbz	r3, 8007674 <__sinit+0x14>
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	f7ff bff0 	b.w	8007654 <__sinit_lock_release>
 8007674:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007678:	6523      	str	r3, [r4, #80]	; 0x50
 800767a:	4b13      	ldr	r3, [pc, #76]	; (80076c8 <__sinit+0x68>)
 800767c:	4a13      	ldr	r2, [pc, #76]	; (80076cc <__sinit+0x6c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	62a2      	str	r2, [r4, #40]	; 0x28
 8007682:	42a3      	cmp	r3, r4
 8007684:	bf04      	itt	eq
 8007686:	2301      	moveq	r3, #1
 8007688:	61a3      	streq	r3, [r4, #24]
 800768a:	4620      	mov	r0, r4
 800768c:	f000 f820 	bl	80076d0 <__sfp>
 8007690:	6060      	str	r0, [r4, #4]
 8007692:	4620      	mov	r0, r4
 8007694:	f000 f81c 	bl	80076d0 <__sfp>
 8007698:	60a0      	str	r0, [r4, #8]
 800769a:	4620      	mov	r0, r4
 800769c:	f000 f818 	bl	80076d0 <__sfp>
 80076a0:	2200      	movs	r2, #0
 80076a2:	60e0      	str	r0, [r4, #12]
 80076a4:	2104      	movs	r1, #4
 80076a6:	6860      	ldr	r0, [r4, #4]
 80076a8:	f7ff ff82 	bl	80075b0 <std>
 80076ac:	68a0      	ldr	r0, [r4, #8]
 80076ae:	2201      	movs	r2, #1
 80076b0:	2109      	movs	r1, #9
 80076b2:	f7ff ff7d 	bl	80075b0 <std>
 80076b6:	68e0      	ldr	r0, [r4, #12]
 80076b8:	2202      	movs	r2, #2
 80076ba:	2112      	movs	r1, #18
 80076bc:	f7ff ff78 	bl	80075b0 <std>
 80076c0:	2301      	movs	r3, #1
 80076c2:	61a3      	str	r3, [r4, #24]
 80076c4:	e7d2      	b.n	800766c <__sinit+0xc>
 80076c6:	bf00      	nop
 80076c8:	0800806c 	.word	0x0800806c
 80076cc:	080075f9 	.word	0x080075f9

080076d0 <__sfp>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	4607      	mov	r7, r0
 80076d4:	f7ff ffac 	bl	8007630 <__sfp_lock_acquire>
 80076d8:	4b1e      	ldr	r3, [pc, #120]	; (8007754 <__sfp+0x84>)
 80076da:	681e      	ldr	r6, [r3, #0]
 80076dc:	69b3      	ldr	r3, [r6, #24]
 80076de:	b913      	cbnz	r3, 80076e6 <__sfp+0x16>
 80076e0:	4630      	mov	r0, r6
 80076e2:	f7ff ffbd 	bl	8007660 <__sinit>
 80076e6:	3648      	adds	r6, #72	; 0x48
 80076e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	d503      	bpl.n	80076f8 <__sfp+0x28>
 80076f0:	6833      	ldr	r3, [r6, #0]
 80076f2:	b30b      	cbz	r3, 8007738 <__sfp+0x68>
 80076f4:	6836      	ldr	r6, [r6, #0]
 80076f6:	e7f7      	b.n	80076e8 <__sfp+0x18>
 80076f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076fc:	b9d5      	cbnz	r5, 8007734 <__sfp+0x64>
 80076fe:	4b16      	ldr	r3, [pc, #88]	; (8007758 <__sfp+0x88>)
 8007700:	60e3      	str	r3, [r4, #12]
 8007702:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007706:	6665      	str	r5, [r4, #100]	; 0x64
 8007708:	f7ff fdba 	bl	8007280 <__retarget_lock_init_recursive>
 800770c:	f7ff ff96 	bl	800763c <__sfp_lock_release>
 8007710:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007714:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007718:	6025      	str	r5, [r4, #0]
 800771a:	61a5      	str	r5, [r4, #24]
 800771c:	2208      	movs	r2, #8
 800771e:	4629      	mov	r1, r5
 8007720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007724:	f7ff fdbd 	bl	80072a2 <memset>
 8007728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800772c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007730:	4620      	mov	r0, r4
 8007732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007734:	3468      	adds	r4, #104	; 0x68
 8007736:	e7d9      	b.n	80076ec <__sfp+0x1c>
 8007738:	2104      	movs	r1, #4
 800773a:	4638      	mov	r0, r7
 800773c:	f7ff ff62 	bl	8007604 <__sfmoreglue>
 8007740:	4604      	mov	r4, r0
 8007742:	6030      	str	r0, [r6, #0]
 8007744:	2800      	cmp	r0, #0
 8007746:	d1d5      	bne.n	80076f4 <__sfp+0x24>
 8007748:	f7ff ff78 	bl	800763c <__sfp_lock_release>
 800774c:	230c      	movs	r3, #12
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	e7ee      	b.n	8007730 <__sfp+0x60>
 8007752:	bf00      	nop
 8007754:	0800806c 	.word	0x0800806c
 8007758:	ffff0001 	.word	0xffff0001

0800775c <_fwalk_reent>:
 800775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007760:	4606      	mov	r6, r0
 8007762:	4688      	mov	r8, r1
 8007764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007768:	2700      	movs	r7, #0
 800776a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800776e:	f1b9 0901 	subs.w	r9, r9, #1
 8007772:	d505      	bpl.n	8007780 <_fwalk_reent+0x24>
 8007774:	6824      	ldr	r4, [r4, #0]
 8007776:	2c00      	cmp	r4, #0
 8007778:	d1f7      	bne.n	800776a <_fwalk_reent+0xe>
 800777a:	4638      	mov	r0, r7
 800777c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007780:	89ab      	ldrh	r3, [r5, #12]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d907      	bls.n	8007796 <_fwalk_reent+0x3a>
 8007786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800778a:	3301      	adds	r3, #1
 800778c:	d003      	beq.n	8007796 <_fwalk_reent+0x3a>
 800778e:	4629      	mov	r1, r5
 8007790:	4630      	mov	r0, r6
 8007792:	47c0      	blx	r8
 8007794:	4307      	orrs	r7, r0
 8007796:	3568      	adds	r5, #104	; 0x68
 8007798:	e7e9      	b.n	800776e <_fwalk_reent+0x12>

0800779a <__swhatbuf_r>:
 800779a:	b570      	push	{r4, r5, r6, lr}
 800779c:	460e      	mov	r6, r1
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	2900      	cmp	r1, #0
 80077a4:	b096      	sub	sp, #88	; 0x58
 80077a6:	4614      	mov	r4, r2
 80077a8:	461d      	mov	r5, r3
 80077aa:	da08      	bge.n	80077be <__swhatbuf_r+0x24>
 80077ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	602a      	str	r2, [r5, #0]
 80077b4:	061a      	lsls	r2, r3, #24
 80077b6:	d410      	bmi.n	80077da <__swhatbuf_r+0x40>
 80077b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077bc:	e00e      	b.n	80077dc <__swhatbuf_r+0x42>
 80077be:	466a      	mov	r2, sp
 80077c0:	f000 f9a4 	bl	8007b0c <_fstat_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	dbf1      	blt.n	80077ac <__swhatbuf_r+0x12>
 80077c8:	9a01      	ldr	r2, [sp, #4]
 80077ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077d2:	425a      	negs	r2, r3
 80077d4:	415a      	adcs	r2, r3
 80077d6:	602a      	str	r2, [r5, #0]
 80077d8:	e7ee      	b.n	80077b8 <__swhatbuf_r+0x1e>
 80077da:	2340      	movs	r3, #64	; 0x40
 80077dc:	2000      	movs	r0, #0
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	b016      	add	sp, #88	; 0x58
 80077e2:	bd70      	pop	{r4, r5, r6, pc}

080077e4 <__smakebuf_r>:
 80077e4:	898b      	ldrh	r3, [r1, #12]
 80077e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077e8:	079d      	lsls	r5, r3, #30
 80077ea:	4606      	mov	r6, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	d507      	bpl.n	8007800 <__smakebuf_r+0x1c>
 80077f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	6123      	str	r3, [r4, #16]
 80077f8:	2301      	movs	r3, #1
 80077fa:	6163      	str	r3, [r4, #20]
 80077fc:	b002      	add	sp, #8
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	ab01      	add	r3, sp, #4
 8007802:	466a      	mov	r2, sp
 8007804:	f7ff ffc9 	bl	800779a <__swhatbuf_r>
 8007808:	9900      	ldr	r1, [sp, #0]
 800780a:	4605      	mov	r5, r0
 800780c:	4630      	mov	r0, r6
 800780e:	f000 f893 	bl	8007938 <_malloc_r>
 8007812:	b948      	cbnz	r0, 8007828 <__smakebuf_r+0x44>
 8007814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007818:	059a      	lsls	r2, r3, #22
 800781a:	d4ef      	bmi.n	80077fc <__smakebuf_r+0x18>
 800781c:	f023 0303 	bic.w	r3, r3, #3
 8007820:	f043 0302 	orr.w	r3, r3, #2
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	e7e3      	b.n	80077f0 <__smakebuf_r+0xc>
 8007828:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <__smakebuf_r+0x7c>)
 800782a:	62b3      	str	r3, [r6, #40]	; 0x28
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	6020      	str	r0, [r4, #0]
 8007830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007834:	81a3      	strh	r3, [r4, #12]
 8007836:	9b00      	ldr	r3, [sp, #0]
 8007838:	6163      	str	r3, [r4, #20]
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	6120      	str	r0, [r4, #16]
 800783e:	b15b      	cbz	r3, 8007858 <__smakebuf_r+0x74>
 8007840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007844:	4630      	mov	r0, r6
 8007846:	f000 f973 	bl	8007b30 <_isatty_r>
 800784a:	b128      	cbz	r0, 8007858 <__smakebuf_r+0x74>
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f023 0303 	bic.w	r3, r3, #3
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	81a3      	strh	r3, [r4, #12]
 8007858:	89a0      	ldrh	r0, [r4, #12]
 800785a:	4305      	orrs	r5, r0
 800785c:	81a5      	strh	r5, [r4, #12]
 800785e:	e7cd      	b.n	80077fc <__smakebuf_r+0x18>
 8007860:	080075f9 	.word	0x080075f9

08007864 <_free_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4605      	mov	r5, r0
 8007868:	2900      	cmp	r1, #0
 800786a:	d041      	beq.n	80078f0 <_free_r+0x8c>
 800786c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007870:	1f0c      	subs	r4, r1, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	bfb8      	it	lt
 8007876:	18e4      	addlt	r4, r4, r3
 8007878:	f000 f97c 	bl	8007b74 <__malloc_lock>
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <_free_r+0x90>)
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	b933      	cbnz	r3, 8007890 <_free_r+0x2c>
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	6014      	str	r4, [r2, #0]
 8007886:	4628      	mov	r0, r5
 8007888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800788c:	f000 b978 	b.w	8007b80 <__malloc_unlock>
 8007890:	42a3      	cmp	r3, r4
 8007892:	d908      	bls.n	80078a6 <_free_r+0x42>
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	1821      	adds	r1, r4, r0
 8007898:	428b      	cmp	r3, r1
 800789a:	bf01      	itttt	eq
 800789c:	6819      	ldreq	r1, [r3, #0]
 800789e:	685b      	ldreq	r3, [r3, #4]
 80078a0:	1809      	addeq	r1, r1, r0
 80078a2:	6021      	streq	r1, [r4, #0]
 80078a4:	e7ed      	b.n	8007882 <_free_r+0x1e>
 80078a6:	461a      	mov	r2, r3
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	b10b      	cbz	r3, 80078b0 <_free_r+0x4c>
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d9fa      	bls.n	80078a6 <_free_r+0x42>
 80078b0:	6811      	ldr	r1, [r2, #0]
 80078b2:	1850      	adds	r0, r2, r1
 80078b4:	42a0      	cmp	r0, r4
 80078b6:	d10b      	bne.n	80078d0 <_free_r+0x6c>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	4401      	add	r1, r0
 80078bc:	1850      	adds	r0, r2, r1
 80078be:	4283      	cmp	r3, r0
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	d1e0      	bne.n	8007886 <_free_r+0x22>
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	6053      	str	r3, [r2, #4]
 80078ca:	4401      	add	r1, r0
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	e7da      	b.n	8007886 <_free_r+0x22>
 80078d0:	d902      	bls.n	80078d8 <_free_r+0x74>
 80078d2:	230c      	movs	r3, #12
 80078d4:	602b      	str	r3, [r5, #0]
 80078d6:	e7d6      	b.n	8007886 <_free_r+0x22>
 80078d8:	6820      	ldr	r0, [r4, #0]
 80078da:	1821      	adds	r1, r4, r0
 80078dc:	428b      	cmp	r3, r1
 80078de:	bf04      	itt	eq
 80078e0:	6819      	ldreq	r1, [r3, #0]
 80078e2:	685b      	ldreq	r3, [r3, #4]
 80078e4:	6063      	str	r3, [r4, #4]
 80078e6:	bf04      	itt	eq
 80078e8:	1809      	addeq	r1, r1, r0
 80078ea:	6021      	streq	r1, [r4, #0]
 80078ec:	6054      	str	r4, [r2, #4]
 80078ee:	e7ca      	b.n	8007886 <_free_r+0x22>
 80078f0:	bd38      	pop	{r3, r4, r5, pc}
 80078f2:	bf00      	nop
 80078f4:	20001b1c 	.word	0x20001b1c

080078f8 <sbrk_aligned>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	4e0e      	ldr	r6, [pc, #56]	; (8007934 <sbrk_aligned+0x3c>)
 80078fc:	460c      	mov	r4, r1
 80078fe:	6831      	ldr	r1, [r6, #0]
 8007900:	4605      	mov	r5, r0
 8007902:	b911      	cbnz	r1, 800790a <sbrk_aligned+0x12>
 8007904:	f000 f88c 	bl	8007a20 <_sbrk_r>
 8007908:	6030      	str	r0, [r6, #0]
 800790a:	4621      	mov	r1, r4
 800790c:	4628      	mov	r0, r5
 800790e:	f000 f887 	bl	8007a20 <_sbrk_r>
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	d00a      	beq.n	800792c <sbrk_aligned+0x34>
 8007916:	1cc4      	adds	r4, r0, #3
 8007918:	f024 0403 	bic.w	r4, r4, #3
 800791c:	42a0      	cmp	r0, r4
 800791e:	d007      	beq.n	8007930 <sbrk_aligned+0x38>
 8007920:	1a21      	subs	r1, r4, r0
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f87c 	bl	8007a20 <_sbrk_r>
 8007928:	3001      	adds	r0, #1
 800792a:	d101      	bne.n	8007930 <sbrk_aligned+0x38>
 800792c:	f04f 34ff 	mov.w	r4, #4294967295
 8007930:	4620      	mov	r0, r4
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	20001b20 	.word	0x20001b20

08007938 <_malloc_r>:
 8007938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793c:	1ccd      	adds	r5, r1, #3
 800793e:	f025 0503 	bic.w	r5, r5, #3
 8007942:	3508      	adds	r5, #8
 8007944:	2d0c      	cmp	r5, #12
 8007946:	bf38      	it	cc
 8007948:	250c      	movcc	r5, #12
 800794a:	2d00      	cmp	r5, #0
 800794c:	4607      	mov	r7, r0
 800794e:	db01      	blt.n	8007954 <_malloc_r+0x1c>
 8007950:	42a9      	cmp	r1, r5
 8007952:	d905      	bls.n	8007960 <_malloc_r+0x28>
 8007954:	230c      	movs	r3, #12
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	2600      	movs	r6, #0
 800795a:	4630      	mov	r0, r6
 800795c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007960:	4e2e      	ldr	r6, [pc, #184]	; (8007a1c <_malloc_r+0xe4>)
 8007962:	f000 f907 	bl	8007b74 <__malloc_lock>
 8007966:	6833      	ldr	r3, [r6, #0]
 8007968:	461c      	mov	r4, r3
 800796a:	bb34      	cbnz	r4, 80079ba <_malloc_r+0x82>
 800796c:	4629      	mov	r1, r5
 800796e:	4638      	mov	r0, r7
 8007970:	f7ff ffc2 	bl	80078f8 <sbrk_aligned>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	4604      	mov	r4, r0
 8007978:	d14d      	bne.n	8007a16 <_malloc_r+0xde>
 800797a:	6834      	ldr	r4, [r6, #0]
 800797c:	4626      	mov	r6, r4
 800797e:	2e00      	cmp	r6, #0
 8007980:	d140      	bne.n	8007a04 <_malloc_r+0xcc>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	4631      	mov	r1, r6
 8007986:	4638      	mov	r0, r7
 8007988:	eb04 0803 	add.w	r8, r4, r3
 800798c:	f000 f848 	bl	8007a20 <_sbrk_r>
 8007990:	4580      	cmp	r8, r0
 8007992:	d13a      	bne.n	8007a0a <_malloc_r+0xd2>
 8007994:	6821      	ldr	r1, [r4, #0]
 8007996:	3503      	adds	r5, #3
 8007998:	1a6d      	subs	r5, r5, r1
 800799a:	f025 0503 	bic.w	r5, r5, #3
 800799e:	3508      	adds	r5, #8
 80079a0:	2d0c      	cmp	r5, #12
 80079a2:	bf38      	it	cc
 80079a4:	250c      	movcc	r5, #12
 80079a6:	4629      	mov	r1, r5
 80079a8:	4638      	mov	r0, r7
 80079aa:	f7ff ffa5 	bl	80078f8 <sbrk_aligned>
 80079ae:	3001      	adds	r0, #1
 80079b0:	d02b      	beq.n	8007a0a <_malloc_r+0xd2>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	442b      	add	r3, r5
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	e00e      	b.n	80079d8 <_malloc_r+0xa0>
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	1b52      	subs	r2, r2, r5
 80079be:	d41e      	bmi.n	80079fe <_malloc_r+0xc6>
 80079c0:	2a0b      	cmp	r2, #11
 80079c2:	d916      	bls.n	80079f2 <_malloc_r+0xba>
 80079c4:	1961      	adds	r1, r4, r5
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	6025      	str	r5, [r4, #0]
 80079ca:	bf18      	it	ne
 80079cc:	6059      	strne	r1, [r3, #4]
 80079ce:	6863      	ldr	r3, [r4, #4]
 80079d0:	bf08      	it	eq
 80079d2:	6031      	streq	r1, [r6, #0]
 80079d4:	5162      	str	r2, [r4, r5]
 80079d6:	604b      	str	r3, [r1, #4]
 80079d8:	4638      	mov	r0, r7
 80079da:	f104 060b 	add.w	r6, r4, #11
 80079de:	f000 f8cf 	bl	8007b80 <__malloc_unlock>
 80079e2:	f026 0607 	bic.w	r6, r6, #7
 80079e6:	1d23      	adds	r3, r4, #4
 80079e8:	1af2      	subs	r2, r6, r3
 80079ea:	d0b6      	beq.n	800795a <_malloc_r+0x22>
 80079ec:	1b9b      	subs	r3, r3, r6
 80079ee:	50a3      	str	r3, [r4, r2]
 80079f0:	e7b3      	b.n	800795a <_malloc_r+0x22>
 80079f2:	6862      	ldr	r2, [r4, #4]
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	bf0c      	ite	eq
 80079f8:	6032      	streq	r2, [r6, #0]
 80079fa:	605a      	strne	r2, [r3, #4]
 80079fc:	e7ec      	b.n	80079d8 <_malloc_r+0xa0>
 80079fe:	4623      	mov	r3, r4
 8007a00:	6864      	ldr	r4, [r4, #4]
 8007a02:	e7b2      	b.n	800796a <_malloc_r+0x32>
 8007a04:	4634      	mov	r4, r6
 8007a06:	6876      	ldr	r6, [r6, #4]
 8007a08:	e7b9      	b.n	800797e <_malloc_r+0x46>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f000 f8b6 	bl	8007b80 <__malloc_unlock>
 8007a14:	e7a1      	b.n	800795a <_malloc_r+0x22>
 8007a16:	6025      	str	r5, [r4, #0]
 8007a18:	e7de      	b.n	80079d8 <_malloc_r+0xa0>
 8007a1a:	bf00      	nop
 8007a1c:	20001b1c 	.word	0x20001b1c

08007a20 <_sbrk_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d06      	ldr	r5, [pc, #24]	; (8007a3c <_sbrk_r+0x1c>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7fb fe22 	bl	8003674 <_sbrk>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_sbrk_r+0x1a>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_sbrk_r+0x1a>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20001b24 	.word	0x20001b24

08007a40 <__sread>:
 8007a40:	b510      	push	{r4, lr}
 8007a42:	460c      	mov	r4, r1
 8007a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a48:	f000 f8a0 	bl	8007b8c <_read_r>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	bfab      	itete	ge
 8007a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a52:	89a3      	ldrhlt	r3, [r4, #12]
 8007a54:	181b      	addge	r3, r3, r0
 8007a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a5a:	bfac      	ite	ge
 8007a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a5e:	81a3      	strhlt	r3, [r4, #12]
 8007a60:	bd10      	pop	{r4, pc}

08007a62 <__swrite>:
 8007a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a66:	461f      	mov	r7, r3
 8007a68:	898b      	ldrh	r3, [r1, #12]
 8007a6a:	05db      	lsls	r3, r3, #23
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	4616      	mov	r6, r2
 8007a72:	d505      	bpl.n	8007a80 <__swrite+0x1e>
 8007a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a78:	2302      	movs	r3, #2
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f000 f868 	bl	8007b50 <_lseek_r>
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	463b      	mov	r3, r7
 8007a90:	4628      	mov	r0, r5
 8007a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a96:	f000 b817 	b.w	8007ac8 <_write_r>

08007a9a <__sseek>:
 8007a9a:	b510      	push	{r4, lr}
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa2:	f000 f855 	bl	8007b50 <_lseek_r>
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	bf15      	itete	ne
 8007aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8007aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ab6:	81a3      	strheq	r3, [r4, #12]
 8007ab8:	bf18      	it	ne
 8007aba:	81a3      	strhne	r3, [r4, #12]
 8007abc:	bd10      	pop	{r4, pc}

08007abe <__sclose>:
 8007abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac2:	f000 b813 	b.w	8007aec <_close_r>
	...

08007ac8 <_write_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d07      	ldr	r5, [pc, #28]	; (8007ae8 <_write_r+0x20>)
 8007acc:	4604      	mov	r4, r0
 8007ace:	4608      	mov	r0, r1
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	602a      	str	r2, [r5, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f7fb fdb0 	bl	800363c <_write>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_write_r+0x1e>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_write_r+0x1e>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	20001b24 	.word	0x20001b24

08007aec <_close_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d06      	ldr	r5, [pc, #24]	; (8007b08 <_close_r+0x1c>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	f7fb fdae 	bl	8003658 <_close>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_close_r+0x1a>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_close_r+0x1a>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	20001b24 	.word	0x20001b24

08007b0c <_fstat_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4d07      	ldr	r5, [pc, #28]	; (8007b2c <_fstat_r+0x20>)
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	4611      	mov	r1, r2
 8007b18:	602b      	str	r3, [r5, #0]
 8007b1a:	f7fb fda1 	bl	8003660 <_fstat>
 8007b1e:	1c43      	adds	r3, r0, #1
 8007b20:	d102      	bne.n	8007b28 <_fstat_r+0x1c>
 8007b22:	682b      	ldr	r3, [r5, #0]
 8007b24:	b103      	cbz	r3, 8007b28 <_fstat_r+0x1c>
 8007b26:	6023      	str	r3, [r4, #0]
 8007b28:	bd38      	pop	{r3, r4, r5, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20001b24 	.word	0x20001b24

08007b30 <_isatty_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d06      	ldr	r5, [pc, #24]	; (8007b4c <_isatty_r+0x1c>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7fb fd96 	bl	800366c <_isatty>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_isatty_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_isatty_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20001b24 	.word	0x20001b24

08007b50 <_lseek_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d07      	ldr	r5, [pc, #28]	; (8007b70 <_lseek_r+0x20>)
 8007b54:	4604      	mov	r4, r0
 8007b56:	4608      	mov	r0, r1
 8007b58:	4611      	mov	r1, r2
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	602a      	str	r2, [r5, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f7fb fd86 	bl	8003670 <_lseek>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d102      	bne.n	8007b6e <_lseek_r+0x1e>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	b103      	cbz	r3, 8007b6e <_lseek_r+0x1e>
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	20001b24 	.word	0x20001b24

08007b74 <__malloc_lock>:
 8007b74:	4801      	ldr	r0, [pc, #4]	; (8007b7c <__malloc_lock+0x8>)
 8007b76:	f7ff bb84 	b.w	8007282 <__retarget_lock_acquire_recursive>
 8007b7a:	bf00      	nop
 8007b7c:	20001b18 	.word	0x20001b18

08007b80 <__malloc_unlock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_unlock+0x8>)
 8007b82:	f7ff bb7f 	b.w	8007284 <__retarget_lock_release_recursive>
 8007b86:	bf00      	nop
 8007b88:	20001b18 	.word	0x20001b18

08007b8c <_read_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d07      	ldr	r5, [pc, #28]	; (8007bac <_read_r+0x20>)
 8007b90:	4604      	mov	r4, r0
 8007b92:	4608      	mov	r0, r1
 8007b94:	4611      	mov	r1, r2
 8007b96:	2200      	movs	r2, #0
 8007b98:	602a      	str	r2, [r5, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f7fb fd40 	bl	8003620 <_read>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_read_r+0x1e>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_read_r+0x1e>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	20001b24 	.word	0x20001b24

08007bb0 <_init>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr

08007bbc <_fini>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	bf00      	nop
 8007bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc2:	bc08      	pop	{r3}
 8007bc4:	469e      	mov	lr, r3
 8007bc6:	4770      	bx	lr
